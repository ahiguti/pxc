
thread装飾の意味
- 関数に対するthread装飾
  - 装飾無し関数: メインスレッドでしか利用できない関数
  - threaded関数: 子スレッドでも利用できる関数
      グローバル変数にアクセスしない
      threadedではない関数を呼ばない
      引数や変数はthreaded型でなければならない
      closureはthreadedでないものも定義できるが呼べない
- 型に対するthread装飾
  - 装飾無し型: メインスレッドでしか利用できない型
  - threaded型: 子スレッドでも利用できる型
      thread間で渡すことはできないが中では利用できる型
      メンバ関数は暗黙裡にthreaded関数になる
  - multithreaded型: 複数スレッドから利用可能な型
      暗黙裡にthreaded
      tptrが指せる
      fieldにはtptr/tiptrを持てる
  - valuetype型: immutableにできる型(値型)
      暗黙裡にthreaded
      iptrが指せる
      fieldにはiptr/tiptrを持てる
  - mtvaluetype型: multithreadedかつvaluetype
      暗黙裡にmultithreadedかつvaluetype
      tptrとiptrが指せる
      fieldにはtiptrを持てる
  - tsvaluetype型: 
      暗黙裡にmtvaluetype
      tiptrが指せる
  - mtvaluetypeとtsvaluetypeの違いは、constメンバ関数を非同期に安全に
    呼べるかどうか。constメンバ関数がmutableフィールドを書き換えるような
    場合はmtvaluetype、そうでないならtsvaluetypeにできる。tiptrは
    dereference時に指す先をlockしない。
  - テンプレ型インスタンスについては、テンプレ型に付いた装飾と型引数の
    最も弱い装飾を持つ。ただしnocascadeファミリの型については型引数に関係
    なくテンプレ型自体の装飾を持つ。

- コンテナ実装
  - 型カテゴリ
    - farray: 固定長配列
    - varray: 動的リサイズ可能な配列
    - darray: 作成時にサイズ指定可能な配列(未実装)
    - slice: 配列のslice(weak)
    - cslice: 配列のslice(weak)、要素がconst
    - tree_map: ソートされた連想配列
    - tree_map_range: tree_mapの範囲(weak)
    - tree_map_crange: tree_mapの範囲(weak)、要素がconst
    - hash_map: ソートされない連想配列(未実装)
    - hash_map_range: hash_mapの範囲(weak)
    - hash_map_crange: hash_mapの範囲(weak)、要素がconst
  - pxcクラスに対する要件 - 全カテゴリ共通
    - macro key_type
    - macro mapped_type
    - macro range_type
    - macro crange_type
      (これらは要素やrange式の実装に使う)
  - C++クラスに対する要件 - 全カテゴリ共通
    - typedef ... key_type;
    - typedef ... mapped_type;
    - typedef ... range_type;
    - typedef ... crange_type;
    - typedef ... iterator; (foreachなどが使う)
    - typedef ... const_iterator;
    - デフォルト&コピーコンストラクタ
    - range_typeとcrange_typeからのコンストラクタ
    - operator =
    - operator [] constとnon-const
  - C++クラスに対する要件 - weakではないもの
    - template <typename Tc> friend struct refvar_igrd_nn;
    - template <typename Tc> friend struct valvar_igrd_nn;
    - void inc_invalidate_guard() const
    - void dec_invalidate_guard() const
      (これらはresizeにより要素への参照を無効化されないようにガード
       するときに使う)
  - C++クラスに対する要件 - 列コンテナとslice
    - T *rawarr()
    - const T *rawarr() const
    - size_type size() const
  - C++クラスに対する要件 - 連想配列 
    (これらは if (x : c) ... 文が使う)
    - typedef ... find_type;
    - typedef ... cfind_type;
    - find_type find(const key_type& k)
    - cfind_type cfind(const key_type& k) const
    - find_type notfound()
    - cfind_type cnotfound() const
    - mapped_type& get_mapped(find_type const& x)
    - const mapped_type& get_cmapped(cfind_type const& x) const

- ユーザ定義コンストラクタ
  - ユーザ定義コンストラクタの中にかけるのは、
    - フィールド定義文: int x = ...
    - noexec文: macroやfunctionなど、実行時には何もしない文
    - exec文: それ以外(実行時に何かする文)
  - コンストラクタの中では、exec文はフィールド定義文より前にあっては
    ならない
  - フィールド定義文からは自クラスのメンバ関数をオブジェクト指定なしに
    呼ぶことはできない(まだフィールド初期化が終わっていないから)
  - threadedな型のユーザ定義コンストラクタは、threadedな関数しか
    呼ぶことはできない。

- グローバル変数
  - threadedな関数・型からはグローバル変数をアクセスできない
  - グローバル変数にthreadedな型を使うことはできない(初期化順序の
    問題を避けるため)

- for文
  C++と同様のfor文。ただし変数宣言できない。 (expr_for_new)
  - for (expr1; expr2; expr3) { ... }
    expr2と3は複数回評価される
  整数の範囲を指定。(expr_forrange_new)
  - for (type v : expr1 .. expr2) { ... }
    変数vはconst value。expr1と2は一度しか評価されない
  コンテナ要素イテレート。(expr_feach_new)
  - for (ktype k, mtype m : expr1) { ... }
  - for (ktype k, mtype mutable m : expr1) { ... }
    変数kはconst reference, 変数mはconst or mutable reference

- try-catch文
  try { ... } catch (type e) { ... } ...
  変数eはconst reference

- 参照を返す関数、rangeを返す関数
  - 現在のpxc実装ではexternでしか実装できない。
  - 参照を返す関数はメンバ関数であってはならず、返す参照は第一引数
    が有効であるかぎりは有効であるようなものでなければならない
  - rangeを返す関数はメンバ関数でなくてはならず、返すrangeはthis
    が有効であるかぎりは有効であるようなものでなければならない

- expand文
  expand(sym, idx : metalist) { stmt0; stmt1; stmt2; ...  }
  symとidxはシンボル。metalistは
    list{list{"arg0", s0}, list{"arg1", s1}, ...}
  の形か、あるいは
    list{"arg0", "arg1", ...}
  の形。s0等はステートメント番号又はそのリスト。
  metalistの各要素について、s_i番めの文stmt_iを、文中のsymをarg_iで
  置き換え、またidxをiで置き換えた文を作り、それを連結したものが
  expand文の位置に展開される。
  ステートメント番号がリストで指定された場合は、リストで指定された
  stmt_iを連結した文に展開され、それをmetalistの各要素について連結
  したものがexpand文の位置に展開される。
  ステートメント番号が指定されなかった場合には、全ステートメントを順に
  指定したのと同じように動作する。
  symを置換する際には、それがテンプレ式の中であればメタ文字列、そうで
  ないならシンボルに置き換わる。(シンボルではなくメタ文字列に置き換え
  たいときは明示的にmeta::to_stringすればよい)

- 引数宣言のexpand
  function void foo(expand(metalist))
  の形。metalistは、
    list{"arg0", string, byref, mutable}
  のリスト。byrefとmutableはそれぞれ0か1の値。

- namespaceの属性
  - threaded namespace は、ロード時実行文を持たない名前空間
  - private namespace は、親または先祖namespaceからのみimportできる

- importの属性
  - namespace bar が private import foo していて、namespace baz が
    (private or public) import bar しているとき、bazにはfooのシンボル
    は見えない。
  - namespace bar が public import foo していて、namespace baz が
    (private or public) import bar しているとき、bazにはfooのシンボル
    は見える。
  - import foo f とすると、fooのシンボルは名前空間プレフィックスとして
    「f」を付けて参照できる。
  - import foo - とすると、fooのシンボルは名前空間プレフィックス無し
    で参照できる。
  - namespace bar が import foo + とすると、擬似メンバ関数のlookup時に
    fooに加えてbarを検索するようになる。

- interface
  - restricted interface と non-restricted interfaceの二種類がある
    - restricted は、そのインタフェースを実装できる型が一つだけ
      - 構造体のインタフェースの一部だけを渡したいときに使う
      - メソッド呼び出しが非仮想関数になるのでわずかに速い
      - ダウンキャストが必ず成功する。
  - non-restricted interfaceの定義と実装
    interface foo_i {
      public function void m1();
    }
    struct foo <foo_i> {
      public function void m1() { }
    }
    struct bar <foo_i> {
      public function void m1() { }
    }
  - restricted interfaceの定義と実装
    interface foo_i foo {
      public function void m1();
    }
    struct foo <foo_i> {
      public function void m1() { }
    }
    foo以外がfoo_iを実装することはできない

