public namespace core::io::scheduler "use-unsafe";
public import core::numeric::integral -;
public import core::container::array -;
public import core::io -;
public import core::io::file -;
public import core::io::process -;
public import core::io::errno -;

public pure function extern "pxcrt::px_%" uint
get_nprocs(io const& iop);

public pure tsvaluetype struct extern "pxcrt::px_cpu_set_t" cpu_set_t { }

public pure function extern "pxcrt::%" void
cpu_set_t_zero(cpu_set_t mutable& cs);
public pure function extern "pxcrt::%" void
cpu_set_t_set(cpu_set_t mutable& cs, uint c);
public pure function extern "pxcrt::%" void
cpu_set_t_clr(cpu_set_t mutable& cs, uint c);
public pure function extern "pxcrt::%" bool
cpu_set_t_isset(cpu_set_t const& cs, uint c);

public pure function {tpl, t} void
cpu_set_t_append_to_string(cpu_set_t const& cs, string mutable& buf)
{
  cpu_set_t_append_to_string_impl(cs, buf);
}

pure function extern "pxcrt::cpu_set_t_append_to_string" void
cpu_set_t_append_to_string_impl(cpu_set_t const& cs, string mutable& buf);

public pure function extern "pxcrt::px_%" errno_t
sched_setaffinity(io const& iop, pid_t pid, cpu_set_t mutable& cs);
public pure function extern "pxcrt::px_%" errno_t
sched_getaffinity(io const& iop, pid_t pid, cpu_set_t mutable& cs);

extern "types" inline
#ifdef __linux
#include <sched.h>
#endif
namespace pxcrt {

#ifdef __linux
typedef cpu_set_t px_cpu_set_t;
#else
typedef pxcrt::bt_unit px_cpu_set_t;
#endif

};
;

extern "implementation" inline
namespace pxcrt {

#ifdef __linux

#include <sys/sysinfo.h>
uint px_get_nprocs(io const& io) { return get_nprocs(); }
void cpu_set_t_append_to_string(px_cpu_set_t const& cs, pxcrt::bt_string& buf)
{
  const int n = get_nprocs();
  for (int i = 0; i < n; ++i) {
    buf.push_back(CPU_ISSET(i, &cs) ? '1' : '0');
  }
  if (n <= 0) {
    buf.push_back('-');
  }
}
void cpu_set_t_zero(px_cpu_set_t& cs) { CPU_ZERO(&cs); }
void cpu_set_t_set(px_cpu_set_t& cs, pxcrt::bt_uint c) { CPU_SET(c, &cs); }
void cpu_set_t_clr(px_cpu_set_t& cs, pxcrt::bt_uint c) { CPU_CLR(c, &cs); }
pxcrt::bt_bool cpu_set_t_isset(px_cpu_set_t const& cs, pxcrt::bt_uint c)
{ return CPU_ISSET(c, &cs) != 0; }
int px_sched_setaffinity(io const& io, pid_t pid, px_cpu_set_t& cs)
{ return sched_setaffinity(pid, sizeof(cs), &cs) == 0 ? 0 : errno; }
int px_sched_getaffinity(io const& io, pid_t pid, px_cpu_set_t& cs)
{ return sched_getaffinity(pid, sizeof(cs), &cs) == 0 ? 0 : errno; }

#else

uint px_get_nprocs(io const& io) { return 0; }
void cpu_set_t_append_to_string(px_cpu_set_t const& cs, pxcrt::bt_string& buf)
{ buf.push_back('-'); }
void cpu_set_t_zero(px_cpu_set_t& cs) { }
void cpu_set_t_set(px_cpu_set_t& cs, pxcrt::bt_uint c) { }
void cpu_set_t_clr(px_cpu_set_t& cs, pxcrt::bt_uint c) { }
pxcrt::bt_bool cpu_set_t_isset(px_cpu_set_t const& cs, pxcrt::bt_uint c)
{ return false; }
int px_sched_setaffinity(io const& io, pid_t pid, px_cpu_set_t& cs)
{ return ENOTSUP; }
int px_sched_getaffinity(io const& io, pid_t pid, px_cpu_set_t& cs)
{ return ENOTSUP; }

#endif

};
;

