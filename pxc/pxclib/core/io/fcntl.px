public threaded namespace core::io::fcntl "use-unsafe";
public import core::io::file +;
public import core::io::errno -;
public import core::meta m;

public pure function errno_or_value{open_flags_t}
file_getfl(file const& f)
{
  open_flags_t v;
  errno_t e = file_getfl_impl(f, v);
  errno_or_value{open_flags_t} r;
  if (e != EOK) {
    r.errno = e;
  } else {
    r.value = v;
  }
  return r;
}

public pure function extern "pxcrt::file_setfl"
errno_t file_setfl(file const& f, open_flags_t flags);

private pure function extern "pxcrt::file_getfl_impl"
errno_t file_getfl_impl(file const& f, open_flags_t mutable& flags_r);

extern "implementation" inline
namespace pxcrt {

int file_getfl_impl(file const& f, int& flags_r)
{
  flags_r = ::fcntl(f.get(), F_GETFL);
  return flags_r < 0 ? errno : 0;
}

int file_setfl(file const& f, int flags)
{
  int v = ::fcntl(f.get(), F_SETFL, flags);
  return v < 0 ? errno : 0;
}

};
;

