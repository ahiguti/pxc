public threaded namespace core::io::epoll "use-unsafe";
public import core::numeric::integral -;
public import core::container::array -;
public import core::io::file +;
public import core::io::errno -;
public import core::io::poll -;
public import core::pointer -;
public import core::meta m;

public metafunction has_epoll m::eq{m::profile{"platform"}, "Linux"};

expand (i: m::seq{has_epoll}) {

  public pure multithreaded struct extern "pxcrt::epoll_t" "nodefault"
  epoll(core::io::io const& iop) { }

  public pure tsvaluetype struct extern "unsigned" "extbitmask"
  epoll_eventmask_t { }

  public extern "pxcrt::epoll_eventmask_in" epoll_eventmask_t EPOLLIN;
  public extern "pxcrt::epoll_eventmask_out" epoll_eventmask_t EPOLLOUT;
  public extern "pxcrt::epoll_eventmask_et" epoll_eventmask_t EPOLLET;

  public pure function extern "pxcrt::epoll_add" errno_t
  epoll_add(epoll mutable& p, file_mt const& f, epoll_eventmask_t ev);

  public pure function extern "pxcrt::epoll_modify" errno_t
  epoll_modify(epoll mutable& p, file_mt const& f, epoll_eventmask_t ev);

  public pure function extern "pxcrt::epoll_remove" errno_t
  epoll_remove(epoll mutable& p, file_mt const& f);

  public pure tsvaluetype struct extern "epoll_event"
  epoll_event { }

  public pure function extern "pxcrt::epoll_event_fileno" int
  epoll_event_fileno(epoll_event const& ev);

  public pure function extern "pxcrt::epoll_event_events"
  epoll_eventmask_t epoll_event_events(epoll_event const& ev);

  public pure function extern "pxcrt::epoll_wait" errno_t
  epoll_wait(epoll mutable& p, size_t maxevents, uint timeo_ms,
    varray{epoll_event} mutable& events_r);
}

expand (i: m::seq{m::not{has_epoll}}) {

  public metafunction epoll poll;
  public metafunction epoll_eventmask_t poll_eventmask_t;
  public metafunction EPOLLIN POLLIN;
  public metafunction EPOLLOUT POLLOUT;
  public extern "0" poll_eventmask_t EPOLLET;
  public metafunction epoll_add poll_add;
  public metafunction epoll_modify poll_modify;
  public metafunction epoll_remove poll_remove;
  public metafunction epoll_event poll_event;
  public metafunction epoll_event_fileno poll_event_fileno;
  public metafunction epoll_event_events poll_event_events;
  public metafunction epoll_wait poll_wait;

}

/* private */

extern "types" inline

#if %{has_epoll}%

#include <sys/epoll.h>

namespace pxcrt {

struct epoll_t {
  epoll_t(io const& iop);
  file_mt handle;
};

enum { epoll_eventmask_in = EPOLLIN };
enum { epoll_eventmask_out = EPOLLOUT };
enum { epoll_eventmask_et = EPOLLET };

};

#endif /* if has_epoll */

;

extern "implementation" inline

#if %{has_epoll}%

namespace pxcrt {

epoll_t::epoll_t(io const& iop)
  : handle(io_make_file_mt(iop, ::epoll_create(1024)))
{
}

int epoll_add(epoll_t& p, file_mt const& f, unsigned ev)
{
  epoll_event e;
  e.events = ev;
  e.data.fd = f.get();
  const int r = epoll_ctl(p.handle.get(), EPOLL_CTL_ADD, f.get(), &e);
  return r < 0 ? errno : 0;
}

int epoll_modify(epoll_t& p, file_mt const& f, unsigned ev)
{
  epoll_event e;
  e.events = ev;
  e.data.fd = f.get();
  const int r = epoll_ctl(p.handle.get(), EPOLL_CTL_MOD, f.get(), &e);
  return r < 0 ? errno : 0;
}

int epoll_remove(epoll_t& p, file_mt const& f)
{
  epoll_event e = { };
  const int r = epoll_ctl(p.handle.get(), EPOLL_CTL_DEL, f.get(), &e);
  return r < 0 ? errno : 0;
}

pxcrt::bt_int epoll_event_fileno(epoll_event const& e)
{
  return e.data.fd;
}

unsigned epoll_event_events(epoll_event const& e)
{
  return e.events;
}

int
epoll_wait(epoll_t& ep, pxcrt::bt_size_t maxevents,
  pxcrt::bt_uint timeo_ms, pxcrt::pxcvarray<epoll_event>& events_r)
{
  maxevents = std::min(maxevents, size_t(65535));
  size_t const osz = events_r.size();
  epoll_event *evp = events_r.reserve_back<1>(maxevents);
  int n = epoll_wait(ep.handle.get(), evp, maxevents, timeo_ms);
  if (n < 0) {
    return errno;
  }
  events_r.rawarr_set_valid_len(osz + maxevents);
  return 0;
}

};

#endif /* if has_epoll */

;

