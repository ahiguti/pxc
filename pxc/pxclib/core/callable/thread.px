public threaded namespace core::callable::thread "use-unsafe";
public import core::numeric::integral -;
public import core::operator -;
public import core::pointer -;
public import core::io::errno -;
public import core::generic::datatype -;
public import core::meta m;
public import core::exception -;
public import core::callable::callable -;
public import core::text::serialize -;

public threaded function {f} threaded_callable_ptr{m::ret_type{f}, m::nil}
make_thread_ptr(expand(m::args{f}))
{
  return threaded_callable_ptr{m::ret_type{f}, m::nil}(
    make_ptr{thread{f}}(expand(a: m::arg_names{f}; a)));
    /* arg types of f must be multithreaded, or an error is raised here. */
}

public threaded struct {f}
thread(expand(m::args{f}))
  <threaded_callable{m::ret_type{f}, m::nil}>
{
  private metafunction tfuncobj thread_main_funcobj{f};
  private tfuncobj mutable fobj = tfuncobj(expand(a: m::arg_names{f}; a));
  private bool need_join = false;
  private thread_ptr thd;
  private atomic_bool finished_flag;
  init();
  private function void init() {
    const err = thread_create{tfuncobj}(thd, finished_flag, fobj);
    if (err != EOK) {
      throw runtime_error_template{"thread_create"}(to_string(err));
    }
    need_join = true;
  }
  public function ~ {
    call__();
  }
  public function bool finished() {
    return atomic_bool_get(finished_flag);
  }
  public function m::ret_type{f} call__() {
    const err = join();
    if (err != EOK) {
      throw runtime_error_template{"thread_join"}(to_string(err));
    }
    if (m::ne{m::ret_type{f}, void}) {
      return fobj.ret.some;
    }
  }
  private function errno_t join() {
    if (need_join) {
      need_join = false;
      return thread_join{tfuncobj}(thd);
    }
    return EOK;
  }
}

private multithreaded struct {f}
thread_main_funcobj(expand(m::args{f}))
{
  private metafunction tfld n_tuple{m::arg_types{f}, m::nil};
  private metafunction tret
    m::cond{m::eq{m::ret_type{f}, void}, unit, option{m::ret_type{f}}};
  public tfld const fld = tfld(expand(a: m::arg_names{f}; a));
    /* arg types of f must be multithreaded, or an error is raised here. */
  public tret mutable ret;
  public function void call__() {
    if (m::eq{m::ret_type{f}, void}) {
      f(expand(f: m::field_names{tfld}; fld.f));
    } else {
      ret.some = f(expand(f: m::field_names{tfld}; fld.f));
    }
  }
}

private threaded struct extern "::pxcrt::atomic_bool" "nonmovable"
atomic_bool { }

private threaded function extern "::pxcrt::atomic_bool_get" bool
atomic_bool_get(atomic_bool const& x);

private threaded struct extern "::pxcrt::thread_ptr" "nonmovable"
thread_ptr { }

private threaded function extern "::pxcrt::thread_create" {tfuncobj} errno_t
thread_create(thread_ptr mutable& thd, atomic_bool mutable& finished_flag,
  tfuncobj mutable& funcobj);
private threaded function extern "::pxcrt::thread_join" {tfuncobj} errno_t
thread_join(thread_ptr mutable& thd);

extern "types" inline

#include <thread>
#include <atomic>
#include <system_error>

namespace pxcrt {

struct atomic_bool {
  atomic_bool() : value(false) { }
  std::atomic_bool value;
  atomic_bool(atomic_bool const&) = delete;
  atomic_bool& operator =(atomic_bool const&) = delete;
};

typedef std::thread *thread_ptr;

};

;

extern "functions" inline

namespace pxcrt {

static inline bool
atomic_bool_get(atomic_bool const& x)
{
  return x.value;
}

template <typename Tfuncobj> static inline void *
funcobj_wrap(atomic_bool *finished_flag, void *arg)
{
  Tfuncobj *const a = static_cast<Tfuncobj *>(arg);
  a->call__$f();
  finished_flag->value = true;
  return 0;
}

template <typename Tfuncobj> int
thread_create(thread_ptr& thd, atomic_bool& finished_flag, Tfuncobj& funcobj)
{
#ifndef PXC_NO_THREAD
  thd = new std::thread(&funcobj_wrap<Tfuncobj>, &finished_flag, &funcobj);
#endif
  return 0;
}

template <typename Tfuncobj> int
thread_join(thread_ptr& thd)
{
  int r = 0;
  if (thd) {
    try {
      thd->join();
    } catch (std::system_error const& ex) {
      r = ex.code().value();
    } catch (...) {
      r = -1;
    }
  }
  delete thd;
  thd = nullptr;
  return r;
}

};

;

