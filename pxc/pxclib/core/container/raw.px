public threaded namespace core::container::raw "use-unsafe";
public import core::numeric::integral -;
public import core::container::array -;
public import core::pointer::raw -;
public import core::meta m;

/* raw arrays, e.g., int x[32] */

public pure tsvaluetype struct
extern "::pxcrt::rawarray<>::type" "rawarray" {t, n}
rawarray {
  public metafunction __static_assert__ m::characteristic{t, "defcon"};
  public metafunction key_type size_t;
  public metafunction mapped_type t;
}

public pure function extern "::pxcrt::rawarray_getelem__" {t, n} t
rawarray_getelem__(rawarray{t, n} const& x, size_t i);
public pure function extern "::pxcrt::rawarray_setelem__" {t, n} void
rawarray_setelem__(rawarray{t, n} mutable& x, size_t i, t const& v);
public pure function extern "::pxcrt::rawarray_to_slice" {t, n} slice{t}
rawarray_to_slice(rawarray{t, n} mutable& x);
public pure function extern "::pxcrt::rawarray_to_cslice" {t, n} cslice{t}
rawarray_to_cslice(rawarray{t, n} const& x);
public pure function extern "::pxcrt::rawarray_to_rawptr" {t, n} rawptr{t}
rawarray_to_rawptr(rawarray{t, n} mutable& x);
public pure function extern "::pxcrt::rawarray_to_crawptr" {t, n} crawptr{t}
rawarray_to_crawptr(rawarray{t, n} const& x);

extern "types" inline

namespace pxcrt {

template <typename T, size_t len>
struct rawarray {
  typedef T type[len];
};

template <typename T, size_t len>
static inline T
rawarray_getelem__(typename rawarray<T, len>::type const& x, size_t idx)
{
  #ifdef PXC_NO_BOUNDS_CHECKING
  if (idx >= len) { pxcrt::throw_invalid_index(); }
  #endif
  return x[idx];
}

template <typename T, size_t len>
static inline void
rawarray_setelem__(typename rawarray<T, len>::type & x, size_t idx, T const& v)
{
  #ifdef PXC_NO_BOUNDS_CHECKING
  if (idx >= len) { pxcrt::throw_invalid_index(); }
  #endif
  x[idx] = v;
}

template <typename T, size_t len>
static inline bt_slice<T>
rawarray_to_slice(typename rawarray<T, len>::type & x)
{
  return bt_slice<T>(x, len);
}

template <typename T, size_t len>
static inline bt_cslice<T>
rawarray_to_cslice(typename rawarray<T, len>::type const& x)
{
  return bt_cslice<T>(x, len);
}

template <typename T, size_t len>
static inline T *
rawarray_to_rawptr(T x[])
{
  return x;
}

template <typename T, size_t len>
static inline T const *
rawarray_to_crawptr(T const x[])
{
  return x;
}

};

;
