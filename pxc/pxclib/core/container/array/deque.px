public threaded namespace core::container::array::deque "use-unsafe";
public import core::container::array::varray;

extern "types" inline
#include <limits>
#include <boost/container/deque.hpp>
  /* boost::container::deque<T> allows T to be incomplete */
namespace pxcrt {

template <typename T>
struct deque_cslice {
  typedef T mapped_type;
  typedef typename boost::container::deque<T>::const_iterator iterator;
  typedef typename boost::container::deque<T>::const_iterator const_iterator;
  deque_cslice() : v() { }
  template <typename Tc> deque_cslice(const Tc& c)
    : v(c.begin(), c.end()) { }
  template <typename Tc> deque_cslice(const Tc& c, bt_size_t o1,
    bt_size_t o2) {
    if (o2 > c.size()) { o2 = c.size(); }
    if (o1 > o2) { o1 = o2; }
    v.first = c.begin() + o1;
    v.second = v.first + (o2 - o1);
  }
  iterator begin() const { return v.first; }
  iterator end() const { return v.second; }
  bt_bool empty() const { return v.first == v.second; }
  bt_size_t size() const { return v.second - v.first; }
  bt_size_t find(bt_size_t offset, T const& value) const {
    bt_size_t p = std::min(offset, size());
    for (iterator i = v.first + p; i < v.second; ++i, ++offset) {
      if (*i == value) {
        break;
      }
    }
    return offset;
  }
  void increment_front(size_t i) {
    if (size() < i) { pxcrt::throw_invalid_index(); }
    v.first += i;
  }
  void decrement_back(size_t i) {
    if (size() < i) { pxcrt::throw_invalid_index(); }
    v.second -= i;
  }
  const T& operator [](bt_size_t idx) const {
    if (idx >= size()) { pxcrt::throw_invalid_index(); }
    return v.first[idx];
  }
  const T& operator *() const {
    if (empty()) { pxcrt::throw_invalid_index(); }
    return *v;
  }
  T value_at(bt_size_t idx) const {
    if (idx >= size()) { pxcrt::throw_invalid_index(); }
    return v.first[idx];
  }
  T deref_value() const {
    if (empty()) { pxcrt::throw_invalid_index(); }
    return v.first[0];
  }
  iterator rawarr() const { return v.first; }
private:
  deque_cslice& operator =(const deque_cslice&); /* not allowed */
protected:
  std::pair<iterator, iterator> v;
};

template <typename T>
struct deque_slice {
  typedef T mapped_type;
  typedef typename boost::container::deque<T>::iterator iterator;
  typedef typename boost::container::deque<T>::const_iterator const_iterator;
  deque_slice() : v() { }
  template <typename Tc> deque_slice(Tc& c)
    : v(c.begin(), c.end()) { }
  template <typename Tc> deque_slice(Tc& c, bt_size_t o1, bt_size_t o2) {
    if (o2 > c.size()) { o2 = c.size(); }
    if (o1 > o2) { o1 = o2; }
    v.first = c.begin() + o1;
    v.second = v.first + (o2 - o1);
  }
  iterator begin() const { return v.first; }
  iterator end() const { return v.second; }
  bt_bool empty() const { return v.first == v.second; }
  bt_size_t size() const { return v.second - v.first; }
  bt_size_t find(bt_size_t offset, T const& value) const {
    bt_size_t p = std::min(offset, size());
    for (iterator i = v.first + p; i < v.second; ++i, ++offset) {
      if (*i == value) {
        break;
      }
    }
    return offset;
  }
  void increment_front(size_t i) {
    if (size() < i) { pxcrt::throw_invalid_index(); }
    v.first += i;
  }
  void decrement_back(size_t i) {
    if (size() < i) { pxcrt::throw_invalid_index(); }
    v.second -= i;
  }
  T& operator [](bt_size_t idx) const {
    if (idx >= size()) { pxcrt::throw_invalid_index(); }
    return v.first[idx];
  }
  T& operator *() const {
    if (empty()) { pxcrt::throw_invalid_index(); }
    return *v;
  }
  T value_at(bt_size_t idx) const {
    if (idx >= size()) { pxcrt::throw_invalid_index(); }
    return v.first[idx];
  }
  T deref_value() const {
    if (empty()) { pxcrt::throw_invalid_index(); }
    return v.first[0];
  }
  iterator rawarr() const { return v.first; }
private:
  deque_slice& operator =(const deque_slice&); /* not allowed */
protected:
  std::pair<iterator, iterator> v;
};

template <typename T>
struct pxcdeque : public refguard_base {
  typedef T mapped_type;
  typedef pxcrt::bt_size_t size_type;
  typedef boost::container::deque<T> base_deque;
  typedef typename base_deque::iterator iterator;
  typedef typename base_deque::const_iterator const_iterator;
  typedef deque_slice<T> range_type;
  typedef deque_cslice<T> crange_type;
  pxcdeque() { }
  pxcdeque(const crange_type& x) : value(x.begin(), x.end()) { }
  pxcdeque(const range_type& x) : value(x.begin(), x.end()) { }
  bt_bool empty() const { return value.empty(); }
  size_type size() const { return value.size(); }
  bt_size_t find(bt_size_t offset, T const& v) const {
    bt_size_t i = 0, n = size();
    for (; i < n; ++i) {
      if (value[i] == v) {
        break;
      }
    }
    return i;
  }
  T& operator [](size_type idx) {
    if (idx >= size()) { pxcrt::throw_invalid_index(); }
    return value[idx];
  }
  const T& operator [](size_type idx) const {
    if (idx >= size()) { pxcrt::throw_invalid_index(); }
    return value[idx];
  }
  void resize(size_type sz, T const& x) {
    check_resize();
    value.resize(sz, x);
  }
  void clear() {
    check_resize();
    value.clear();
  }
  void push_back(T const& x) {
    check_resize();
    value.push_back(x);
  }
  T pop_back() {
    check_resize();
    if (empty()) { pxcrt::throw_invalid_index(); }
    T r = value[size() - 1];
    value.pop_back();
    return r;
  }
  void push_front(T const& x) {
    check_resize();
    value.push_front(x);
  }
  T pop_front() {
    check_resize();
    if (empty()) { pxcrt::throw_invalid_index(); }
    T r = value[0];
    value.pop_front();
    return r;
  }
  void insert(size_type pos, const crange_type& x) {
    check_resize();
    if (pos > size()) { pxcrt::throw_invalid_index(); }
    value.insert(value.begin() + pos, x.begin(), x.end());
  }
  void erase(size_type first, size_type last) {
    if (last > size() || first > last) { pxcrt::throw_invalid_index(); }
    if (first >= last) {
      return;
    }
    iterator const ifirst = value.begin() + first;
    iterator const ilast = ifirst + (last - first);
    value.erase(ifirst, ilast);
  }
  iterator begin() { return value.begin(); }
  iterator end() { return value.end(); }
  const_iterator begin() const { return value.begin(); }
  const_iterator end() const { return value.end(); }
private:
  base_deque value;
};

}; // namespace pxcrt
;

