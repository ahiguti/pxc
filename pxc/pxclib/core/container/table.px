public namespace core::container::table;
public import core::numeric::integral -;
public import core::numeric::cast -;
public import core::container::array -;
public import core::container::tree_map -;
public import core::pointer -;
public import core::exception -;
public import core::io::file -;
public import core::io::text -;
public import core::io::errno -;
public import core::text::split -;
public import core::text::serialize -;
public import core::generic::datatype -;
public import core::operator -;
public import core::text::regex::posix -;
public import core::meta m;
public import core::meta::family mf;

public metafunction table_ifile{va*}
  m::apply{
    metafunction{n}
      m::cond{
        m::eq{n, 2}, table_ifile_type{m::at0{va}, m::at1{va}},
        m::eq{n, 1}, table_ifile_type{m::at0{va}, 0},
        m::error{"invalid parameter"}},
    m::size{va}};

public metafunction table_ofile{va*}
  m::apply{
    metafunction{n}
      m::cond{
        m::eq{n, 2}, table_ofile_type{m::at0{va}, m::at1{va}},
        m::eq{n, 1}, table_ofile_type{m::at0{va}, 0},
        m::error{"invalid parameter"}},
    m::size{va}};

public metafunction table_map{va*}
  m::apply{
    metafunction{n}
      m::cond{
        m::eq{n, 3}, table_map_type{m::at0{va}, m::at1{va}, m::at2{va}},
        m::eq{n, 2}, table_map_type{m::at0{va}, m::nil, m::at1{va}},
        m::eq{n, 1}, table_map_type{m::at0{va}, m::nil, m::nil},
        m::error{"invalid parameter"}},
    m::size{va}};

public pure function {trans, tfrom, tto} void
transform(tfrom const& from, tto mutable& to)
{
  metafunction to_insert m::symbol{tto, "insert"};
  metafunction to_args m::args{to_insert};
  metafunction to_arg_names m::arg_names{to_insert};
  if (m::and{m::is_list{trans}, m::not{m::empty{trans}}}) {
    metafunction from_ftlist m::symbol{tfrom, "field_types"};
    metafunction in_args m::map{m::seq{m::size{from_ftlist}},
      metafunction{i} {m::concat{"a", i}, m::at{from_ftlist, i}, 1, 0}};
    metafunction out_argnames m::trace{m::map{m::seq{m::size{trans}},
      metafunction{i} m::concat{"o", i}}};
    pure function bool record_cb(expand(in_args)) {
      expand (sym, i: m::trace{m::map{m::seq{m::size{trans}},
        metafunction{i} {m::concat{"o", i}, m::is_int{m::at{trans, i}}}}})
      {
        /* function */
        const& sym = m::at0{m::at{trans, i}}(expand(a:
          m::map{m::slice{m::at{trans, i}, 1}, metafunction{j}
            m::concat{"a", j}}; a));
        /* int */
        expand (asym: {m::concat{"a", m::at{trans, i}}}) {
          const& sym = asym;
        }
      }
      return to.insert(expand(a: out_argnames; a));
    }
    from.foreach{record_cb}();
  } else {
    pure function bool record_cb(expand(to_args)) {
      return to.insert(expand(a: to_arg_names; a));
    }
    if (m::eq{trans, 0}) {
      from.foreach{record_cb}();
    } else {
      from.foreach{trans{record_cb}}();
    }
  }
  to.flush();
}

/* private */

private pure struct {tlist, opt}
table_ifile_type(file_st const& fp0)
{
  private file_st const fp = fp0;
  private metafunction delim m::find{opt, "delim", '\t'};
  private metafunction rex m::trace{m::find{opt, "regex", 0}};
  public metafunction field_types tlist;
  expand (i: m::seq{m::is_string{rex}}) {
  private ptr{regex} const regex_ptr = make_regex(m::to_string{rex}, 0);
  }
  public function bool insert() { return false; }
  public function void flush() { }
  public function {cb} void foreach() const
  {
    farray{regmatch_t, m::add{m::size{tlist}, 1}} mutable regex_match;
    pure function bool parse_line(cstrref mutable line)
    {
      if (m::is_string{rex}) {
        const err = regex_ptr->exec(line, regex_match, 0);
        if (err != REG_OK) {
          return true;
        }
        metafunction stmtnum{i}
          mf::is_string_or_slice_type{m::at{tlist, i}};
        expand(sym, idx: m::map{m::seq{m::size{tlist}},
          metafunction{i} {m::concat{"a", i}, stmtnum{i}}})
        {
        /* not a string type */
        const& sym = from_string{m::at{tlist, idx}}(line[
          static_cast{size_t}(regex_match[m::add{idx, 1}].rm_so) ..
          static_cast{size_t}(regex_match[m::add{idx, 1}].rm_eo)]);
        /* string type */
        const& sym = line[
          static_cast{size_t}(regex_match[m::add{idx, 1}].rm_so) ..
          static_cast{size_t}(regex_match[m::add{idx, 1}].rm_eo)];
        }
        return cb(expand(a: m::map{m::seq{m::size{tlist}},
          metafunction{i} m::concat{"a", i}}; a));
      } else {
        metafunction stmtnum{i}
          m::add{
            mf::is_string_or_slice_type{m::at{tlist, i}},
            m::mul{m::gt{m::size{tlist}, 1}, 2}};
        expand(sym, idx: m::map{m::seq{m::size{tlist}},
          metafunction{i} {m::concat{"a", i}, stmtnum{i}}})
        {
        /* no need to split, not a string type */
        const& sym = from_string{m::at{tlist, idx}}(line);
        /* no need to split, string type */
        const& sym = line;
        /* need to split, not a string type */
        const& sym = from_string{m::at{tlist, idx}}(line.next_token(delim));
        /* need to split, string type */
        const& sym = line.next_token(delim);
        }
        return cb(expand(a: m::map{m::seq{m::size{tlist}},
          metafunction{i} m::concat{"a", i}}; a));
      }
    }
    errno_t errno = fp.read_lines{parse_line, opt}();
    if (errno != EOK) {
      throw runtime_error_template{"ifile"}(to_string(errno));
    }
  }
}

private pure function ptr{regex}
make_regex(cstrref const& rex, cflags_t cflags)
{
  regerror_t err;
  const r = make_ptr{regex}(rex, REG_EXTENDED | cflags, err);
  if (err != REG_OK) {
    throw runtime_error_template{"ifile_re"}(r->error_string(err));
  }
  return r;
}

private pure struct {tlist, opt}
table_ofile_type(file_st const& fp0)
{
  private file_st const fp = fp0;
  private string mutable obuffer;
  private metafunction delim m::character{m::find{opt, "delim", '\t'}};
  private metafunction ldelim m::character{m::find{opt, "line_delim", '\n'}};
  private metafunction buffer_size m::find{opt, "buffer_size", 16384};
  public metafunction field_types tlist;
  public function bool insert(expand(
    m::map{m::seq{m::size{tlist}}, metafunction{i}
      m::list{m::concat{"a", i}, m::at{tlist, i}, 1, 0}}))
  {
    string_append_join{delim}(
      obuffer,
      expand(a: m::map{m::seq{m::size{tlist}},
        metafunction{i} m::concat{"a", i}}; a));
    obuffer.append(ldelim);
    if (obuffer.size() > buffer_size) {
      flush();
    }
    return true;
  }
  public function void flush()
  {
    const r = fp.write(obuffer);
    obuffer.clear();
    if (case r.errno) {
      throw runtime_error_template{"ofile"}(to_string(r.errno));
    }
  }
  public function {cb} void foreach() const
  {
  }
}

private pure valuetype struct {key_types, key_ord, mapped_types}
table_map_type()
{
  public metafunction key_type n_tuple{key_types, key_ord};
  public metafunction mapped_type n_tuple{mapped_types, m::nil};
  public metafunction field_types m::join{key_types, mapped_types};
  public metafunction map_type m::cond{
    m::empty{mapped_types},
    tree_set{key_type},
    tree_map{key_type, mapped_type}};
  public map_type mutable mapval;
  public function bool insert(expand(
    m::map{m::seq{m::size{field_types}}, metafunction{i}
      m::list{m::concat{"a", i}, m::at{field_types, i}, 1, 0}}))
  {
    if (m::empty{mapped_types}) {
      metafunction klen m::size{key_types};
      const k = key_type(expand(a: m::map{m::seq{klen}, metafunction{i}
        m::concat{"a", i}}; a));
      mapval.insert(k, unit());
    } else {
      metafunction klen m::size{key_types};
      metafunction mlen m::size{mapped_types};
      const k = key_type(expand(a: m::map{m::seq{klen}, metafunction{i}
        m::concat{"a", i}}; a));
      const m = mapped_type(expand(a: m::map{m::seq{mlen}, metafunction{i}
        m::concat{"a", m::add{i, klen}}}; a));
      if (mutable& m0 : mapval[k]) {
        expand(sym, idx: m::map{m::seq{mlen}, metafunction{i}
          m::concat{"_", i}})
        {
          m0.sym += m.sym;
        }
      } else {
        mapval.insert(k, m);
      }
    }
    return true;
  }
  public function void flush() { }
  public function {cb} void foreach() const
  {
    metafunction klen m::size{key_types};
    for (const k, const m : mapval) {
      expand (sym, idx: m::map{m::seq{m::arg_size{cb}}, metafunction{i}
        m::list{m::concat{"x", i}, m::ge{i, klen}}})
      {
        /* key */
        expand (fldsym: m::list{m::concat{"_", idx}}) {
          const& sym = k.fldsym;
        }
        /* mapped */
        expand (fldsym: m::list{m::concat{"_", m::sub{idx, klen}}}) {
          const& sym = m.fldsym;
        }
      }
      bool const r = cb(expand(a:
        m::map{m::seq{m::arg_size{cb}}, metafunction{i}
          m::concat{"x", i}}; a));
      if (!r) {
        break;
      }
    }
  }
}

