public threaded namespace core::text::serialize::compact_pod "use-unsafe";
public import core::common -;
public import core::meta m;
public import core::meta::family mf;
public import core::text::serialize -;

public pure function {t} string
to_string_compact_pod(t const& x)
{
  // same as to_string() except that this function uses memcpy for pod types.
  // note: depends endianness and fp format
  // todo: pod structs
  string s;
  serialize{ser_compact_pod, t}(x, s);
  return s;
}

public pure function {t} t
from_string_compact_pod(cstrref const& s)
{
  mutable s1 = s;
  return deserialize{ser_compact_pod, t}(s1);
}

public pure struct ser_compact_pod {
  public metafunction __find__ ser_default; // inherits ser_default
  public metafunction ser_specialized{tpl, t}
    m::cond{
      mf::is_numeric_enum_bitmask_type{t}, ser_pod_single_with_prefix{t},
      is_pod_dense_array{t}, ser_pod_array_with_prefix{t},
      m::apply{m::symbol{ser_default, "ser_specialized", 0}, tpl, t}};
  public metafunction des_specialized{tpl, t}
    m::cond{
      mf::is_numeric_enum_bitmask_type{t}, des_pod_single_with_prefix{t},
      is_pod_dense_array{t}, des_pod_array_with_prefix{t},
      m::apply{m::symbol{ser_default, "des_specialized", 0}, tpl, t}};
}

private pure function {t} void ser_pod_single_with_prefix(t const& x,
  string mutable& v)
{
  v.push_back('!'); // prefix to distinguish with end-of-list '}' mark
  ser_memcpy(x, 1, v);
}

private pure function {t} t des_pod_single_with_prefix(cstrref mutable& s)
{
  s.increment_front(1); // skip prefix
  mutable r = make_default{t}();
  des_memcpy(r, 1, s);
  return r;
}

private pure function {t} void ser_pod_array_with_prefix(t const& x,
  string mutable& v)
{
  v.push_back('!'); // prefix to distinguish with end-of-list '}' mark
  size_t len = x.size();
  ser_memcpy(len, 1u, v);
  if (len != 0u) {
    ser_memcpy(x[0], x.size(), v);
  }
}

private pure function {t} t des_pod_array_with_prefix(cstrref mutable& s)
{
  s.increment_front(1); // skip '!'
  size_t len = 0;
  des_memcpy(len, 1, s);
  if (m::eq{m::family{t}, "darray"}) {
    t r = t(len, make_default{m::symbol{t, "mapped_type", unit}}());
    if (len != 0u) {
      des_memcpy(r[0], r.size(), s);
    }
    return r;
  } else {
    t r;
    r.resize(len, make_default{m::symbol{t, "mapped_type", unit}}());
    if (len != 0u) {
      des_memcpy(r[0], r.size(), s);
    }
    return r;
  }
}

private pure function extern "::pxcrt::ser_memcpy" {t}
void ser_memcpy(t const& x, size_t len, string mutable& s);

private pure function extern "::pxcrt::des_memcpy" {t}
void des_memcpy(t mutable& x, size_t len, cstrref mutable& s);

extern "types" inline

namespace pxcrt {

template <typename T> static PXC_FORCE_INLINE void
ser_memcpy(T const& x, bt_size_t len, bt_string& s)
{
  size_t const olen = s.size();
  size_t const nlen = olen + len * sizeof(T);
  s.reserve(nlen);
  bt_uchar *const dst = s.begin() + olen;
  memcpy(dst, &x, len * sizeof(T));
  pxcvarray_rawarr_set_valid_len(s, nlen);
}

template <typename T> static PXC_FORCE_INLINE void
des_memcpy(T& x, bt_size_t len, cstrref& s)
{
  size_t const xlen = len * sizeof(T);
  bt_uchar const *const src = s.begin();
  s.increment_front(xlen);
  memcpy(&x, src, xlen);
}

}; // namespace pxcrt

;

