public namespace core::fundamental::mainloop "use-unsafe";
public import core::numeric::integral -;
public import core::container::array -;
public import core::pointer -;
public import core::io::standard -;
public import core::meta m;
public import core::meta::platform mp;

public interface mainloop_i
{
  public function bool step();
}

public function extern "::pxcrt::set_mainloop" void
set_mainloop(ptr{mainloop_i} const& m);

public function {callback} void
load_filesystem_async(string const& path)
{
  if (m::or{m::ne{m::size{m::args{callback}}, 0},
    m::ne{m::ret_type{callback}, void}}) {
    println(m::error{"invalid callback"});
  }
  if (m::is_true{mp::platform_emscripten}) {
    metafunction expr0 m::concat{
      "::pxcrt::load_fs_callback = &(", m::csymbol{callback}, ");"};
    extern "emit" expr0;
    load_fs_async_internal(path);
  } else {
    callback();
  }
}

public function extern "::pxcrt::save_fs_async_internal" void
save_filesystem_async();

public function extern "::pxcrt::get_load_fs_status" int
get_load_filesystem_status();

public function extern "::pxcrt::get_save_fs_status" int
get_save_filesystem_status();

private function extern "::pxcrt::load_fs_async_internal" void
load_fs_async_internal(string const& path);
private function extern "::pxcrt::load_fs_async_internal" void
save_fs_async_internal();

extern "functions" inline
namespace pxcrt {
void set_mainloop(const
  pxcrt::rcptr< ::core$n::fundamental$n::mainloop$n::mainloop_i$i >& m);
extern void (*load_fs_callback)();
};
;

extern "implementation" inline
#ifdef __EMSCRIPTEN__
extern "C" {
void load_fs_cb(int) __attribute__((used));
void save_fs_cb(int) __attribute__((used));
};
namespace pxcrt {
#include <emscripten.h>
::fundamental$n::mainloop$n::mainloop_i$i *mainloop_ptr = 0;
void (*load_fs_callback)() = 0;
int load_fs_status = 0;
int save_fs_status = 0;
void pxc_main_iter()
{
  if (mainloop_ptr) {
    mainloop_ptr->step$f();
  }
}
static int mainloop_set_flag = 0;
void set_mainloop(const
  pxcrt::rcptr< ::core$n::fundamental$n::mainloop$n::mainloop_i$i >& m)
{
  if (mainloop_ptr) {
    mainloop_ptr->decref$z();
    mainloop_ptr = 0;
  }
  mainloop_ptr = m.get();
  mainloop_ptr->incref$z();
  if (!mainloop_set_flag) {
    mainloop_set_flag = 1;
    emscripten_set_main_loop(&pxc_main_iter, 0, 1);
  }
}
void load_fs_async_internal(const ::pxcrt::bt_string& path)
{
  // std::cerr << "load_fs_async: setting 1" << std::endl;
  load_fs_status = -1;
  std::string p(reinterpret_cast<char const *>(path.begin()), path.size());
  std::string src = std::string() +
    "FS.mkdir('" + p + "');\n" +
    "FS.mount(IDBFS, {}, '" + p + "');\n" +
    "FS.syncfs(true, function(err) {\n" +
    "  ccall('load_fs_cb', 'v', ['number'], [!!err]);\n" +
    "});\n";
  emscripten_run_script(src.c_str());
  // std::cerr << "load_fs_async: " << src << std::endl;
  if (!mainloop_set_flag) {
    mainloop_set_flag = 1;
    emscripten_set_main_loop(&pxc_main_iter, 0, 1);
  }
}
void save_fs_async_internal()
{
  save_fs_status = -1;
  std::string src = std::string() +
    "FS.syncfs(function(err) {\n" +
    "  ccall('save_fs_callback_c', 'v', ['number'], [!!err]);\n" +
    "});\n";
  emscripten_run_script(src.c_str());
}
int get_load_fs_status()
{
  return load_fs_status;
}
int get_save_fs_status()
{
  return save_fs_status;
}
};
void load_fs_cb(int err)
{
  // std::cerr << "load_fs: " << err << std::endl;
  ::pxcrt::load_fs_status = err;
  if (::pxcrt::load_fs_callback != 0) {
    ::pxcrt::load_fs_callback();
  }
}
void save_fs_cb(int err)
{
  // std::cerr << "save_fs: " << err << std::endl;
  ::pxcrt::save_fs_status = err;
  ::pxcrt::pxc_main_iter();
}
#else
namespace pxcrt {
void set_mainloop(const
  pxcrt::rcptr< ::core$n::fundamental$n::mainloop$n::mainloop_i$i >& m)
{
  while (!m->step$f()) { }
}
void load_fs_async_internal(const ::pxcrt::bt_string& path)
{
}
void save_fs_async_internal()
{
}
int get_load_fs_status()
{
  return 0;
}
int get_save_fs_status()
{
  return 0;
}
};
#endif
;

