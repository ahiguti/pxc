public namespace python "use-unsafe";
public import common -;
public import meta m;

pxc_python_init();

public struct extern "pxc_python::object" object {
  public metafunction __has_fldop__ 1;
}

public function {t} object make_object(t const& v)
{
  if (m::characteristic{t, "noheap"}) {
    m::error{"can not create a python object from a noheap type"};
  }
  extern "emit" m::concat{"return boost::python::object(v$)"};
  return object(); /* dummy */
}

public function {t} object
make_class()
{
  if (m::characteristic{t, "noheap"}) {
    m::error{"can not create a python class from a noheap type"};
  }
  return make_class_internal{t}();
}

public function {func} object
make_function()
{
  if (m::not{m::and{
    m::is_function{func},
    m::not{m::is_member_function{func}}}})
  {
    m::error{"invarid template parameter"};
  }
  extern "emit" m::concat{
    "return boost::python::make_function(",
    m::csymbol{func},
    ")"};
  return object(); /* dummy */
}

public function extern "pxc_python::make_string" object
make_string(cstrref const& s);

public function {tlist} object
make_list(expand(
  m::map{m::seq{m::size{tlist}},
    metafunction{i} {m::concat{"a", i}, object, 1, 0}}))
{
  object obj = make_list_internal();
  expand(sym: m::map{m::seq{m::size{tlist}},
    metafunction{i} m::concat{"a", i}})
  {
    obj.append(sym);
  }
  return obj;
}

public function {tlist} object
make_tuple(expand(
  m::map{m::seq{m::size{tlist}},
    metafunction{i} {m::concat{"a", i}, object, 1, 0}}))
{
  extern "emit" m::concat{
    "return boost::python::make_tuple(",
    m::fold{
      m::seq{m::size{tlist}},
      metafunction{x, y}
	m::concat{x, m::cond{m::eq{x, ""}, "a", ", a"}, y, "$"},
      ""},
    ")"};
  return object(); /* dummy */
}

public function {tlist} object
make_dict(expand(
  m::map{m::seq{m::size{tlist}},
    metafunction{i} {m::concat{"a", i}, object, 1, 0}}))
{
  object obj = make_dict_internal();
  expand(i: m::seq{m::div{m::size{tlist}, 2}}) {
    expand(sym0: {m::concat{"a", m::mul{i, 2}}}) {
      expand(sym1: {m::concat{"a", m::add{m::mul{i, 2}, 1}}}) {
	obj[sym0] = sym1;
      }
    }
  }
  return obj;
}

public function {tlist} m::cond{m::gt{m::size{tlist}, 2}, void, object}
object_attr(expand(
  m::cond{
    m::gt{m::size{tlist}, 2},
    {{"obj", object, 1, 1}, {"name", cstrref, 1, 0}, {"val", object, 1, 0}},
    {{"obj", object, 1, 0}, {"name", cstrref, 1, 0}}}))
{
  if (m::eq{m::size{tlist}, 3}) {
    object_setattr(obj, name, val);
  } else if (m::eq{m::size{tlist}, 2}) {
    return object_getattr(obj, name);
  } else {
    m::error{"invalid args"};
  }
}

public function {tpl} void
object_append_to_string(object const& obj,
  container::array::string mutable& str)
{
  object_append_to_string_impl(obj, str);
}

function extern "pxc_python::object_append_to_string" void
object_append_to_string_impl(object const& obj,
  container::array::string mutable& str);

public function extern "pxc_python::object_get" object
object___getelem(object const& obj, object const& key);

public function extern "pxc_python::object_set" void
object___setelem(object const& obj, object const& key,
  object const& val);

public function {fld, tx} object
object___getfld(object const& obj)
{
  return object_getfld(obj, m::to_string{fld});
}

public function {fld, tx, ty} void
object___setfld(object const& obj, object const& val)
{
  object_setfld(obj, m::to_string{fld}, val);
}

private function extern "pxc_python::object_getfld" object
object_getfld(object const& obj, strlit const& name);

private function extern "pxc_python::object_setfld" void
object_setfld(object const& obj, strlit const& name, object const& val);

public function {name, tlist} object
object___invoke(expand(
  m::map{m::seq{m::size{tlist}},
    metafunction{i} {m::concat{"a", i}, object, 1, 0}}))
{
  if (m::empty{tlist}) {
    m::error{"invalid args"};
  }
  extern "emit" m::concat{
    "return boost::python::call_method<boost::python::object>(a0$.ptr(), ",
    "\"", name, "\"",
    m::fold{
      m::seq{1, m::size{tlist}},
      metafunction{x, y} m::concat{x, ", a", y, "$"},
      ""},
    ")"};
  return object(); /* dummy */
}

public function {tlist} object
object___call(expand(
  m::map{m::seq{m::size{tlist}},
    metafunction{i} {m::concat{"a", i}, object, 1, 0}}))
{
  if (m::empty{tlist}) {
    m::error{"invalid args"};
  }
  extern "emit" m::concat{
    "return a0$(",
    m::fold{
      m::seq{1, m::size{tlist}},
      metafunction{x, y}
	m::concat{x, m::cond{m::eq{x, ""}, "", ", "}, "a", y, "$"},
      ""},
    ");\n"};
  return object(); /* dummy */
}

public function extern "pxc_python::module" object
module(cstrref const& name);

public function extern "pxc_python::eval" object
eval(cstrref const& expr, object const& globals, object const& locals);

public function extern "pxc_python::exec" object
exec(cstrref const& code, object const& globals, object const& locals);

public function extern "pxc_python::call" object
call(object const& obj, object const& args, object const& kwargs);

public function long len(object const& obj)
{
  extern "emit" m::concat{"return boost::python::len(obj$)"};
  return 0; /* dummy */
}

public function void delitem(object const& obj, object const& key)
{
  extern "emit" m::concat{"return boost::python::delitem(obj$, key$)"};
}

public function void delattr(object const& obj, object const& key)
{
  extern "emit" m::concat{"return boost::python::delattr(obj$, key$)"};
}

public function {tto, tfrom} object strlit___to(strlit const& s)
{ return make_string(s); }

public function {tto, tfrom} object cslice___to(cstrref const& s)
{ return make_string(s); }

public function {tto, tfrom} object
varray___to(container::array::string const& s)
{ return make_string(s); }

public function {tto, tfrom} object int___to(int v)
{ return make_object{int}(v); }

public function {tto, tfrom} object long___to(numeric::integral::long v)
{ return make_object{long}(v); }

public function {tto, tfrom} tto object___to(object const& v)
{
  if (m::characteristic{tto, "noheap"}) {
    m::error{"can not convert a python object to a noheap type"};
  }
  extern "emit"
    m::concat{"return boost::python::extract< ", m::csymbol{tto}, " >(v$)"};
  return tto(); /* dummy */
}

public function {tx, ty} void object___adda(object mutable& x, object const& y)
{ extern "emit" m::concat{"x$ += y$"}; }

public function {tx, ty} void object___suba(object mutable& x, object const& y)
{ extern "emit" m::concat{"x$ -= y$"}; }

public function {tx, ty} void object___mula(object mutable& x, object const& y)
{ extern "emit" m::concat{"x$ *= y$"}; }

public function {tx, ty} void object___diva(object mutable& x, object const& y)
{ extern "emit" m::concat{"x$ /= y$"}; }

public function {tx, ty} void object___moda(object mutable& x, object const& y)
{ extern "emit" m::concat{"x$ %= y$"}; }

public function {tx, ty} bool object___or(object const& x, object const& y)
{ extern "emit" m::concat{"return x$ | y$"}; return false; }

public function {tx, ty} bool object___and(object const& x, object const& y)
{ extern "emit" m::concat{"return x$ & y$"}; return false; }

public function {tx, ty} bool object___eq(object const& x, object const& y)
{ extern "emit" m::concat{"return x$ == y$"}; return false; }

public function {tx, ty} bool object___ne(object const& x, object const& y)
{ extern "emit" m::concat{"return x$ != y$"}; return false; }

public function {tx, ty} bool object___gt(object const& x, object const& y)
{ extern "emit" m::concat{"return x$ > y$"}; return false; }

public function {tx, ty} bool object___lt(object const& x, object const& y)
{ extern "emit" m::concat{"return x$ < y$"}; return false; }

public function {tx, ty} bool object___ge(object const& x, object const& y)
{ extern "emit" m::concat{"return x$ >= y$"}; return false; }

public function {tx, ty} bool object___le(object const& x, object const& y)
{ extern "emit" m::concat{"return x$ <= y$"}; return false; }

public struct extern "pxc_python::error_already_set"
error_already_set { }

public function extern "pxc_python::error_print" void
error_print();

public struct error_info {
  public object err_type;
  public object err_value;
  public object err_traceback;
}

public function extern "pxc_python::error_matches" bool
error_matches(object const& exc);

public function error_info
error_fetch()
{
  error_info e;
  error_fetch_internal(e.err_type, e.err_value, e.err_traceback);
  return e;
}

private function extern "pxc_python::error_fetch_internal" void
error_fetch_internal(object mutable& typ, object mutable& value,
  object mutable& trace);

public function extern "pxc_python::clear_error" void
error_clear();

/* private */

private function extern "boost::python::list" object make_list_internal();

private function extern "boost::python::dict" object make_dict_internal();

private function extern "pxc_python::object_getattr" object
object_getattr(object const& obj, cstrref const& name);

private function extern "pxc_python::object_setattr" void
object_setattr(object const& obj, cstrref const& name, object const& val);

private function extern "pxc_python::class_cache_get" {t} object
class_cache_get();

private function extern "pxc_python::class_cache_set" {t} void
class_cache_set(object const& obj);

private function {t} object make_class_internal()
{
  object obj = class_cache_get{t}();
  if (obj != object()) {
    /* avoid defining same class twice */
    return obj;
  }
  extern "emit" m::concat{"obj$ = ", cdef{t}, mfdefs{t}, flddefs{t}};
  class_cache_set{t}(obj);
  return obj;
}

private metafunction pyname{t}
  m::subst{
    m::subst{
      m::subst{m::full_string{t}, "::", "_"},
    "{", ""},
  "}", ""};
private metafunction cdef{t}
  m::concat{
    "boost::python::class_< ", boost_python_class_tpms{t}, " >(\"", pyname{t},
    "\"", inidef{t}, ")"};
private metafunction boost_python_class_tpms{t}
  m::concat{
    m::csymbol{t},
    m::cond{
      m::characteristic{t, "copyable"},
      "",
      ", boost::noncopyable"}};
private metafunction concat_sep{lst, sep}
  m::fold{
    lst,
    metafunction{x, y} m::cond{m::eq{x, ""}, y, m::concat{x, ", ", y}},
    ""};
private metafunction arg_cdecl{arg}
  m::concat{
    m::csymbol{m::at{arg, 1}},
    m::cond{m::at{arg, 3}, "", " const"},
    m::cond{m::at{arg, 2}, " &", ""}};
private metafunction inidef{t}
  m::cond{
    m::eq{m::arg_size{t}, 0},
    "",
    m::concat{
      ", boost::python::init< ",
      concat_sep{m::map{m::args{t}, arg_cdecl}, ", "},
      " >()"}};
private metafunction mfdef{t, f}
  m::concat{".def(\"", f, "\", &", m::csymbol{t}, "::", m::csymbol{f}, ")"};
private metafunction mfdefs{t}
  m::fold{
    m::map{m::member_functions{t}, metafunction{f} mfdef{t, f}},
    m::concat, ""};
private metafunction flddef{t, i}
  m::concat{
    m::cond{m::at3{m::at{m::fields{t}, i}},
      ".def_readwrite(\"",
      ".def_readonly(\""},
    m::at{m::field_names{t}, i}, "\", &",
    m::csymbol{t}, "::", m::csymbol{t, i}, ")"};
private metafunction flddefs{t}
  m::fold{
    m::map{m::seq{m::size{m::fields{t}}}, metafunction{i} flddef{t, i}},
    m::concat, ""};

private function extern "pxc_python::pxc_python_init" void pxc_python_init();

extern "types" inline

#include <string>
#include <boost/python.hpp>

namespace pxc_python {

typedef ::boost::python::object object;
typedef ::boost::python::error_already_set error_already_set;

void pxc_python_init();

}; // namespace pxc_python

;

extern "functions" inline

#include <string>
#include <map>
#include <typeinfo>

namespace pxc_python {

struct type_info_cmp {
  bool operator ()(const std::type_info *a, const std::type_info *b) const {
    return a->before(*b);
  }
};

typedef std::map<const std::type_info *, boost::python::object, type_info_cmp>
  class_cache_type;
extern class_cache_type class_cache;

template <typename T> static inline boost::python::object
class_cache_get()
{
  const std::type_info *ti = &typeid(T);
  class_cache_type::const_iterator i = class_cache.find(ti);
  if (i != class_cache.end()) {
    return i->second;
  }
  return boost::python::object();
}

template <typename T> static inline void
class_cache_set(const boost::python::object& obj)
{
  const std::type_info *ti = &typeid(T);
  class_cache[ti] = obj;
}

}; // namespace pxc_python

;


extern "implementation" inline

namespace pxc_python {

typedef pxcrt::pxcvarray<unsigned char> pxcstring;
typedef pxcrt::bt_strlit strlit;
typedef pxcrt::cstrref cstrref;

static bool initialized = false;
static std::vector<boost::python::object> small_int_values;
class_cache_type class_cache;

object
object_getfld(object const& obj, strlit const& name)
{
  return boost::python::api::getattr(obj, 
    reinterpret_cast<const char *>(name.begin()));
}

void
object_setfld(object const& obj, strlit const& name, object const& val)
{
  boost::python::api::setattr(obj, 
    reinterpret_cast<const char *>(name.begin()), val);
}

object
object_getattr(object const& obj, cstrref const& name)
{
  PXCRT_ALLOCA_NTSTRING(name_nt, name);
  return boost::python::api::getattr(obj, name_nt.get());
}

void
object_setattr(object const& obj, cstrref const& name, object const& val)
{
  PXCRT_ALLOCA_NTSTRING(name_nt, name);
  boost::python::api::setattr(obj, name_nt.get(), val);
}

void
object_append_to_string(object const& obj, pxcstring& str)
{
  boost::python::str s(obj);
  char *sval = 0;
  Py_ssize_t len = 0;
  PyString_AsStringAndSize(s.ptr(), &sval, &len);
  if (sval == 0) {
    str.append(reinterpret_cast<const unsigned char *>("?"), 1);
  } else {
    str.append(reinterpret_cast<const unsigned char *>(sval), len);
  }
}

object
object_get(object const& obj, object const& key)
{
  return boost::python::api::getitem(obj, key);
}

void
object_set(object const& obj, object const& key, object const& val)
{
  boost::python::api::setitem(obj, key, val);
}

struct pystr_from_pxcstr {
  static PyObject *convert(pxcstring const& s) {
    return boost::python::incref(boost::python::str(
      reinterpret_cast<const char *>(s.rawarr()), s.size()).ptr());
  }
};

struct pystr_to_pxcstr {
  pystr_to_pxcstr() {
    boost::python::converter::registry::push_back(
      &convertible, &construct, boost::python::type_id<pxcstring>());
  }
  static void *convertible(PyObject *obj) {
    if (!PyString_Check(obj)) { return 0; }
    return obj;
  }
  static void construct(PyObject *obj,
    boost::python::converter::rvalue_from_python_stage1_data *data) {
    char *sval = 0;
    Py_ssize_t len = 0;
    PyString_AsStringAndSize(obj, &sval, &len);
    if (sval == 0) { boost::python::throw_error_already_set(); }
    void *storage =
      ((boost::python::converter::rvalue_from_python_storage<pxcstring>*)data)
	->storage.bytes;
    const unsigned char *p = reinterpret_cast<const unsigned char *>(sval);
    new (storage) pxcstring(p, len);
    data->convertible = storage;
  }
};

struct pystr_from_cstrref {
  static PyObject *convert(cstrref const& s) {
    return boost::python::incref(boost::python::str(
      reinterpret_cast<const char *>(s.rawarr()), s.size()).ptr());
  }
};

struct pystr_to_cstrref {
  pystr_to_cstrref() {
    boost::python::converter::registry::push_back(
      &convertible, &construct, boost::python::type_id<cstrref>());
  }
  static void *convertible(PyObject *obj) {
    if (!PyString_Check(obj)) { return 0; }
    return obj;
  }
  static void construct(PyObject *obj,
    boost::python::converter::rvalue_from_python_stage1_data *data) {
    char *sval = 0;
    Py_ssize_t len = 0;
    PyString_AsStringAndSize(obj, &sval, &len);
    if (sval == 0) { boost::python::throw_error_already_set(); }
    void *storage =
      ((boost::python::converter::rvalue_from_python_storage<cstrref>*)data)
	->storage.bytes;
    const unsigned char *p = reinterpret_cast<const unsigned char *>(sval);
    new (storage) cstrref(p, len);
    data->convertible = storage;
  }
};

void pxc_python_init()
{
  if (initialized) {
    return;
  }
  initialized = true;
  if (!Py_IsInitialized()) {
    Py_InitializeEx(0);
  }
  if (small_int_values.empty()) {
    #if 0
    small_int_values.resize(101);
    for (size_t i = 0; i < 101; ++i) {
      small_int_values[i] = boost::python::object(boost::python::handle<>(
	PyInt_FromLong(i));
    }
    #endif
  }
  {
    /* which is better? */
    #if 1
    /* pxcstring is converted to python string by value */
    boost::python::to_python_converter<pxcstring, pystr_from_pxcstr>();
    /* cstrref is converted to python string by value */
    boost::python::to_python_converter<cstrref, pystr_from_cstrref>();
    #endif
    #if 0
    /* pxcstring is not converted to python string */
    boost::python::class_<pxcstring>("string", boost::python::init<cstrref>());
    boost::python::implicitly_convertible<pxcstring, cstrref>();
    #endif
  }
  pystr_to_pxcstr();
  pystr_to_cstrref();
}

object module(cstrref const& name)
{
  PXCRT_ALLOCA_NTSTRING(name_nt, name);
  return boost::python::import(name_nt.get());
}

object make_string(cstrref const& s)
{
  return boost::python::str(
    reinterpret_cast<const char *>(s.rawarr()), s.size());
}

object eval(cstrref const& expr, object const& globals,
  object const& locals)
{
  PXCRT_ALLOCA_NTSTRING(expr_nt, expr);
  return boost::python::eval(expr_nt.get(), globals, locals);
}

object exec(cstrref const& code, object const& globals,
  object const& locals)
{
  PXCRT_ALLOCA_NTSTRING(code_nt, code);
  return boost::python::exec(code_nt.get(), globals, locals);
}

object call(object const& obj, object const& args, object const& kwargs)
{
  PyObject *pargs = args.ptr();
  if (!PyTuple_Check(pargs)) {
    PyErr_Format(PyExc_TypeError,
      "Expecting a tuple; got an object of type %s instead",
      pargs->ob_type->tp_name);
    boost::python::throw_error_already_set();
  }
  PyObject *pkwargs = kwargs.ptr();
  if (!PyDict_Check(pkwargs)) {
    PyErr_Format(PyExc_TypeError,
      "Expecting a dict; got an object of type %s instead",
      pkwargs->ob_type->tp_name);
    boost::python::throw_error_already_set();
  }
  PyObject *result = PyObject_Call(obj.ptr(), pargs, pkwargs);
  return object(boost::python::detail::new_reference(result));
}

void error_print()
{
  if (!PyErr_Occurred()) {
    return;
  }
  PyErr_Print();
}

pxcrt::bt_bool error_matches(object const& exc)
{
  if (!PyErr_Occurred()) {
    return false;
  }
  const int r = PyErr_ExceptionMatches(exc.ptr());
  return r != 0;
}

void error_fetch_internal(object& typ, object& value, object& trace)
{
  if (!PyErr_Occurred()) {
    return;
  }
  PyObject *etyp = 0;
  PyObject *evalue = 0;
  PyObject *etrace = 0;
  PyErr_Fetch(&etyp, &evalue, &etrace);
  if (etyp != 0) {
    typ = boost::python::object(boost::python::handle<>(etyp));
  }
  if (evalue != 0) {
    value = boost::python::object(boost::python::handle<>(evalue));
  }
  if (etrace != 0) {
    trace = boost::python::object(boost::python::handle<>(etrace));
  }
}

void error_clear()
{
  if (!PyErr_Occurred()) {
    return;
  }
  PyErr_Clear();
}

}; // namespace pxc_python

;

extern "incdir"
  "`python -c 'from distutils.sysconfig import *; print get_python_inc()'`";
extern "ldflags"
  "-lboost_python `python-config --libs`";

