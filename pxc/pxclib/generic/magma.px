public threaded namespace generic::magma;
public import numeric::integral -;
public import meta m;
public import meta::family mf;
public import meta::vararg va;

public threaded function {binop, tlist} m::at0{m::at0{tlist}}
fold(expand(va::arg_decls_bycref{tlist}))
{
  mutable r = a0;
  expand(a: m::slice{va::arg_names{m::size{tlist}}, 1}) {
    r = binop(r, a);
  }
  return r;
}

public threaded function {binop, tlist} m::at0{m::at{tlist, lastidx}}
fold_right(expand(va::arg_decls_bycref{tlist}))
{
  metafunction nargs m::size{tlist};
  metafunction lastidx m::sub{nargs, 1};
  expand(a: m::list{m::concat{"a", lastidx}}) {
    mutable r = a;
  }
  expand(a: m::reverse{va::arg_names{lastidx}}) {
    r = binop(a, r);
  }
  return r;
}

public threaded function {binop, tv, tc} tv
fold_list(tv const& v, tc const& c)
{
  mutable r = v;
  if (mf::is_container_or_range_type{tc}) {
    for (const& k, const& m: c) {
      r = binop(r, m);
    }
  } else {
    expand (fld: m::field_names{tc}) {
      r = binop(r, c.fld);
    }
  }
  return r;
}

