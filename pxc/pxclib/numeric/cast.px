namespace numeric::cast;
public import numeric::integral -;
public import numeric::fp -;
public import meta::builtin m;

public macro is_numeric{t}
  is_numeric_family{t, m::family{t}};
public macro is_integral{t}
  is_integral_family{t, m::family{t}};
public macro is_signed_integral{t}
  is_signed_integral_family{t, m::family{t}};
public macro is_unsigned_integral{t}
  is_unsigned_integral_family{t, m::family{t}};
public macro is_fp{t} is_fp_family{t, m::family{t}};

public threaded function {tto, tfrom} tto numeric_cast(tfrom const& x)
{
  if (m::and{is_numeric{tfrom}, is_numeric{tto}}) {
    numeric_cast_impl{tto, tfrom} c;
    return c.convert(x);
  } else {
    return m::error{"invalid numeric cast"};
  }
}

public threaded function {tto, tfrom} tto static_cast(tfrom const& x)
{
  if (m::and{is_numeric{tfrom}, is_numeric{tto}}) {
    static_cast_impl{tto, tfrom} c;
    return c.convert(x);
  } else {
    return m::error{"invalid numeric cast"};
  }
}

private macro is_signed_integral_family{t, fam}
  m::or{
    m::eq{t, char},
    m::eq{t, short},
    m::eq{t, int},
    m::eq{t, long},
    m::eq{fam, "extint"}};

private macro is_unsigned_integral_family{t, fam}
  m::or{
    m::eq{t, uchar},
    m::eq{t, ushort},
    m::eq{t, uint},
    m::eq{t, ulong},
    m::eq{t, size_t},
    m::eq{fam, "extuint"}};

private macro is_integral_family{t, fam}
  m::or{
    is_signed_integral_family{t, fam},
    is_unsigned_integral_family{t, fam}};

private macro is_fp_family{t, fam}
  m::or{
    m::eq{t, float},
    m::eq{t, double},
    m::eq{fam, "extfloat"}};

private macro is_numeric_family{t, fam}
  m::or{
    is_integral_family{t, fam},
    is_fp_family{t, fam},
    m::eq{fam, "extnumeric"}};

private threaded extern "numeric::numeric_cast_impl"
struct {tto, tfrom} numeric_cast_impl {
  extern "convert" function tto convert(tfrom const& x);
}

private threaded extern "numeric::static_cast_impl"
struct {tto, tfrom} static_cast_impl {
  extern "convert" function tto convert(tfrom const& x);
}

extern "type" inline
#include <boost/cast.hpp>
namespace numeric {
template <typename Tto, typename Tfrom> struct numeric_cast_impl {
  Tto convert(Tfrom const& x) const {
    return boost::numeric_cast<Tto>(x);
  }
};
template <typename Tto, typename Tfrom> struct static_cast_impl {
  Tto convert(Tfrom const& x) const {
    return static_cast<Tto>(x);
  }
};
}; // namespace numeric

