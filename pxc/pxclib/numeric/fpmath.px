public threaded namespace numeric::fpmath "use-unsafe";
public import numeric::integral -;
public import numeric::fp -;
public import meta m;

public tsvaluetype struct extern "int" "extenum" fpclass_t { }
public extern "FP_NAN"		fpclass_t FP_NAN;
public extern "FP_INFINITE"	fpclass_t FP_INFINITE;
public extern "FP_ZERO"		fpclass_t FP_ZERO;
public extern "FP_SUBNORMAL"	fpclass_t FP_SUBNORMAL;
public extern "FP_NORMAL"	fpclass_t FP_NORMAL;

public threaded function {t} fpclass_t fpclassify(t x)
{ return m::symbol{m::nsof{fpclassify}, m::concat{"fpclassify_", t}}(x); }
public threaded function {t} t frexp(t x, int mutable& exp)
{ return m::symbol{m::nsof{frexp}, m::concat{"frexp_", t}}(x, exp); }
public threaded function {t} t ldexp(t x, int exp)
{ return m::symbol{m::nsof{ldexp}, m::concat{"ldexp_", t}}(x, exp); }
public threaded function {t} bool signbit(t x)
{ return m::symbol{m::nsof{signbit}, m::concat{"signbit_", t}}(x); }
public threaded function {t} t modf(t x, t mutable& ir)
{ return m::symbol{m::nsof{modf}, m::concat{"modf_", t}}(x, ir); }

public threaded function extern "numeric::fpclassify_double"
  fpclass_t fpclassify_double(double x);
public threaded function extern "numeric::fpclassify_float"
  fpclass_t fpclassify_float(float x);
public threaded function extern "numeric::signbit_double"
  bool signbit_double(double x);
public threaded function extern "numeric::signbit_float"
  bool signbit_float(float x);
public threaded function extern "numeric::frexp_double"
  double frexp_double(double x, int mutable& exp);
public threaded function extern "numeric::frexp_float"
  float frexp_float(float x, int mutable& exp);
public threaded function extern "numeric::ldexp_double"
  double ldexp_double(double x, int exp);
public threaded function extern "numeric::ldexp_float"
  float ldexp_float(float x, int exp);
public threaded function extern "numeric::modf_double"
  double modf_double(double x, double mutable& exp);
public threaded function extern "numeric::modf_double"
  float modf_float(float x, float mutable& exp);

private metafunction funcs_a1
  m::list{
    "sin", "cos", "tan", "asin", "acos", "atan", "sinh", "cosh", "tanh",
    "exp", "log", "log10", "sqrt",
    "ceil", "floor", "fabs"
  };
private metafunction funcs_a2
  m::list{
    "pow", "fmod", "atan2"
  };
private metafunction funcs_a1b
  m::list{
    "isfinite", "isnormal", "isnan", "isinf"
  };

private metafunction check_fp{t, s}
  m::cond{
    m::or{m::eq{t, float}, m::eq{t, double}},
    s,
    m::error{"invalid type ", t}};

/* decls for "sin", "cos", ... */
expand (fsym : funcs_a1) {
public threaded function extern "numeric::%" {t} check_fp{t, t} fsym(t x);
}
expand (fsym : funcs_a2) {
public threaded function extern "numeric::%" {t} check_fp{t, t} fsym(t x, t y);
}
expand (fsym : funcs_a1b) {
public threaded function extern "numeric::%" {t} check_fp{t, bool} fsym(t x);
}
/* c++ defs for "sin", ... */
private metafunction emit_funcdefs
  m::concat{
    m::fold{m::map{funcs_a1, emit_funcdef_a1}, m::concat, ""},
    m::fold{m::map{funcs_a2, emit_funcdef_a2}, m::concat, ""},
    m::fold{m::map{funcs_a1b, emit_funcdef_a1b}, m::concat, ""}
  };
private metafunction emit_funcdef_a1{f}
  m::concat{
    "template <typename T> ", 
    "static inline T ", f, "(T x) { return std::", f, "(x); }\n"};
private metafunction emit_funcdef_a2{f}
  m::concat{
    "template <typename T> ",
    "static inline T ", f, "(T x, T y) { return std::", f, "(x, y); }\n"};
private metafunction emit_funcdef_a1b{f}
  m::concat{
    "template <typename T> ", 
    "static inline bool ", f, "(T x) { return std::", f, "(x); }\n"};

extern "types" inline
#include <cmath>
#include <cfloat>
namespace numeric {
}; // namespace numeric
;

extern "functions" inline
#include <boost/static_assert.hpp>
namespace numeric {
BOOST_STATIC_ASSERT((FLT_RADIX == 2));
using namespace pxcrt;
static inline bt_int fpclassify_double(bt_double x)
{ return std::fpclassify(x); }
static inline bt_int fpclassify_float(bt_float x)
{ return std::fpclassify(x); }
static inline bt_bool signbit_double(bt_double x)
{ return std::signbit(x) != 0; }
static inline bt_bool signbit_float(bt_float x)
{ return std::signbit(x) != 0; }
static inline bt_double frexp_double(bt_double x, bt_int& exp)
{ return std::frexp(x, &exp); }
static inline bt_float frexp_float(bt_float x, bt_int& exp)
{ return std::frexp(x, &exp); }
static inline bt_double ldexp_double(bt_double x, bt_int exp)
{ return std::ldexp(x, exp); }
static inline bt_float ldexp_float(bt_float x, bt_int exp)
{ return std::ldexp(x, exp); }
static inline bt_double modf_double(bt_double x, bt_double& ir)
{ return std::modf(x, &ir); }
static inline bt_float modf_float(bt_float x, bt_float& ir)
{ return std::modf(x, &ir); }
%{emit_funcdefs}%
}; // namespace numeric
;

