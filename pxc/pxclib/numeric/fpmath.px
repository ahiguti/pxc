namespace numeric::fpmath;
import numeric::integral -;
import numeric::fp -;
import meta::common m;

public tsvaluetype struct extern "int" "extenum" fpclass_t { }
public extern "FP_NAN"		fpclass_t FP_NAN;
public extern "FP_INFINITE"	fpclass_t FP_INFINITE;
public extern "FP_ZERO"		fpclass_t FP_ZERO;
public extern "FP_SUBNORMAL"	fpclass_t FP_SUBNORMAL;
public extern "FP_NORMAL"	fpclass_t FP_NORMAL;

public threaded function {t} fpclass_t fpclassify(t x)
{ return m::symbol{m::concat{"fpclassify_", t}}(x); }
public threaded function {t} t frexp(t x, int& exp)
{ return m::symbol{m::concat{"frexp_", t}}(x, exp); }
public threaded function {t} t ldexp(t x, int exp)
{ return m::symbol{m::concat{"ldexp_", t}}(x, exp); }
public threaded function {t} bool signbit(t x)
{ return m::symbol{m::concat{"signbit_", t}}(x); }
public threaded function {t} t modf(t x, t& ir)
{ return m::symbol{m::concat{"modf_", t}}(x, ir); }

public threaded function extern "numeric::fpclassify_double"
  fpclass_t fpclassify_bt_double(double x);
public threaded function extern "numeric::fpclassify_float"
  fpclass_t fpclassify_bt_float(float x);
public threaded function extern "numeric::signbit_double"
  bool signbit_bt_double(double x);
public threaded function extern "numeric::signbit_float"
  bool signbit_bt_float(float x);
public threaded function extern "numeric::frexp_double"
  double frexp_bt_double(double x, int& exp);
public threaded function extern "numeric::frexp_float"
  float frexp_bt_float(float x, int& exp);
public threaded function extern "numeric::ldexp_double"
  double ldexp_bt_double(double x, int exp);
public threaded function extern "numeric::ldexp_float"
  float ldexp_bt_float(float x, int exp);
public threaded function extern "numeric::modf_double"
  double modf_bt_double(double x, double& exp);
public threaded function extern "numeric::modf_double"
  float modf_bt_float(float x, float& exp);

extern "type" inline
#include <math.h>
namespace numeric {
}; // namespace numeric
;

extern "fdef" inline
#include <boost/static_assert.hpp>
#include <float.h>
namespace numeric {
BOOST_STATIC_ASSERT((FLT_RADIX == 2));
using namespace pxcrt;
bt_int fpclassify_double(bt_double x) { return fpclassify(x); }
bt_int fpclassify_float(bt_float x) { return fpclassify(x); }
bt_bool signbit_double(bt_double x) { return signbit(x) != 0; }
bt_bool signbit_float(bt_float x) { return signbit(x) != 0; }
bt_double frexp_double(bt_double x, bt_int& exp) { return ::frexp(x, &exp); }
bt_float frexp_float(bt_float x, bt_int& exp) { return ::frexpf(x, &exp); }
bt_double ldexp_double(bt_double x, bt_int exp) { return ::ldexp(x, exp); }
bt_float ldexp_float(bt_float x, bt_int exp) { return ::ldexpf(x, exp); }
bt_double modf_double(bt_double x, bt_double& ir) { return ::modf(x, &ir); }
bt_float modf_float(bt_float x, bt_float& ir) { return ::modff(x, &ir); }
}; // namespace numeric
;

