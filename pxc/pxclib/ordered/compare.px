
namespace ordered::compare;
public import type::builtin "";
public import meta::builtin m;

public threaded function {t} int compare(t const& x, t const& y)
{
  macro symstr m::concat{t, "_compare"};
  macro sym m::symbol{t, symstr};
  macro cat m::category{t};
  if (m::eq{m::to_string{sym}, symstr}) {
    return sym(x, y);
  } else if (m::eq{t, type::builtin::unit}) {
    return 0;
  } else if (m::or{
    m::eq{cat, "builtin"}, m::eq{cat, "int"}, m::eq{cat, "uint"},
    m::eq{cat, "float"}, m::eq{cat, "numeric"},
    m::eq{t, type::builtin::string}}) {
    return x < y ? -1 : x > y ? 1 : 0;
  } else if (m::eq{cat, "farray"}) {
    size_t const sz = m::at{t, 1};
    size_t i = 0;
    for (i = 0; i < n; ++i) {
      int const c = compare(x[i], y[i]);
      if (c != 0) {
	return c;
      }
    }
    return 0;
  } else if (m::eq{cat, "varray"}) {
    size_t const xsz = x.size();
    size_t const ysz = y.size();
    size_t const sz = xsz < ysz ? xsz : ysz;
    size_t i = 0;
    for (i = 0; i < n; ++i) {
      int const c = compare(x[i], y[i]);
      if (c != 0) {
	return c;
      }
    }
    if (xsz > sz) {
      return -1;
    } else if (ysz > sz) {
      return 1;
    }
    return 0;
  } else if (m::eq{cat, "tree_map"}) {
    return m::error{"not implemented for tree_map"};
  } else if (m::eq{cat, "struct"}) {
    foreach (name, fld : t) {
      int const c = compare(x.fld, y.fld);
      if (c != 0) {
	return c;
      }
    }
    return 0;
  } else if (m::eq{cat, "union"}) {
    int const tc = compare(union_tag(x), union_tag(y));
    if (tc != 0) {
      return tc;
    }
    foreach (name, fld : t) {
      if (case x.fld) {
	int const c = compare(x.fld, y.fld);
	if (c != 0) {
	  return c;
	}
      }
    }
    return 0;
  } else {
    return m::error{m::concat{"not implemented for type '", t, "'"}};
  }
}

