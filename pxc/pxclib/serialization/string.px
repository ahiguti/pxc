namespace serialization::string;
public import numeric::integral -;
public import container::string -;
public import meta::builtin m;
public import meta::family mf;
public import numeric::cast n;
public import serialization::positional p;
public import serialization::builtin b;
public import serialization::url_encode u;
// public import serialization::json_encode j;
public import serialization::serialize -;

public macro is_string_family_type{t}
    m::or{
      m::eq{t, string},
      m::eq{t, strlit},
      m::eq{t, strref},
      m::eq{t, cstrref}};

threaded function {t} void string_append_escape(t const& x, string& v)
{
  // j::json_encode(x, v);
  v.push_back('"');
  u::url_encode(v, x);
  v.push_back('"');
}
threaded function {t} void string_append_noescape(t const& x, string& v)
{
  v.append(x);
}
threaded function void string_append_brace_open(string& v)
{ v.push_back('{'); }
threaded function void string_append_brace_close(string& v)
{ v.push_back('}'); }
threaded function void string_append_comma(string& v)
{ v.push_back(','); }
threaded function void string_append_equal(string& v)
{ v.push_back('='); }
threaded function void string_append_none(string& v)
{ } 
threaded function {t} void string_append_star(t const& x, string& v)
{ v.push_back('*'); }
threaded function {t} void string_append_unknown(t const& x, string& v)
{ v.push_back('?'); }

threaded struct deftmpl {
  macro target_type string;
  macro symstr{t} m::concat{t, "_append_to_string"};
  macro sym{t} m::symbol{symstr{t}, t};
  macro has_specialized_symbol{t} m::eq{m::to_string{sym{t}}, symstr{t}};
  macro specialized_func{t}
    m::metaif{has_specialized_symbol{t}, sym{t},
    m::metaif{is_string_family_type{t}, string_append_escape{t},
    m::metaif{n::is_integral{t}, p::integral_to_decimal,
    m::metaif{n::is_fp{t}, p::fp_to_decimal,
    m::metaif{m::eq{t, bool}, b::bool_to_string,
    m::metaif{m::eq{t, unit}, string_append_star,
    0}}}}}};
  macro array_begin string_append_brace_open;
  macro array_end string_append_brace_close;
  macro array_sep string_append_comma;
  macro map_begin string_append_brace_open;
  macro map_end string_append_brace_close;
  macro map_sep string_append_comma;
  macro map_entry_begin string_append_none;
  macro map_entry_end string_append_none;
  macro map_entry_sep string_append_equal;
  macro pointer_begin string_append_brace_open;
  macro pointer_end string_append_brace_close;
  macro struct_begin string_append_brace_open;
  macro struct_end string_append_brace_close;
  macro struct_sep string_append_comma;
  macro struct_entry_begin string_append_none;
  macro struct_entry_end string_append_none;
  macro struct_entry_sep string_append_equal;
  macro struct_field_name string_append_noescape;
  macro union_begin string_append_brace_open;
  macro union_end string_append_brace_close;
  macro union_entry_sep string_append_equal;
  macro union_field_name string_append_noescape;
  macro unknown{fam} string_append_unknown;
}

public threaded function {t} void serialize_to_string(t const& x, string& out)
{
  serialize{deftmpl, t}(x, out);
}

public threaded function {t} string to_string(t const& x)
{
  if (is_string_family_type{t}) {
    return x;
  } else {
    string s;
    serialize_to_string(x, s);
    return s;
  }
}

