namespace compiler::runtime;
public import compiler::impl::runtime;

public mtvaluetype extern "pxcrt::invalid_index" ""
  struct invalid_index { }
public mtvaluetype extern "pxcrt::invalid_field" ""
  struct invalid_field { }
public mtvaluetype extern "pxcrt::null_dereference" ""
  struct null_dereference { }
public mtvaluetype extern "pxcrt::would_invalidate" ""
  struct would_invalidate { }

public extern "@0void" "@0void" struct void { }
public extern "@0bool" "@0bool" struct bool { }
public extern "@0char" "@0char" struct char { }
public extern "@0uchar" "@0uchar" struct uchar { }
public extern "@0size_t" "@0size_t" struct size_t { }

public tsvaluetype extern "pxcrt::bt_slice" "slice"
struct {t} bt_slice {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type bt_slice{t};
  public macro crange_type bt_cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
  public extern "next" function void next();
}

public tsvaluetype extern "pxcrt::bt_cslice" "cslice"
struct {t} bt_cslice {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type bt_cslice{t};
  public macro crange_type bt_cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
  public extern "next" function void next();
}

public mtvaluetype extern "pxcrt::bt_string" "varray"
struct bt_string {
  public macro key_type size_t;
  public macro mapped_type uchar;
  public macro range_type bt_slice{uchar};
  public macro crange_type bt_cslice{uchar};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
  public extern "resize" function void resize(size_t i, char const& v);
  public extern "clear" function void clear();
  public extern "push_back" function void push_back(char const& v);
  public extern "pop_back" function uchar pop_back();
  public extern "reserve" function void reserve(size_t i);
  public extern "append" function void append(crange_type const& v);
}

public tsvaluetype extern "pxcrt::bt_strlit" "farray"
struct bt_strlit {
  public macro key_type size_t;
  public macro mapped_type uchar;
  public macro range_type bt_slice{uchar};
  public macro crange_type bt_cslice{uchar};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
}

