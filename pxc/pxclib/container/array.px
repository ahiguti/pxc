namespace container::array;
public import numeric::integral -;
public import container::impl::stdvector;
public import container::impl::pxcvector;
public import container::impl::farray;
public import container::impl::darray;
public import container::impl::invguard;
public import container::impl::util;
public import meta::common m;

public tsvaluetype struct extern "pxcrt::bt_slice" "slice" {t} slice {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type slice{t};
  public metafunction crange_type slice{t};
  public metafunction non_ephemeral_type pxcvector{t};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "get" t get(size_t i) const;
  public function extern "set" void set(size_t i, t v) const;
  public function extern "find" size_t find(size_t offset, t const& v) const;
  public function extern "next" void next();
  public function extern "pop_front" void pop_front(size_t i);
  public function extern "pop_back" void pop_back(size_t i);
}

public tsvaluetype struct extern "pxcrt::bt_cslice" "cslice" {t} cslice {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type cslice{t};
  public metafunction crange_type cslice{t};
  public metafunction non_ephemeral_type pxcvector{t};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "get" t get(size_t i) const;
  public function extern "find" size_t find(size_t o, t const& v) const;
  public function extern "next" void next();
  public function extern "pop_front" void pop_front(size_t i);
  public function extern "pop_back" void pop_back(size_t i);
}

public mtvaluetype struct extern "array::stdvector" "varray" {t} stdvector {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type slice{t};
  public metafunction crange_type cslice{t};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "resize" void resize(size_t i, t const& v);
  public function extern "clear" void clear();
  public function extern "push_back" void push_back(t const& v);
  public function extern "pop_back" t pop_back();
  public function extern "append" void append(crange_type const& v);
  public function extern "reserve" void reserve(size_t i);
}

public mtvaluetype struct extern "array::pxcvector" "varray" {t} pxcvector {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type slice{t};
  public metafunction crange_type cslice{t};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "resize" void resize(size_t i, t const& v);
  public function extern "clear" void clear();
  public function extern "push_back" void push_back(t const& v);
  public function extern "pop_back" t pop_back();
  public function extern "reserve" void reserve(size_t i);
  public function extern "append" void append(crange_type const& v);
  public function extern "insert" void insert(size_t i, crange_type const& v);
  public function extern "erase" void erase(size_t first, size_t last);
}

public tsvaluetype struct extern "array::farray" "farray" {t, n} farray {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type slice{t};
  public metafunction crange_type cslice{t};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
}

public tsvaluetype struct extern "array::darray" "darray" {t} darray {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type slice{t};
  public metafunction crange_type cslice{t};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
}

