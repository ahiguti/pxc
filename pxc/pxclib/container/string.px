namespace container::string;
public import numeric::integral -;
public import container::array -;
public import container::impl::string;
public import meta::common m;

public metafunction strref slice{uchar};
public metafunction cstrref cslice{uchar};

public metafunction is_string_family_type{t}
    m::or{
      m::eq{t, string},
      m::eq{t, strlit},
      m::eq{t, strref},
      m::eq{t, cstrref}};

public mtvaluetype struct extern "pxcrt::bt_string" "varray" string {
  public metafunction key_type size_t;
  public metafunction mapped_type uchar;
  public metafunction range_type slice{uchar};
  public metafunction crange_type cslice{uchar};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "find" size_t find(size_t o, uchar const& v) const;
  public function extern "resize" void resize(size_t i, uchar const& v);
  public function extern "clear" void clear();
  public function extern "push_back" void push_back(uchar const& v);
  public function extern "pop_back" uchar pop_back();
  public function extern "get" uchar get(size_t i) const;
  public function extern "set" void set(size_t i, uchar v);
  public function extern "reserve" void reserve(size_t i);
  public function extern "append" void append(crange_type const& v);
  public function extern "insert" void insert(size_t p, crange_type const& v);
  public function extern "erase" void erase(size_t first, size_t last);
}

public tsvaluetype struct extern "pxcrt::bt_strlit" "farray" strlit {
  public metafunction key_type size_t;
  public metafunction mapped_type uchar;
  public metafunction range_type slice{uchar};
  public metafunction crange_type cslice{uchar};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "find" size_t find(size_t o, uchar const& v) const;
}

public threaded function extern "pxcrt::memcmp_string"
  int memcmp_string(string const& x, string const& y);
public threaded function extern "pxcrt::memcmp_strlit"
  int memcmp_strlit(strlit const& x, strlit const& y);
public threaded function extern "pxcrt::memcmp_strref"
  int memcmp_strref(strref const& x, strref const& y);
public threaded function extern "pxcrt::memcmp_cstrref"
  int memcmp_cstrref(cstrref const& x, cstrref const& y);

