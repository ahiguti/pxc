namespace downcast;
import numeric::integral -;
import meta::common m;

public threaded function extern "pxcrt::downcast_const" {tto, tfrom}
check_polymorphic{tto, tfrom} const& downcast_const(tfrom const& x);

public threaded function extern "pxcrt::downcast_mutable" {tto, tfrom}
check_polymorphic{tto, tfrom}& downcast_mutable(tfrom& x);

public threaded function extern "pxcrt::instanceof" {t, tobj}
  bool instanceof(check_polymorphic{tobj, t} const& x);

private metafunction check_polymorphic{t1, t2}
  m::cond{
    m::and{m::is_polymorphic_type{t1}, m::is_polymorphic_type{t2}},
    t1,
    m::error{"polymorphic type expected"}};

extern "type" inline
namespace pxcrt {
template <typename Tto, typename Tfrom> Tto const&
downcast_const(Tfrom const& from) {
  return dynamic_cast<Tto const&>(from);
}
template <typename Tto, typename Tfrom> Tto&
downcast_mutable(Tfrom& from) {
  return dynamic_cast<Tto&>(from);
}
template <typename T, typename Tobj> bool
instanceof(Tobj const& x) {
  return dynamic_cast<T const *>(&x) != 0;
}
};

