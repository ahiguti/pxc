namespace pointer;
private import numeric::integral -;

public threaded struct extern "pxcrt::ptr" "ptr" {t} ptr { } 
public threaded struct extern "pxcrt::cptr" "cptr" {t} cptr { }
public valuetype struct extern "pxcrt::iptr" "iptr" {t} iptr { }
public multithreaded struct extern "pxcrt::tptr" "tptr" {t} tptr { }
public multithreaded struct extern "pxcrt::tcptr" "tcptr" {t} tcptr { }
public tsvaluetype struct extern "pxcrt::tiptr" "tiptr" {t} tiptr { }

public mtvaluetype struct extern "pxcrt::lockobject" "lockobject" {t}
lockobject {
  public function extern "wait" void wait();
  public function extern "notify_one" void notify_one();
  public function extern "notify_all" void notify_all();
}
public mtvaluetype struct extern "pxcrt::clockobject" "clockobject" {t}
clockobject {
  public function extern "wait" void wait();
  public function extern "notify_one" void notify_one();
  public function extern "notify_all" void notify_all();
}

extern "type" inline
#include <string>
#include <stdint.h>
#include <stdexcept>
#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include <assert.h>
#include <unistd.h>
#ifdef PXCRT_DBG_RC
#define DBG_RC(x) x
#else
#define DBG_RC(x)
#endif
#ifdef PXCRT_DBG_MTX
#define DBG_MTX(x) x
#else
#define DBG_MTX(x)
#endif
#ifdef PXCRT_DBG_COND
#define DBG_COND(x) x
#else
#define DBG_COND(x)
#endif
namespace pxcrt {
struct condition_variable;
struct mutex {
  friend struct condition_variable;
  mutex() {
    init();
  }
  mutex(const mutex&) {
    init();
  }
  mutex& operator =(const mutex&) {
    return *this;
  }
  ~mutex() {
    const int __attribute__((unused)) e = pthread_mutex_destroy(&mtx);
    assert(e == 0);
  }
  void lock() {
    DBG_MTX(fprintf(stderr, "lock %p\n", &mtx));
    const int __attribute__((unused)) e = pthread_mutex_lock(&mtx);
    assert(e == 0);
  }
  void unlock() {
    DBG_MTX(fprintf(stderr, "unlock %p\n", &mtx));
    const int __attribute__((unused)) e = pthread_mutex_unlock(&mtx);
    assert(e == 0);
  }
private:
  void init() {
    pthread_mutexattr_t mattr;
    pthread_mutexattr_init(&mattr);
    pthread_mutexattr_settype(&mattr, PTHREAD_MUTEX_RECURSIVE);
    const int e = pthread_mutex_init(&mtx, &mattr);
    pthread_mutexattr_destroy(&mattr);
    if (e != 0) {
      throw std::runtime_error("pthread_mutex_init"); // TODO
    }
  }
private:
  pthread_mutex_t mtx;
};
struct condition_variable {
  condition_variable() {
    init();
  }
  condition_variable(const condition_variable&) {
    init();
  }
  condition_variable& operator =(const condition_variable&) {
    return *this;
  }
  ~condition_variable() {
    DBG_COND(fprintf(stderr, "cond destroy %p\n", &cond));
    const int __attribute__((unused)) e = pthread_cond_destroy(&cond);
    assert(e == 0);
  }
  void wait(mutex& mtx) {
    const int __attribute__((unused)) e = pthread_cond_wait(&cond, &mtx.mtx);
    assert(e == 0);
  }
  bool timedwait(mutex& mtx, const ::timespec& ts) {
    const int e = pthread_cond_timedwait(&cond, &mtx.mtx, &ts);
    if (e == ETIMEDOUT) {
      return false;
    }
    assert(e == 0);
    return true;
  }
  void notify_one() {
    const int __attribute__((unused)) e = pthread_cond_signal(&cond);
    assert(e == 0);
  }
  void notify_all() {
    const int __attribute__((unused)) e = pthread_cond_broadcast(&cond);
    assert(e == 0);
  }
private:
  void init() {
    const int e = pthread_cond_init(&cond, 0);
    DBG_COND(fprintf(stderr, "cond init %p %d\n", &cond, e));
    if (e != 0) {
      throw std::runtime_error("pthread_cond_init"); // TODO
    }
  }
private:
  pthread_cond_t cond;
};
struct monitor {
  mutex mtx;
  condition_variable cond;
};
struct mtcount { /* reference counter for multi-threaded shared objects */ 
  mtcount() : count$z(1) { }
  void incref$z() { __sync_fetch_and_add(&count$z, 1); } /* gcc >= 4 */
  bool decref$z() { return (__sync_fetch_and_add(&count$z, -1) == 1); }
public:
  long count$z;
};
struct stcount { /* reference counter for single-threaded shared objects */
  stcount() : count$z(1) { }
  void incref$z() { ++count$z; }
  bool decref$z() { return (--count$z == 0); }
public:
  long count$z;
};
template <typename T> struct uninit_mem { char value[sizeof(T)]; };
/* NOTE: emit_vardef_constructor_fast_boxing() depends on the internals
 * of rcval/trcval/tircval. */
template <typename T>
struct rcval {
  /* rcval: single threaded, mutable and immutable */
  typedef T value_type;
  rcval() : value$z() {
    DBG_RC(fprintf(stdout, "c1 %p\n", this));
  }
  explicit rcval(const T& v) : value$z(v) {
    DBG_RC(fprintf(stdout, "c2 %p\n", this));
  }
  template <typename T0> explicit
  rcval(const T0& a0) : value$z(a0) { }
  template <typename T0, typename T1>
  rcval(const T0& a0, const T1& a1) : value$z(a0, a1) { }
  template <typename T0, typename T1, typename T2>
  rcval(const T0& a0, const T1& a1, const T2& a2) : value$z(a0, a1, a2) { }
  void incref$z() const {
    DBG_RC(fprintf(stdout, "%p %ld +1\n", this, get_count$z()));
    count$z.incref$z();
  }
  void decref$z() const {
    DBG_RC(fprintf(stdout, "%p %ld -1\n", this, get_count$z()));
    if (count$z.decref$z()) {
      delete this;
      DBG_RC(fprintf(stdout, "d  %p\n", this));
    }
  }
  size_t get_count$z() const { return count$z.count$z; }
  // void lock$z() const { }
  // void unlock$z() const { }
  // void wait$z() const { }
  // void notify_one$z() const { }
  // void notify_all$z() const { }
public:
  mutable stcount count$z;
public:
  T value$z;
private:
  rcval(const rcval&);
  rcval& operator =(const rcval&);
};
template <typename T>
struct trcval {
  /* trcval: multithreaded, mutable */
  typedef T value_type;
  trcval() : value$z() {
    DBG_RC(fprintf(stdout, "c1 %p\n", this));
  }
  explicit trcval(const T& v) : value$z(v) {
    DBG_RC(fprintf(stdout, "c2 %p\n", this));
  }
  template <typename T0> explicit
  trcval(const T0& a0) : value$z(a0) { }
  template <typename T0, typename T1>
  trcval(const T0& a0, const T1& a1) : value$z(a0, a1) { }
  template <typename T0, typename T1, typename T2>
  trcval(const T0& a0, const T1& a1, const T2& a2) : value$z(a0, a1, a2) { }
  void incref$z() const {
    DBG_RC(fprintf(stdout, "%p %ld +1\n", this, get_count$z()));
    count$z.incref$z();
  }
  void decref$z() const {
    DBG_RC(fprintf(stdout, "%p %ld -1\n", this, get_count$z()));
    if (count$z.decref$z()) {
      delete this;
      DBG_RC(fprintf(stdout, "d  %p\n", this));
    }
  }
  size_t get_count$z() const { return count$z.count$z; }
  void lock$z() const { monitor$z.mtx.lock(); }
  void unlock$z() const { monitor$z.mtx.unlock(); }
  void wait$z() const { monitor$z.cond.wait(monitor$z.mtx); }
  void notify_one$z() const { monitor$z.cond.notify_one(); }
  void notify_all$z() const { monitor$z.cond.notify_all(); }
public:
  mutable mtcount count$z;
  mutable monitor monitor$z;
public:
  T value$z;
private:
  trcval(const trcval&);
  trcval& operator =(const trcval&);
};
template <typename T>
struct tircval {
  /* tircval: multithreded, immutable */
  typedef T value_type;
  tircval() : value$z() {
    DBG_RC(fprintf(stdout, "c1 %p\n", this));
  }
  explicit tircval(const T& v) : value$z(v) {
    DBG_RC(fprintf(stdout, "c2 %p\n", this));
  }
  template <typename T0> explicit
  tircval(const T0& a0) : value$z(a0) { }
  template <typename T0, typename T1>
  tircval(const T0& a0, const T1& a1) : value$z(a0, a1) { }
  template <typename T0, typename T1, typename T2>
  tircval(const T0& a0, const T1& a1, const T2& a2) : value$z(a0, a1, a2) { }
  void incref$z() const {
    DBG_RC(fprintf(stdout, "%p %ld +1\n", this, count$z));
    count$z.incref$z();
  }
  void decref$z() const {
    DBG_RC(fprintf(stdout, "%p %ld -1\n", this, count$z));
    if (count$z.decref$z()) {
      delete this;
      DBG_RC(fprintf(stdout, "d  %p\n", this));
    }
  }
  size_t get_count$z() const { return count$z.count$z; }
  // void lock$z() const { }
  // void unlock$z() const { }
  // void wait$z() const { }
public:
  mutable mtcount count$z;
public:
  T value$z;
private:
  tircval(const tircval&);
  tircval& operator =(const tircval&);
};
template <typename T>
struct rcptr { /* T must have an intrusive count */
  typedef void range_type; /* guard object requires this */
  typedef void crange_type; /* guard object requires this */
  template <typename Tx> friend struct rcptr;
  rcptr() : ptr(0) { }
  rcptr(T *rawptr) : ptr(rawptr) { } /* for fast boxing constr */
  rcptr(const rcptr& x) : ptr(x.ptr) { if (ptr) ptr->incref$z(); }
  /* ptr{foo} to ptr{ifoo} */
  template <typename Tx> rcptr(const rcptr<Tx>& x) : ptr(x.get()) {
    if (ptr) ptr->incref$z();
  }
  /* boxing foo to ptr{ifoo} */
  template <typename Tx> explicit rcptr(const Tx& x) : ptr(new T(x)) { }
  ~rcptr() { if (ptr) ptr->decref$z(); }
  rcptr& operator =(T *x) { return set(x); }
  template <typename Tx> rcptr& operator =(Tx *x) { return set(x); }
  rcptr& operator =(const rcptr& x) { return set(x.ptr); }
  template <typename Tx> rcptr& operator =(const rcptr<Tx>& x) {
    return set(x.ptr);
  }
  T *get() const { return ptr; }
  T& operator *() const { return *ptr; }
  T *operator ->() const { return ptr; }
  void inc_invalidate_guard() const { ptr->lock$z(); }
  void dec_invalidate_guard() const { ptr->unlock$z(); }
private:
  T *ptr;
private:
  rcptr& set(T *x) {
    if (x) x->incref$z();
    if (ptr) ptr->decref$z();
    ptr = x;
    return *this;
  }
};
template <typename T> struct lockobject
{
  lockobject(const rcptr<T>& p) : ptr(p), objref(*p) { objref.lock$z(); }
  ~lockobject() { objref.unlock$z(); }
  T *get() const { return &objref; }
  T& operator *() const { return objref; }
  T *operator ->() const { return &objref; }
  void wait() { objref.wait$z(); }
  void notify_one() { objref.notify_one$z(); }
  void notify_all() { objref.notify_all$z(); }
private:
  lockobject(const lockobject&);
  lockobject& operator =(const lockobject&);
private:
  rcptr<T> ptr;
  T& objref;
};
template <typename T> struct clockobject
{
  clockobject(const rcptr<const T>& p) : ptr(p), objref(*p)
    { objref.lock$z(); }
  ~clockobject() { objref.unlock$z(); }
  const T *get() const { return &objref; }
  const T& operator *() const { return objref; }
  const T *operator ->() const { return &objref; }
  void wait() { objref.wait$z(); }
  void notify_one() { objref.notify_one$z(); }
  void notify_all() { objref.notify_all$z(); }
private:
  clockobject(const clockobject&);
  clockobject& operator =(const clockobject&);
private:
  rcptr<const T> ptr;
  const T& objref;
};
template <typename T> typename T::value_type deref_value$z(const rcptr<T>& p)
{
  return p->value$z;
}
template <typename T> T deref(const rcptr<T>& p)
{
  return *p;
}
}; // namespace pxcrt
;

extern "fdecl" inline
namespace pxcrt {
}; // namespace pxcrt
;

extern "fdef" inline
namespace pxcrt {
}; // namespace pxcrt
;

