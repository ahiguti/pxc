namespace io::net::socket;
public import type::builtin -;
public import io -;
public import io::file -;
public import io::errno -;
public import io::net::addrinfo ai;

public macro socket_factory_ptr tptr{socket_factory};

public multithreaded extern "pxcio::socket_factory" "linear"
  struct socket_factory(ioptr const& iop, bool passive,
    ai::sockaddr_storage const& addr, ai::socktype_t socktype,
    ai::protocol_t protocol, uint backlog, errno_eh& eh) { }

public multithreaded extern "pxcio::socket" "linear"
  struct socket(socket_factory_ptr const& sfp, ai::sockaddr_storage& addr_r,
    errno_eh& ej) { }
public threaded extern "pxcio::socket_read" function
  size_t socket_read(socket& f, string& buf, size_t len, errno_eh& eh);
public threaded extern "pxcio::socket_write" function
  size_t socket_write(socket& f, cstrref const& buf, errno_eh& eh);

public threaded function socket_factory_ptr socket_acceptor(ioptr const& iop,
  cstrref const& host, cstrref const& service, ai::family_t family,
  ai::socktype_t socktype, uint backlog)
{
  var gaieh = ai::gai_eh(error::policy_throw);
  var ioeh = errno_eh(error::policy_throw);
  var ai = ai::addrinfo(iop, host, service, family, socktype, ai::PROTO_UNSPEC, 
    ai::AI_PASSIVE, gaieh);
  var sfp = tptr(socket_factory(iop, true, ai.get_sockaddr(), socktype,
    ai::PROTO_UNSPEC, backlog, ioeh));
  return sfp;
}

public threaded function socket_factory_ptr socket_connector(ioptr const& iop,
  cstrref const& host, cstrref const& service, ai::family_t family,
  ai::socktype_t socktype)
{
  var gaieh = ai::gai_eh(error::policy_throw);
  var ioeh = errno_eh(error::policy_throw);
  var ai = ai::addrinfo(iop, host, service, family, socktype, ai::PROTO_UNSPEC, 
    0, gaieh);
  var sfp = tptr(socket_factory(iop, false, ai.get_sockaddr(), socktype,
    ai::PROTO_UNSPEC, 0, ioeh));
  return sfp;
}

extern "type" inline
namespace pxcio {
struct socket_factory {
  /* NOTE: must be immutable. see socket_create(). */
  socket_factory(ioptr const& iop, bt_bool passive,
    sockaddr_storage const& addr, int socktype, int protocol, bt_uint backlog,
    errno_eh& eh);
  const bool passive;
  const sockaddr_storage addr;
  const int socktype;
  const int protocol;
  const auto_file listener;
};
typedef pxcrt::rcptr< pxcrt::trcval<socket_factory> > socket_factory_ptr;
struct socket : public auto_file {
  socket(socket_factory_ptr const& sfp, sockaddr_storage& addr_r,
    errno_eh& eh);
};
};

extern "fdecl" inline
namespace pxcio {
};

extern "fdef" inline
namespace pxcio {
static int socket_factory_create(bool passive, sockaddr_storage const& addr,
  int socktype, int protocol, int backlog, errno_eh& eh)
{
  if (passive) {
    int fd = ::socket(addr.get_family(), socktype, protocol);
    if (fd < 0) {
      ioeh_set(eh, errno);
      return -1;
    }
    int v = 0;
    v = ::bind(fd, addr.get_sockaddr(), addr.get_socklen());
    if (v != 0) {
      close(fd);
      ioeh_set(eh, errno);
      return -1;
    }
    v = ::listen(fd, backlog);
    if (v != 0) {
      close(fd);
      ioeh_set(eh, errno);
      return -1;
    }
    return fd;
  } else {
    return -1;
  }
}
socket_factory::socket_factory(ioptr const& iop, bt_bool passive,
  sockaddr_storage const& addr, int socktype, int protocol, bt_uint backlog,
  errno_eh& eh)
  : passive(passive), addr(addr), socktype(socktype), protocol(protocol),
    listener(socket_factory_create(
      passive, addr, socktype, protocol, backlog, eh))
{
}
static int socket_create(socket_factory_ptr const& sfp,
  sockaddr_storage& addr_r, errno_eh& eh)
{
  socket_factory& sf = sfp->value$z;
    /* no need to lock sfp because socket_factory is always immutable */
  if (sf.passive) {
    socklen_t len = addr_r.get_socklen();
    int fd = ::accept(sf.listener.get(), addr_r.get_sockaddr(), &len);
    if (fd < 0) {
      ioeh_set(eh, errno);
      return -1;
    }
    return fd;
  } else {
    int fd = ::socket(sf.addr.get_family(), sf.socktype, sf.protocol);
    if (fd < 0) {
      ioeh_set(eh, errno);
      return -1;
    }
    int v = ::connect(fd, sf.addr.get_sockaddr(), sf.addr.get_socklen());
    if (v != 0) {
      close(fd);
      ioeh_set(eh, errno);
      return -1;
    }
    return fd;
  }
}
socket::socket(socket_factory_ptr const& sfp, sockaddr_storage& addr_r,
  errno_eh& eh)
  : auto_file(socket_create(sfp, addr_r, eh))
{
}
size_t socket_read(socket& s, bt_string& buf, size_t len, errno_eh& eh)
{
  return file_read_impl(s.get(), buf, len, eh);
}
size_t socket_write(socket& s, cstrref const& buf, errno_eh& eh)
{
  return file_write_impl(s.get(), buf, eh);
}
};

