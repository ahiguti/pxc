namespace io::standard;
public import type::builtin -;
public import io -;
public import io::file -;
public import io::errno -;
public import serialize::string;
public import meta::builtin m;

public extern "pxcio::stdin" fileptr stdin;
public extern "pxcio::stdout" fileptr stdout;
public extern "pxcio::stderr" fileptr stderr;
public threaded extern "pxcio::get_stdin"
  function fileptr get_stdin(ioptr const& iop);
public threaded extern "pxcio::get_stdout"
  function fileptr get_stdout(ioptr const& iop);
public threaded extern "pxcio::get_stderr"
  function fileptr get_stderr(ioptr const& iop);

private macro ioeh_t error::error_handler{errno_t};

private extern "pxcio::iostd_init" function void iostd_init();

iostd_init();

public threaded function {t}
void file_print(file& f, t const& x)
{
  ioeh_t eh = ioeh_t(error::policy_overwrite);
  if (m::eq{t, type::builtin::string}) {
    f.write_all(x, eh);
  } else {
    f.write_all(serialize::string::to_string(x), eh);
  }
}

public threaded function {t}
void file_println(file& f, t const& x)
{
  ioeh_t eh = ioeh_t(error::policy_overwrite);
  if (m::eq{t, type::builtin::string}) {
    string s = x;
    s.append("\n");
    f.write_all(s, eh);
  } else {
    string s = serialize::string::to_string(x);
    s.append("\n");
    f.write_all(s, eh);
  }
}

public function {t}
void print(t const& x)
{
  file_print(*stdout, x);
}

public function {t}
void println(t const& x)
{
  file_println(*stdout, x);
}

extern "type" inline
namespace pxcio {
};

extern "fdecl" inline
namespace pxcio {
typedef pxcrt::rcptr< pxcrt::trcval<file_impl> > fileptr;
extern fileptr stdin;
extern fileptr stdout;
extern fileptr stderr;
};

extern "fdef" inline
namespace pxcio {
fileptr stdin;
fileptr stdout;
fileptr stderr;
fileptr get_stdin(ioptr const& iop) { return stdin; }
fileptr get_stdout(ioptr const& iop) { return stdout; }
fileptr get_stderr(ioptr const& iop) { return stderr; }
void iostd_init()
{
  static int init_flag = 0;
  if (!init_flag) {
    init_flag = 1;
    stdin = fileptr(new pxcrt::trcval<file_impl>(io, 0));
    stdout = fileptr(new pxcrt::trcval<file_impl>(io, 1));
    stderr = fileptr(new pxcrt::trcval<file_impl>(io, 2));
  }
}
};

