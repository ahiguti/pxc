namespace io::standard;
public import type::builtin "";
public import io "";
public import serialize::string;
public import meta::builtin m;

public threaded function {t}
void stdout_print(ioptr const& sys, t const& x)
{
  if (m::eq{t, type::builtin::string}) {
    stdout_print_string(sys, x);
  } else {
    stdout_print_string(sys, serialize::string::to_string(x));
  }
}

public threaded function {t}
void stdout_println(ioptr const& sys, t const& x)
{
  if (m::eq{t, type::builtin::string}) {
    string s = x;
    s.append("\n");
    stdout_print_string(sys, s);
  } else {
    string s = serialize::string::to_string(x);
    s.append("\n");
    stdout_print_string(sys, s);
  }
}

public function {t}
void print(t const& x)
{
  stdout_print(io, x);
}

public function {t}
void println(t const& x)
{
  stdout_println(io, x);
}


private threaded extern "pxcio::stdout_print_string"
  function void stdout_print_string(ioptr const& sys, string const& x);

extern "type" inline
namespace pxcio {
};

extern "fdecl" inline
namespace pxcio {
};

extern "fdef" inline
namespace pxcio {
#include <stdio.h>
void stdout_print_string(ioptr const& sys, pxcrt::bt_string const& x)
{
  ::fwrite(x.rawarr(), x.size(), 1, stdout);
}
};

