public threaded namespace io::file "use-unsafe";
public import numeric::integral -;
public import numeric::cast -;
public import container::array -;
public import pointer -;
public import io +;
public import io::errno -;
public import io::time -;
public import exception;
public import operator -;
public import generic::datatype -;
public import meta m;
public import meta::vararg v;

public threaded interface extern "pxcrt::file"
file { }
public threaded struct extern "pxcrt::file_st" "nodefault"
file_st <file> { }
public multithreaded struct extern "pxcrt::file_mt" "nodefault"
file_mt <file> {
  /* while pxcrt::file_mt is implemented as an immutable pointer, it is
   * defiend as 'multithreaded' instead of 'tsvaluetype', because it is
   * not transitively immutable. */
  public metafunction __attribute__ {{"monitor", 0}};
    /* does not implement wait/notify */
}

public tsvaluetype struct extern "pxcrt::off_t" "extint"
off_t { }
public tsvaluetype struct extern "pxcrt::dev_t" "extuint"
dev_t { }        //UQUAD
public tsvaluetype struct extern "pxcrt::ino_t" "extuint"
ino_t { }        //ULONGW
public tsvaluetype struct extern "pxcrt::mode_t " "extbitmask"
mode_t { }  //U32
public tsvaluetype struct extern "pxcrt::nlink_t" "extuint"
nlink_t { }    //UWORD
public tsvaluetype struct extern "pxcrt::uid_t" "extuint"
uid_t { }        //U32
public tsvaluetype struct extern "pxcrt::gid_t" "extuint"
gid_t { }        // U32
public tsvaluetype struct extern "pxcrt::blksize_t" "extint"
blksize_t { } //SLONGW
public tsvaluetype struct extern "pxcrt::blkcnt_t" "extint"
blkcnt_t { }   //SQUAD?
public tsvaluetype struct extern "int" "extbitmask"
open_flags_t { }
public tsvaluetype struct extern "int" "extenum"
whence_t { }

public tsvaluetype struct extern "pxcrt::statbuf" statbuf {
  public dev_t st_dev;
  public ino_t st_ino;
  public mode_t st_mode;
  public nlink_t st_nlink;
  public uid_t st_uid;
  public gid_t st_gid;
  public dev_t st_rdev;
  public off_t st_size;
  public blksize_t st_blksize;
  public blkcnt_t st_blocks;
  public time_t st_atime;
  public time_t st_mtime;
  public time_t st_ctime;
}

public extern "O_RDONLY"	open_flags_t O_RDONLY;
public extern "O_WRONLY"	open_flags_t O_WRONLY;
public extern "O_RDWR"		open_flags_t O_RDWR;
public extern "O_CREAT"		open_flags_t O_CREAT;
public extern "O_EXCL"		open_flags_t O_EXCL;
public extern "O_TRUNC"		open_flags_t O_TRUNC;
public extern "O_APPEND"	open_flags_t O_APPEND;
public extern "O_NONBLOCK"	open_flags_t O_NONBLOCK;
public extern "O_SYNC"		open_flags_t O_SYNC;
public extern "O_FSYNC"		open_flags_t O_FSYNC;
public extern "O_ASYNC"		open_flags_t O_ASYNC;

public extern "SEEK_SET"	whence_t SEEK_SET;
public extern "SEEK_CUR"	whence_t SEEK_CUR;
public extern "SEEK_END"	whence_t SEEK_END;

public extern "S_IRWXU"		mode_t S_IRWXU;
public extern "S_IRUSR"		mode_t S_IRUSR;
public extern "S_IWUSR"		mode_t S_IWUSR;
public extern "S_IXUSR"		mode_t S_IXUSR;
public extern "S_IRWXG"		mode_t S_IRWXG;
public extern "S_IRGRP"		mode_t S_IRGRP;
public extern "S_IWGRP"		mode_t S_IWGRP;
public extern "S_IXGRP"		mode_t S_IXGRP;
public extern "S_IRWXO"		mode_t S_IRWXO;
public extern "S_IROTH"		mode_t S_IROTH;
public extern "S_IWOTH"		mode_t S_IWOTH;
public extern "S_IXOTH"		mode_t S_IXOTH;

public metafunction open_st errno_or_value{file_st};
public metafunction open_mt errno_or_value{file_mt};

public threaded function {tlist} open_st
io_open(expand(v::arg_decls_bycref{tlist}))
{
  open_flags_t flags = O_RDONLY;
  mode_t md = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;
  if (m::gt{m::size{tlist}, 2}) {
    metafunction ti m::at2{tlist};
    if (m::eq{m::at0{ti}, open_flags_t}) {
      flags = a2;
    } else {
      if (a2 == "r") {
	flags = O_RDONLY;
      } else if (a2 == "r+") {
	flags = O_RDWR;
      } else if (a2 == "w") {
	flags = O_WRONLY | O_CREAT | O_TRUNC;
      } else if (a2 == "w+") {
	flags = O_RDWR | O_CREAT | O_TRUNC;
      } else if (a2 == "a") {
	flags = O_WRONLY | O_CREAT | O_APPEND;
      } else if (a2 == "a+") {
	flags = O_RDWR | O_CREAT | O_APPEND;
      } else {
	open_st r;
	r.errno = EINVAL;
	return r;
      }
    }
  }
  if (m::gt{m::size{tlist}, 3}) {
    md = a3;
  }
  if (m::gt{m::size{tlist}, 4}) {
    open_invalid_arg(); /* compile-time error */
  }
  return io_open_st(a0, a1, flags, md);
}

public threaded function open_st
io_open_st(io const& iop, cstrref const& fn, open_flags_t flags, mode_t md)
{
  open_st r;
  int fd = io_open_fd(iop, fn, flags, md);
  if (fd >= 0) {
    r.value = io_make_file_st(iop, fd);
  } else {
    r.errno = iop.get_errno();
  }
  return r;
}

public threaded function open_mt
io_open_mt(io const& iop, cstrref const& fn, open_flags_t flags, mode_t md)
{
  open_mt r;
  int fd = io_open_fd(iop, fn, flags, md);
  if (fd >= 0) {
    r.value = io_make_file_mt(iop, fd);
  } else {
    r.errno = iop.get_errno();
  }
  return r;
}

/* file descriptors are hidden */
private threaded function extern "pxcrt::io_open_fd"
int io_open_fd(io const& iop, cstrref const& fn, open_flags_t flags,
  mode_t md);
private threaded function extern "pxcrt::io_make_file_st"
file_st io_make_file_st(io const& iop, int fd);
private threaded function extern "pxcrt::io_make_file_mt"
file_mt io_make_file_mt(io const& iop, int fd);

public threaded function extern "pxcrt::file_fileno" int
file_fileno(file const& f);

private threaded function extern "pxcrt::file_read_impl" errno_t
file_read_impl(file const& f, string mutable& buf, size_t mutable& len);

public threaded function errno_or_value{size_t}
file_read(file const& f, string mutable& buf, size_t len)
{
  errno_or_value{size_t} r;
  const e = file_read_impl(f, buf, len);
  if (e != EOK) {
    r.errno = e;
  } else {
    r.value = len;
  }
  return r;
}

public threaded function extern "pxcrt::file_write_impl" errno_t
file_write_impl(file const& f, cstrref const& buf, size_t mutable& len_r);

public threaded function errno_or_value{size_t}
file_write(file const& f, cstrref const& buf)
{
  errno_or_value{size_t} r;
  size_t len = 0;
  const e = file_write_impl(f, buf, len);
  if (e != EOK) {
    r.errno = e;
  } else {
    r.value = len;
  }
  return r;
}

public threaded function extern "pxcrt::file_lseek_impl" errno_t
file_lseek_impl(file const& f, off_t mutable& offset, whence_t whence);

public threaded function errno_or_value{off_t}
file_lseek(file const& f, off_t offset, whence_t whence)
{
  errno_or_value{off_t} r;
  const e = file_lseek_impl(f, offset, whence);
  if (e != EOK) {
    r.errno = e;
  } else {
    r.value = offset;
  }
  return r;
}

public threaded function extern "pxcrt::file_st_close" errno_t
file_st_close(file_st mutable& f);
  /* NOTE: file_mt can not be closed explicitly. */

public threaded function extern "pxcrt::io_stat" errno_t
io_stat(io const& iop, cstrref const& fn, statbuf mutable& buf);

public threaded function errno_or_value{size_t}
file_read_all(file const& f, string mutable& buf)
{
  size_t rlen = 0;
  while (true) {
    size_t const len = 16384; /* TODO: configurable? */
    const r = file_read(f, buf, len);
    if (const rl : r.value) {
      if (rl == 0) {
	break;
      }
      rlen += rl;
    } else {
      return r;
    }
  }
  errno_or_value{size_t} r;
  r.value = rlen;
  return r;
}

public threaded function errno_or_value{size_t}
file_write_all(file const& f, cstrref const& buf)
{
  size_t len_r = 0;
  size_t curpos = 0;
  size_t endpos = buf.size();
  while (curpos != endpos) {
    const r = file_write(f, buf[curpos .. endpos]);
    if (case r.errno) {
      return r;
    }
    const size_t wlen = r.value;
    if (wlen == 0) {
      break;
    }
    curpos += wlen;
    len_r += wlen;
  }
  errno_or_value{size_t} r;
  r.value = len_r;
  return r;
}

public threaded function errno_or_value{ptr{string}}
io_read_file(io const& iop, cstrref const& fn)
{
  errno_or_value{ptr{string}} r;
  const f = io_open(iop, fn, O_RDONLY);
  if (const err: f.errno) {
    r.errno = err;
  } else {
    const buf = make_ptr{string}();
    const ra = file_read_all(f.value, *buf);
    if (const err: ra.errno) {
      r.errno = err;
    } else {
      r.value = buf;
    }
  }
  return r;
}

public threaded function errno_or_value{size_t}
io_write_file(io const& iop, cstrref const& fn, cstrref const& buf)
{
  errno_or_value{size_t} r;
  const f = io_open(iop, fn, O_WRONLY | O_CREAT | O_TRUNC,
    S_IRWXU | S_IRWXG | S_IRWXO);
  if (const err: f.errno) {
    r.errno = err;
  } else {
    r = file_write_all(f.value, buf);
  }
  return r;
}

public metafunction pipe_t errno_or_value{pair{file_mt, file_mt}};

public threaded function pipe_t
io_pipe(io const& sys)
{
  pipe_t r;
  errno_t err = EOK;
  varray{file_mt} v = io_pipe_internal(sys, err);
  if (err != EOK) {
    r.errno = err;
  } else {
    r.value = pair{file_mt, file_mt}(v[0], v[1]);
  }
  return r;
}

private threaded function extern "pxcrt::io_pipe_internal"
varray{file_mt}
io_pipe_internal(io const& sys, errno_t mutable& err_r);

extern "types" inline
#include <sys/types.h>
#include <fcntl.h>
#include <sys/stat.h>
#ifdef PXC_POSIX
#include <unistd.h>
#else
#include <io.h>
#endif
namespace pxcrt {
using namespace pxcrt;

#ifdef PXC_POSIX
typedef struct ::stat statbuf;
typedef ::off_t off_t;
typedef ::dev_t dev_t;
typedef ::ino_t ino_t;
typedef ::mode_t mode_t;
typedef ::nlink_t nlink_t;
typedef ::uid_t uid_t;
typedef ::gid_t gid_t;
typedef ::blksize_t blksize_t;
typedef ::blkcnt_t blkcnt_t;
#else
typedef struct ::_stat statbuf;
typedef __int64 off_t;
typedef unsigned __int64 dev_t;
typedef unsigned __int64 ino_t;
typedef unsigned mode_t;
typedef unsigned nlink_t;
typedef unsigned uid_t;
typedef unsigned gid_t;
typedef unsigned __int64 blksize_t;
typedef unsigned __int64 blkcnt_t;
#define S_ISUID   _S_ISUID
#define S_ISGID   _S_ISGID
#define S_ISVTX   _S_ISVTX
#define S_IREAD   _S_IREAD
#define S_IWRITE  _S_IWRITE
#define S_IEXEC   _S_IEXEC
#define S_IRUSR   _S_IREAD
#define S_IWUSR   _S_IWRITE
#define S_IXUSR   _S_IEXEC
#define S_IRWXU   (_S_IREAD|_S_IWRITE|_S_IEXEC)
#define S_IRGRP   _S_IREAD
#define S_IWGRP   _S_IWRITE
#define S_IXGRP   _S_IEXEC
#define S_IRWXG   (_S_IREAD|_S_IWRITE|_S_IEXEC)
#define S_IROTH   _S_IREAD
#define S_IWOTH   _S_IWRITE
#define S_IXOTH   _S_IEXEC
#define S_IRWXO   (_S_IREAD|_S_IWRITE|_S_IEXEC)
#endif

struct file_st;

int file_st_close(file_st& f);

struct file_st_rep {
  file_st_rep(int fd) : fd(fd) { }
  ~file_st_rep() {
    /* don't close stdin/out/err */
    if (fd > 2) {
#ifdef PXC_POSIX
      ::close(fd);
#else
      ::_close(fd);
#endif
    }
  }
  int get() const { return fd; }
  friend int file_st_close(file_st& f);
private:
  int fd;
  file_st_rep(const file_st_rep&);
  file_st_rep& operator =(const file_st_rep&);
};

struct file_mt_rep {
  file_mt_rep(int fd) : fd(fd) { }
  ~file_mt_rep() {
    /* don't close stdin/out/err */
    if (fd > 2) {
#ifdef PXC_POSIX
      ::close(fd);
#else
      ::_close(fd);
#endif
    }
  }
  int get() const { return fd; }
private:
  const int fd;
  file_mt_rep(const file_mt_rep&);
  file_mt_rep& operator =(const file_mt_rep&);
};

struct file {
  virtual ~file() { }
  virtual int get() const = 0;
  virtual void incref$z() const = 0;
  virtual void decref$z() const = 0;
  virtual size_t refcnt$z() const = 0;
};

struct file_st : public file {
  typedef ::pxcrt::rcptr< pxcrt::rcval<file_st_rep> > ptr_type;
  ptr_type ptr;
  file_st(int fd) : ptr(ptr_type::make_rawptr(fd)) { }
  virtual int get() const { return ptr->value.get(); }
  size_t refcnt$z() const { return count.refcnt$z(); }
  void incref$z() const { count.incref$z(); }
  void decref$z() const {
    if (count.decref$z()) {
      this->~file_st();
      this->deallocate(this);
    }
  }
  static file_st *allocate() {
    return pxcrt::allocate_single<file_st>();
  }
  static void deallocate(file_st const *ptr) {
    pxcrt::deallocate_single<file_st>(ptr);
  }
  mutable pxcrt::stcount count;
};

struct file_mt : public file {
  typedef ::pxcrt::rcptr< pxcrt::tircval<file_mt_rep> > ptr_type;
  ptr_type ptr;
  file_mt(int fd) : ptr(ptr_type::make_rawptr(fd)) { }
  virtual int get() const { return ptr->value.get(); }
  size_t refcnt$z() const { return count.refcnt$z(); }
  void incref$z() const { count.incref$z(); }
  void decref$z() const {
    if (count.decref$z()) {
      this->~file_mt();
      this->deallocate(this);
    }
  }
  /* lock/unlock are no-op */
  void lockex$z() const { }
  void unlockex$z() const { }
  void locksh$z() const { }
  void unlocksh$z() const { }
  /* does not implement wait/notify */
  static file_mt *allocate() {
    return pxcrt::allocate_single<file_mt>();
  }
  static void deallocate(file_mt const *ptr) {
    pxcrt::deallocate_single<file_mt>(ptr);
  }
  mutable pxcrt::mtcount count;
};

};
;

extern "functions" inline
namespace pxcrt {

static inline bt_int file_fileno(file const& f)
{
  return f.get();
}

file_st make_file_st(int fd); /* can be called from other io::* namespaces */
file_mt make_file_mt(int fd); /* can be called from other io::* namespaces */

};
;

extern "implementation" inline
namespace pxcrt {

typedef int errno_t;

bt_int io_open_fd(io const& iop, cstrref const& fn, int flags, mode_t md)
{
  PXCRT_ALLOCA_NTSTRING(fn_nt, fn);
#ifdef PXC_POSIX
  return ::open(fn_nt.get(), flags, md);
#else
  bt_int r = -1;
  errno = ::_sopen_s(&r, fn_nt.get(), flags, 0, md);
  return r;
#endif
}

file_st io_make_file_st(io const& iop, bt_int fd)
{
  return make_file_st(fd);
}

file_mt io_make_file_mt(io const& iop, bt_int fd)
{
  return make_file_mt(fd);
}

file_st make_file_st(bt_int fd)
{
  PXC_TRY {
    file_st r(fd); /* throws */
    return r;
  } PXC_CATCH(...) {
    if (fd >= 2) {
      file_st_rep f(fd); /* closes fd */
    }
    PXC_RETHROW;
  }
}

file_mt make_file_mt(bt_int fd)
{
  PXC_TRY {
    file_mt r(fd); /* throws */
    return r;
  } PXC_CATCH(...) {
    if (fd >= 2) {
      file_mt_rep f(fd); /* closes fd */
    }
    PXC_RETHROW;
  }
}

errno_t file_read_impl(file const& f, bt_string& buf, size_t& len)
{
  int const fd = f.get();
  bt_size_t sz = len;
  bt_size_t osz = buf.size();
  void *const ptr = buf.reserve_back<1>(sz);
#ifdef PXC_POSIX
  if (sz > SSIZE_MAX) {
    sz = SSIZE_MAX;
  }
  const pxcrt::bt_ssize_t rlen = ::read(fd, ptr, sz);
#else
  if (sz > UINT_MAX) {
    sz = UINT_MAX;
  }
  const pxcrt::bt_ssize_t rlen = ::_read(fd, ptr, (unsigned)sz);
#endif
  if (rlen < 0) {
    return errno;
  }
  buf.rawarr_set_valid_len(osz + rlen);
  len = rlen;
  return 0;
}

errno_t file_write_impl(file const& f, cstrref const& buf, size_t& len_r)
{
  int const fd = f.get();
  bt_size_t sz = buf.size();
  const unsigned char *const ptr = buf.rawarr();
#ifdef PXC_POSIX
  if (sz > SSIZE_MAX) {
    sz = SSIZE_MAX;
  }
  const pxcrt::bt_ssize_t wlen = ::write(fd, ptr, sz);
#else
  if (sz > UINT_MAX) {
    sz = UINT_MAX;
  }
  const pxcrt::bt_ssize_t wlen = ::_write(fd, ptr, (unsigned)sz);
#endif
  if (wlen < 0) {
    return errno;
  }
  len_r = wlen;
  return 0;
}

errno_t file_lseek_impl(file const& f, off_t& offset, int whence)
{
  int const fd = f.get();
#ifdef PXC_POSIX
  off_t r = ::lseek(fd, offset, whence);
#else
  off_t r = ::_lseeki64(fd, offset, whence);
#endif
  if (r == (off_t)-1) {
    offset = 0;
    return errno;
  }
  offset = r;
  return 0;
}

int /* errno_t */ file_st_close(file_st& f)
{
  int const fd = f.ptr->value.fd;
  f.ptr->value.fd = -1;
#ifdef PXC_POSIX
  int const rv = ::close(fd);
#else
  int const rv = ::_close(fd);
#endif
  return rv == 0 ? 0 : errno;
}

errno_t io_stat(io const& iop, cstrref const& fn, pxcrt::statbuf& buf)
{
  PXCRT_ALLOCA_NTSTRING(fn_nt, fn);
#ifdef PXC_POSIX
  const int e = ::stat(fn_nt.get(), &buf);
#else
  const int e = ::_stat(fn_nt.get(), &buf);
#endif
  if (e != 0) {
    return errno;
  }
  return 0;
}

::pxcrt::pxcvarray<file_mt> io_pipe_internal(::pxcrt::io const& sys,
  int& err_r)
{
  int fds[2];
#ifdef PXC_POSIX
  const int e = ::pipe(fds);
#else
  const int e = ::_pipe(fds, 4096, 0);
#endif
  if (e != 0) {
    err_r = errno;
    fds[0] = fds[1] = -1;
  }
  ::pxcrt::pxcvarray<file_mt> r;
  if (e == 0) {
    r.push_back(make_file_mt(fds[0]));
    r.push_back(make_file_mt(fds[1]));
  }
  return r;
}

};
;

