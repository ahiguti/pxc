namespace io::file;
public import numeric::integral -;
public import container::string -;
public import container::array -;
public import pointer -;
public import io -;
public import io::errno -;
public import meta::common m;
public import error;

public multithreaded extern "pxcio::file_impl" "linear"
  struct file(ioptr const& iop, cstrref const& fn, open_flags_t flags,
    mode_t mode, errno_eh& eh) { }
public macro fileptr tptr{file};

public tsvaluetype extern "::off_t" "extint" struct off_t { }        //SQUAD?
public tsvaluetype extern "::dev_t" "extuint" struct dev_t { }       //UQUAD
public tsvaluetype extern "::ino_t" "extuint" struct ino_t { }       //ULONGWORD
public tsvaluetype extern "::mode_t " "extbitmask" struct mode_t { } //U32
public tsvaluetype extern "::nlink_t" "extuint" struct nlink_t { }   //UWORD
public tsvaluetype extern "::uid_t" "extuint" struct uid_t { }       //U32
public tsvaluetype extern "::gid_t" "extuint" struct gid_t { }       // U32
public tsvaluetype extern "::blksize_t" "extint" struct blksize_t { }//SLONGWORD
public tsvaluetype extern "::blkcnt_t" "extint" struct blkcnt_t { }  //SQUAD?
public tsvaluetype extern "::time_t" "extint" struct time_t { }      //SLONG
public tsvaluetype extern "::ssize_t" "extint" struct ssize_t { }    //SWORD?

public tsvaluetype extern "int" "extbitmask" struct open_flags_t { }
public tsvaluetype extern "int" "extenum" struct whence_t { }

public tsvaluetype extern "pxcio::statbuf" struct statbuf {
  dev_t st_dev;
  ino_t st_ino;
  mode_t st_mode;
  nlink_t st_nlink;
  uid_t st_uid;
  gid_t st_gid;
  dev_t st_rdev;
  off_t st_size;
  blksize_t st_blksize;
  blkcnt_t st_blocks;
  time_t st_atime;
  time_t st_mtime;
  time_t st_ctime;
}

public extern "O_RDONLY"	open_flags_t O_RDONLY;
public extern "O_WRONLY"	open_flags_t O_WRONLY;
public extern "O_RDWR"		open_flags_t O_RDWR;
public extern "O_CREAT"		open_flags_t O_CREAT;
public extern "O_EXCL"		open_flags_t O_EXCL;
public extern "O_TRUNC"		open_flags_t O_TRUNC;
public extern "O_APPEND"	open_flags_t O_APPEND;
public extern "O_NONBLOCK"	open_flags_t O_NONBLOCK;
public extern "O_SYNC"		open_flags_t O_SYNC;
public extern "O_FSYNC"		open_flags_t O_FSYNC;
public extern "O_ASYNC"		open_flags_t O_ASYNC;

public extern "SEEK_SET"	whence_t SEEK_SET;
public extern "SEEK_CUR"	whence_t SEEK_CUR;
public extern "SEEK_END"	whence_t SEEK_END;

public extern "S_IRWXU"		mode_t S_IRWXU;
public extern "S_IRUSR"		mode_t S_IRUSR;
public extern "S_IWUSR"		mode_t S_IWUSR;
public extern "S_IXUSR"		mode_t S_IXUSR;
public extern "S_IRWXG"		mode_t S_IRWXG;
public extern "S_IRGRP"		mode_t S_IRGRP;
public extern "S_IWGRP"		mode_t S_IWGRP;
public extern "S_IXGRP"		mode_t S_IXGRP;
public extern "S_IRWXO"		mode_t S_IRWXO;
public extern "S_IROTH"		mode_t S_IROTH;
public extern "S_IWOTH"		mode_t S_IWOTH;
public extern "S_IXOTH"		mode_t S_IXOTH;

public threaded extern "pxcio::file_read" function
  size_t file_read(file& f, string& buf, size_t len, errno_eh& eh);
public threaded extern "pxcio::file_write" function
  size_t file_write(file& f, cstrref const& buf, errno_eh& eh);
public threaded extern "pxcio::file_lseek" function
  off_t file_lseek(file& f, off_t offset, whence_t whence,
    errno_eh& eh);

public threaded extern "pxcio::io_stat" function
  void io_stat(ioptr const& iop, cstrref const& fn, statbuf& buf,
    errno_eh& eh);
public threaded extern "pxcio::io_sleep" function
  uint io_sleep(ioptr const& iop, uint sec);
public threaded extern "pxcio::io_usleep" function
  uint io_usleep(ioptr const& iop, uint usec);

public threaded function {t}
size_t stream_read_all(t& f, string& buf, errno_eh& eh)
{
  size_t r = 0;
  while (true) {
    size_t const rlen = f.read(buf, 16384, eh);
    if (rlen == 0) { break; }
    r += rlen;
  }
  return r;
}
public threaded function {t}
size_t stream_write_all(t& f, cstrref const& buf, errno_eh& eh)
{
  size_t curpos = 0;
  size_t endpos = buf.size();
  while (curpos != endpos) {
    size_t const wlen = f.write(buf[curpos .. endpos], eh);
    if (wlen == 0) { break; }
    curpos += wlen;
  }
  return curpos;
}

public threaded function
size_t file_read_all(file& f, string& buf, errno_eh& eh)
{
  return stream_read_all(f, buf, eh);
}
public threaded function
size_t file_write_all(file& f, cstrref const& buf, errno_eh& eh)
{
  return stream_write_all(f, buf, eh);
}

public threaded function
size_t io_read_file(ioptr const& iop, cstrref const& fn,
  string& buf, errno_eh& eh)
{
  buf.clear();
  file f = file(iop, fn, O_RDONLY, 0, eh);
  return f.read_all(buf, eh);
}
public threaded function
size_t io_write_file(ioptr const& iop, cstrref const& fn, cstrref const& buf,
  errno_eh& eh)
{
  file f = file(iop, fn, O_WRONLY | O_CREAT | O_TRUNC,
    S_IRWXU | S_IRWXG | S_IRWXO, eh);
  return f.write_all(buf, eh);
}

extern "type" inline
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/stat.h>
#include <unistd.h>
namespace error$n { struct error_handler$s$tp1$io$$errno$n$$errno_t$s; };
namespace pxcio {
using namespace pxcrt;
typedef struct ::stat statbuf;
typedef int errno_t;
struct auto_file {
  auto_file(int fd) : fd(fd) { }
  ~auto_file() { if (fd > 2) close(fd); } /* don't close stdin/out/err */
  int get() const { return fd; }
private:
  const int fd;
  auto_file(const auto_file&);
  auto_file& operator =(const auto_file&);
};
typedef ::error$n::error_handler$s$tp1$io$$errno$n$$errno_t$s errno_eh;
struct file_impl : public auto_file {
  file_impl(ioptr const& iop, cstrref const& fn, int flags, ::mode_t md,
    errno_eh& eh);
  file_impl(ioptr const& iop, int fd); /* must not be used from pxc */
};
};

extern "fdecl" inline
namespace pxcio {
size_t file_read_impl(int fd, bt_string& buf, size_t len, errno_eh& eh);
size_t file_write_impl(int fd, cstrref const& buf, errno_eh& eh);
off_t file_lseek_impl(int fd, ::off_t offset, int whence, errno_eh& eh);
inline void ioeh_set(errno_eh& eh, int e) { eh.set$f(e); }
};

extern "fdef" inline
namespace pxcio {
#include <stdlib.h>
#include <limits.h>
#include <string>
int file_open_impl(cstrref const& fn, int flags, ::mode_t md)
{
  PXCRT_ALLOCA_NTSTRING(fn_nt, fn);
  int fd = ::open(fn_nt.get(), flags, md);
  return fd;
}
file_impl::file_impl(ioptr const& iop, cstrref const& fn,
  int flags, ::mode_t md, errno_eh& eh)
  : auto_file(file_open_impl(fn, flags, md))
{
  if (get() < 0) {
    ioeh_set(eh, errno);
  }
}
file_impl::file_impl(ioptr const& iop, int fd)
  : auto_file(fd)
{
}
size_t file_read_impl(int fd, bt_string& buf, size_t len, errno_eh& eh)
{
  bt_size_t sz = len;
  if (sz > SSIZE_MAX) {
    sz = SSIZE_MAX;
  }
  bt_size_t osz = buf.size();
  void *const ptr = buf.reserve_back<1>(sz);
  const ssize_t rlen = ::read(fd, ptr, sz);
  if (rlen < 0) {
    ioeh_set(eh, errno);
    return 0;
  }
  buf.rawarr_set_valid_len(osz + rlen);
  return rlen;
}
size_t file_read(file_impl& f, bt_string& buf, size_t len, errno_eh& eh)
{
  return file_read_impl(f.get(), buf, len, eh);
}
size_t file_write_impl(int fd, cstrref const& buf, errno_eh& eh)
{
  bt_size_t sz = buf.size();
  if (sz > SSIZE_MAX) {
    sz = SSIZE_MAX;
  }
  const unsigned char *const ptr = buf.rawarr();
  const ssize_t wlen = ::write(fd, ptr, sz);
  if (wlen < 0) {
    ioeh_set(eh, errno);
    return 0;
  }
  return wlen;
}
size_t file_write(file_impl& f, cstrref const& buf, errno_eh& eh)
{
  return file_write_impl(f.get(), buf, eh);
}
off_t file_lseek_impl(int fd, ::off_t offset, int whence, errno_eh& eh)
{
  off_t r = ::lseek(fd, offset, whence);
  if (r == (off_t)-1) {
    ioeh_set(eh, errno);
    return 0;
  }
  return r;
}
off_t file_lseek(file_impl& f, ::off_t offset, int whence, errno_eh& eh)
{
  return file_lseek_impl(f.get(), offset, whence, eh);
}
void io_stat(ioptr const& iop, cstrref const& fn, pxcio::statbuf& buf,
  errno_eh& eh)
{
  PXCRT_ALLOCA_NTSTRING(fn_nt, fn);
  const int e = ::stat(fn_nt.get(), &buf);
  if (e != 0) {
    ioeh_set(eh, errno);
    return;
  }
}
bt_uint io_sleep(ioptr const& iop, bt_uint sec)
{
  return ::sleep(sec);
}
bt_uint io_usleep(ioptr const& iop, bt_uint usec)
{
  return ::usleep(usec);
}
};

