namespace io::file;
public import numeric::integral -;
public import container::string -;
public import container::array -;
public import pointer -;
public import io -;
public import io::errno -;
public import meta::common m;

public multithreaded struct extern "pxcio::file" "nodefault" file { }
  /* while file is implemented as an immutable pointer, it is defiend
   * as 'multithreaded' instead of 'tsvaluetype'. pxc assumes immuable
   * pointers can not have any side effects, and 'file' has side
   * effects. */

public tsvaluetype struct extern "::off_t" "extint" off_t { }        //SQUAD?
public tsvaluetype struct extern "::dev_t" "extuint" dev_t { }       //UQUAD
public tsvaluetype struct extern "::ino_t" "extuint" ino_t { }       //ULONGWORD
public tsvaluetype struct extern "::mode_t " "extbitmask" mode_t { } //U32
public tsvaluetype struct extern "::nlink_t" "extuint" nlink_t { }   //UWORD
public tsvaluetype struct extern "::uid_t" "extuint" uid_t { }       //U32
public tsvaluetype struct extern "::gid_t" "extuint" gid_t { }       // U32
public tsvaluetype struct extern "::blksize_t" "extint" blksize_t { }//SLONGWORD
public tsvaluetype struct extern "::blkcnt_t" "extint" blkcnt_t { }  //SQUAD?
public tsvaluetype struct extern "::time_t" "extint" time_t { }      //SLONG
public tsvaluetype struct extern "::ssize_t" "extint" ssize_t { }    //SWORD?
public tsvaluetype struct extern "int" "extbitmask" open_flags_t { }
public tsvaluetype struct extern "int" "extenum" whence_t { }

public tsvaluetype struct extern "pxcio::statbuf" statbuf {
  dev_t st_dev;
  ino_t st_ino;
  mode_t st_mode;
  nlink_t st_nlink;
  uid_t st_uid;
  gid_t st_gid;
  dev_t st_rdev;
  off_t st_size;
  blksize_t st_blksize;
  blkcnt_t st_blocks;
  time_t st_atime;
  time_t st_mtime;
  time_t st_ctime;
}

public extern "O_RDONLY"	open_flags_t O_RDONLY;
public extern "O_WRONLY"	open_flags_t O_WRONLY;
public extern "O_RDWR"		open_flags_t O_RDWR;
public extern "O_CREAT"		open_flags_t O_CREAT;
public extern "O_EXCL"		open_flags_t O_EXCL;
public extern "O_TRUNC"		open_flags_t O_TRUNC;
public extern "O_APPEND"	open_flags_t O_APPEND;
public extern "O_NONBLOCK"	open_flags_t O_NONBLOCK;
public extern "O_SYNC"		open_flags_t O_SYNC;
public extern "O_FSYNC"		open_flags_t O_FSYNC;
public extern "O_ASYNC"		open_flags_t O_ASYNC;
public extern "SEEK_SET"	whence_t SEEK_SET;
public extern "SEEK_CUR"	whence_t SEEK_CUR;
public extern "SEEK_END"	whence_t SEEK_END;
public extern "S_IRWXU"		mode_t S_IRWXU;
public extern "S_IRUSR"		mode_t S_IRUSR;
public extern "S_IWUSR"		mode_t S_IWUSR;
public extern "S_IXUSR"		mode_t S_IXUSR;
public extern "S_IRWXG"		mode_t S_IRWXG;
public extern "S_IRGRP"		mode_t S_IRGRP;
public extern "S_IWGRP"		mode_t S_IWGRP;
public extern "S_IXGRP"		mode_t S_IXGRP;
public extern "S_IRWXO"		mode_t S_IRWXO;
public extern "S_IROTH"		mode_t S_IROTH;
public extern "S_IWOTH"		mode_t S_IWOTH;
public extern "S_IXOTH"		mode_t S_IXOTH;

public threaded function extern "pxcio::io_open"   file io_open(io const& iop, cstrref const& fn, open_flags_t flags,
    mode_t md, errno_t& e_r);
public threaded function extern "pxcio::file_read"   size_t file_read(file const& f, string& buf, size_t len, errno_t& e_r);
public threaded function extern "pxcio::file_write"   size_t file_write(file const& f, cstrref const& buf, errno_t& e_r);
public threaded function extern "pxcio::file_lseek"   off_t file_lseek(file const& f, off_t offset, whence_t whence, errno_t& e_r);
public threaded function extern "pxcio::io_stat"   void io_stat(io const& iop, cstrref const& fn, statbuf& buf, errno_t& e_r);
public threaded function extern "pxcio::io_sleep"   uint io_sleep(io const& iop, uint sec);
public threaded function extern "pxcio::io_usleep"   uint io_usleep(io const& iop, uint usec);

public threaded function
size_t file_read_all(file const& f, string& buf, errno_t& e_r)
{
  size_t r = 0;
  while (true) {
    size_t const rlen = file_read(f, buf, 16384, e_r);
    if (rlen == 0) { break; }
    r += rlen;
  }
  return r;
}
public threaded function
size_t file_write_all(file const& f, cstrref const& buf, errno_t& e_r)
{
  size_t curpos = 0;
  size_t endpos = buf.size();
  while (curpos != endpos) {
    size_t const wlen = file_write(f, buf[curpos .. endpos], e_r);
    if (wlen == 0) { break; }
    curpos += wlen;
  }
  return curpos;
}

public threaded function
size_t io_read_file(io const& iop, cstrref const& fn, string& buf, errno_t& e_r)
{
  buf.clear();
  file f = io_open(iop, fn, O_RDONLY, 0, e_r);
  if (e_r != errno_t()) {
    return 0;
  }
  return file_read_all(f, buf, e_r);
}
public threaded function
size_t io_write_file(io const& iop, cstrref const& fn, cstrref const& buf,
  errno_t& e_r)
{
  file f = io_open(iop, fn, O_WRONLY | O_CREAT | O_TRUNC,
    S_IRWXU | S_IRWXG | S_IRWXO, e_r);
  if (e_r != errno_t()) {
    return 0;
  }
  return file_write_all(f, buf, e_r);
}

extern "types" inline
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/stat.h>
#include <unistd.h>
namespace pxcio {
using namespace pxcrt;
typedef struct ::stat statbuf;
typedef int errno_t;
struct file_rep {
  file_rep(int fd) : fd(fd) { }
  ~file_rep() { if (fd > 2) close(fd); } /* don't close stdin/out/err */
  int get() const { return fd; }
private:
  const int fd;
  file_rep(const file_rep&);
  file_rep& operator =(const file_rep&);
};
typedef ::pxcrt::rcptr< pxcrt::tircval<file_rep> > file;
};
;

extern "functions" inline
namespace pxcio {
inline void errno_set(errno_t& e_r, int e) { if (e_r == 0) { e_r = e; } }
file create_file(int fd);
};
;

extern "implementation" inline
namespace pxcio {
#include <stdlib.h>
#include <limits.h>
#include <string>
int file_open_impl(cstrref const& fn, int flags, ::mode_t md)
{
  if (fn.size() == 1) {
    if (fn[0] == '0') { return 0; }
    if (fn[0] == '1') { return 1; }
    if (fn[0] == '2') { return 2; }
  }
  PXCRT_ALLOCA_NTSTRING(fn_nt, fn);
  int fd = ::open(fn_nt.get(), flags, md);
  return fd;
}
file create_file(int fd)
{
  try {
    tircval<file_rep> *p = new tircval<file_rep>(fd); /* throw */
    file r(p);
    return r;
  } catch (...) {
    if (fd < 2) {
      file_rep f(fd); /* closes fd */
    }
    throw;
  }
}
file io_open(io const& iop, cstrref const& fn, int flags, ::mode_t md,
  errno_t& e_r)
{
  const int fd = file_open_impl(fn, flags, md);
  if (fd < 0) {
    errno_set(e_r, errno);
  }
  return create_file(fd);
}
size_t file_read(file const& f, bt_string& buf, size_t len, errno_t& e_r)
{
  int const fd = f->value$z.get();
  bt_size_t sz = len;
  if (sz > SSIZE_MAX) {
    sz = SSIZE_MAX;
  }
  bt_size_t osz = buf.size();
  void *const ptr = buf.reserve_back<1>(sz);
  const ssize_t rlen = ::read(fd, ptr, sz);
  if (rlen < 0) {
    errno_set(e_r, errno);
    return 0;
  }
  buf.rawarr_set_valid_len(osz + rlen);
  return rlen;
}
size_t file_write(file const& f, cstrref const& buf, errno_t& e_r)
{
  int const fd = f->value$z.get();
  bt_size_t sz = buf.size();
  if (sz > SSIZE_MAX) {
    sz = SSIZE_MAX;
  }
  const unsigned char *const ptr = buf.rawarr();
  const ssize_t wlen = ::write(fd, ptr, sz);
  if (wlen < 0) {
    errno_set(e_r, errno);
    return 0;
  }
  return wlen;
}
off_t file_lseek(file const& f, ::off_t offset, int whence, errno_t& e_r)
{
  int const fd = f->value$z.get();
  off_t r = ::lseek(fd, offset, whence);
  if (r == (off_t)-1) {
    errno_set(e_r, errno);
    return 0;
  }
  return r;
}
void io_stat(io const& iop, cstrref const& fn, pxcio::statbuf& buf,
  errno_t& e_r)
{
  PXCRT_ALLOCA_NTSTRING(fn_nt, fn);
  const int e = ::stat(fn_nt.get(), &buf);
  if (e != 0) {
    errno_set(e_r, errno);
    return;
  }
}
bt_uint io_sleep(io const& iop, bt_uint sec)
{
  return ::sleep(sec);
}
bt_uint io_usleep(io const& iop, bt_uint usec)
{
  return ::usleep(usec);
}
};
;

