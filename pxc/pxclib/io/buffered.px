namespace io::buffered;
public import numeric::integral -;
public import container::string -;
public import io::errno -;

threaded function {t, func} errno_t stream_foreach(t const& stream,
  uchar delim, size_t read_size)
{
  string buffer;
  bool cont_flag = true;
  while (cont_flag) {
    size_t pos = buffer.size();
    size_t rlen = read_size;
    const e = stream.read(buffer, rlen);
    if (e != EOK) {
      return e;
    }
    if (rlen == 0) {
      break;
    }
    while (cont_flag) {
      size_t const p = buffer.find(pos, delim);
      if (p == buffer.size()) {
	break;
      }
      cstrref sr = buffer[pos .. p + 1];
      cont_flag = func(sr);
      pos = p + 1;
    }
    buffer.erase(0, pos);
  }
  return EOK;
}

