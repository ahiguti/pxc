public threaded namespace io::errno "use-unsafe";
public import numeric::integral -;
public import container::array -;
public import text::serialize -;
public import meta m;
public import io +;
public import exception;
public import pointer;

/* public */

public tsvaluetype struct extern "int" "extenum" errno_t { }
public extern "0" errno_t EOK;

private metafunction errno_values {
  "E2BIG", "EACCES", "EADDRINUSE", "EADDRNOTAVAIL", "EAFNOSUPPORT",
  "EAGAIN", "EALREADY", "EBADF", "EBADMSG", "EBUSY", "ECANCELED",
  "ECHILD", "ECONNABORTED", "ECONNREFUSED", "ECONNRESET", "EDEADLK",
  "EDESTADDRREQ", "EDOM", "EDQUOT", "EEXIST", "EFAULT", "EFBIG",
  "EHOSTUNREACH", "EIDRM", "EILSEQ", "EINPROGRESS", "EINTR", "EINVAL",
  "EIO", "EISCONN", "EISDIR", "ELOOP", "EMFILE", "EMLINK", "EMSGSIZE",
  "EMULTIHOP", "ENAMETOOLONG", "ENETDOWN", "ENETRESET", "ENETUNREACH",
  "ENFILE", "ENOBUFS", "ENODATA", "ENODEV", "ENOENT", "ENOEXEC", "ENOLCK",
  "ENOLINK", "ENOMEM", "ENOMSG", "ENOPROTOOPT", "ENOSPC", "ENOSR",
  "ENOSTR", "ENOSYS", "ENOTCONN", "ENOTDIR", "ENOTEMPTY", "ENOTSOCK",
  "ENOTSUP", "ENOTTY", "ENXIO", "EOPNOTSUPP", "EOVERFLOW", "EPERM",
  "EPIPE", "EPROTO", "EPROTONOSUPPORT", "EPROTOTYPE", "ERANGE", "EROFS",
  "ESPIPE", "ESRCH", "ESTALE", "ETIME", "ETIMEDOUT", "ETXTBSY",
  "EWOULDBLOCK", "EXDEV"
};

expand (sym: errno_values) {
public extern "%" errno_t sym;
}

public tsvaluetype union {t} errno_or_value {
  public errno_t errno;
  public t value;
}

public threaded function
errno_t io_get_errno(io const& sys)
{
  extern "emit" "return errno";
  return EOK; /* dummy */
}

public threaded function
void io_set_errno(io const& sys, errno_t e)
{
  extern "emit" "errno = e$";
}

public threaded function
void errno_t_append_to_string(errno_t e, string mutable& s)
{
  metafunction code m::concat{
    "const char *s = 0;\n",
    m::fold{
      errno_values,
      metafunction{x, y} m::concat{x,
	m::cond{m::eq{x, ""}, "if (e$ == ", "else if (e$ == "}, y,
	") { s = \"", y, "\"; }\n"},
      ""},
    "if (s != 0) {\n",
    "s$.append(reinterpret_cast<const unsigned char *>(s), std::strlen(s));\n",
    "} else {\n",
    "char buf[32];\n",
    "int len = snprintf(buf, sizeof(buf), \"errno(%d)\", ",
    "  static_cast<int>(e$));\n",
    "s$.append(reinterpret_cast<unsigned char *>(buf), len);\n",
    "}"};
  extern "emit" code;
}

public threaded function
void errno_t_check(errno_t e)
{
  if (e != EOK) {
    throw exception::unexpected_value_template{errno_t}(to_string(e));
  }
}

/* private */

extern "functions" inline
#ifdef PXC_WINDOWS
#define EDQUOT -1
#define EMULTIHOP -1
#define ESTALE -1
#endif
;

extern "implementation" inline
#include <errno.h>
;

