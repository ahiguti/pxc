namespace string::split;
import numeric::integral -;
import container::string -;
import string::conversion -;
import meta::common m;
import meta::vararg va;
import meta::family mf;

public threaded function {delim, tlist} void
string_split(expand(split_arg_decls{tlist}))
{ 
  size_t pos = 0;
  expand(arg, idx : va::arg_names{m::size{tlist}}) {
    if (m::ne{idx, 0}) {
      size_t const p = a0.find(pos, delim);
      arg = from_string{m::at0{m::at{tlist, idx}}}(a0[pos .. p]);
      if (m::ne{idx, m::sub{m::size{tlist}, 1}}) {
	pos = (p != a0.size()) ? (p + 1) : p;
      }
    }
  }
}

public threaded function {delim, tlist} string
string_join(expand(va::arg_decls_bycref{tlist}))
{
  string s;
  expand (a, i: va::arg_names{m::size{tlist}}) {
    { 
      metafunction t m::at0{m::at{tlist, i}};
      if (m::and{m::ne{i, 0}, m::ne{delim, ""}}) {
        s.append(delim);
      }
      if (mf::is_string_family_type{t}) {
        s.append(a);
      } else {
        string::conversion::serialize_to_string{t}(a, s);
      }
    }
  }
  return s;
}

public threaded function {tlist} void
string_concat(expand(concat_arg_decls{tlist}))
{
  expand (a, i: va::arg_names{m::size{tlist}}) {
    if (m::ne{i, 0}) { 
      metafunction t m::at0{m::at{tlist, i}};
      if (mf::is_string_family_type{t}) {
        a0.append(a);
      } else {
        string::conversion::serialize_to_string{t}(a, a0);
      }
    }
  }
}

private metafunction split_arg_decls{tlist}
  m::map{
    m::seq{m::size{tlist}},
    metafunction{i}
      m::list{
	m::concat{"a", i},            /* name */
	m::at0{m::at{tlist, i}},      /* type */
	1,                            /* byref */
	m::cond{m::ge{i, 1}, 1, 0}}}; /* mutable */
private metafunction concat_arg_decls{tlist}
  m::map{
    m::seq{m::size{tlist}},
    metafunction{i}
      m::list{
	m::concat{"a", i},            /* name */
	m::at0{m::at{tlist, i}},      /* type */
	1,                            /* byref */
	m::cond{m::ge{i, 1}, 0, 1}}}; /* mutable */

