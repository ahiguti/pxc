namespace string::serialize;
public import numeric::integral -;
public import container::string -;
public import meta::common m;
public import meta::family mf;

public threaded function {tpl, t} void serialize(t const& x,
  m::local{tpl, "target_type"}& o)
{
  metafunction fam m::family{t};
  if (m::not{m::eq{m::local{tpl, "specialized_func", t}, 0}}) {
    m::local{tpl, "specialized_func", t}(x, o);
  } else if (mf::is_array_family{fam}) {
    m::local{tpl, "array_begin"}(o);
    for (size_t i, m::at{t, 0} v : x) {
      if (i != 0) {
	m::local{tpl, "array_sep"}(o);
      }
      serialize{tpl, m::at{t, 0}}(v, o);
    }
    m::local{tpl, "array_end"}(o);
  } else if (mf::is_map_family{fam}) {
    m::local{tpl, "map_begin"}(o);
    bool is_first = true;
    for (m::at{t, 0} k, m::at{t, 1} v : x) {
      if (is_first) {
	is_first = false;
      } else {
	m::local{tpl, "map_sep"}(o);
      }
      m::local{tpl, "map_entry_begin"}(o);
      serialize{tpl, m::at{t, 0}}(k, o);
      m::local{tpl, "map_entry_sep"}(o);
      serialize{tpl, m::at{t, 1}}(v, o);
      m::local{tpl, "map_entry_end"}(o);
    }
    m::local{tpl, "map_end"}(o);
  } else if (mf::is_pointer_family{fam}) {
    m::local{tpl, "pointer_begin"}(o);
    serialize{tpl, m::at{t, 0}}(*x, o);
    m::local{tpl, "pointer_end"}(o);
  } else if (mf::is_struct_family{fam}) {
    m::local{tpl, "struct_begin"}(o);
    expand (fld, idx : m::field_names{t}) {
      {
	if (idx != 0) {
	  m::local{tpl, "struct_sep"}(o);
	}
	m::local{tpl, "struct_entry_begin"}(o);
	m::local{tpl, "struct_field_name"}(m::to_string{fld}, o);
	m::local{tpl, "struct_entry_sep"}(o);
	serialize{tpl, m::at{m::field_types{t}, idx}}(x.fld, o);
	m::local{tpl, "struct_entry_end"}(o);
      }
    }
    m::local{tpl, "struct_end"}(o);
  } else if (mf::is_union_family{fam}) {
    m::local{tpl, "union_begin"}(o);
    expand (fld, idx : m::field_names{t}) {
      if (case x.fld) {
	m::local{tpl, "union_field_name"}(m::to_string{fld}, o);
	m::local{tpl, "union_entry_sep"}(o);
	serialize{tpl, m::at{m::field_types{t}, idx}}(x.fld, o);
      }
    }
    m::local{tpl, "union_end"}(o);
  } else {
    m::local{tpl, "unknown", t}(x, o);
  }
}

