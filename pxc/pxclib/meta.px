namespace meta;

public struct extern "@error" "@error" {x} error { }

public struct extern "@is_type" "@is_type" {x} is_type { }
public struct extern "@is_function" "@is_function" {x} is_function{ }
public struct extern "@is_member_function" "@is_member_function" {x}
  is_member_function{ }
public struct extern "@is_const_member_function" "@is_const_member_function"
  {x} is_const_member_function{ }
public struct extern "@is_metafunction" "@is_metafunction" {x}
  is_metafunction { }
public struct extern "@is_int" "@is_int" {x} is_int { }
public struct extern "@is_string" "@is_string" {x} is_string { }
public struct extern "@is_list" "@is_list" {x} is_list { }
public struct extern "@eq" "@eq" {x, y} eq { }
public struct extern "@not" "@not" {x} not { }

public struct extern "@imports" "@imports" {ns} imports { }
public struct extern "@functions" "@functions" {ns} functions { }
public struct extern "@types" "@types" {ns} types { }
public struct extern "@global_variables" "@global_variables" {ns}
  global_variables { }
  /* list{list{name, typ, byref(=0), mutable}} */

public struct extern "@local" "@local" {t, n, opt_args} local { }
public struct extern "@symbol" "@symbol" {name, opt_t} symbol { }
public struct extern "@attribute" "@attribute" {t} attribute { }
public struct extern "@family" "@family" {t} family { }
public struct extern "@nsname" "@nsname" {x} nsname { }
public struct extern "@num_tparams" "@num_tparams" {x} num_tparams { }
public struct extern "@num_targs" "@num_targs" {x} num_targs { }
public struct extern "@targs" "@targs" {x} targs { }
public struct extern "@values" "@values" {x} values { }
public struct extern "@typeof" "@typeof" {x} typeof { }

public struct extern "@rettype" "@rettype" {f} rettype { }
public struct extern "@argnum" "@argnum" {f, i} argnum { }
public struct extern "@argtype" "@argtype" {f, i} argtype { }
public struct extern "@argbyref" "@argbyref" {f, i} argbyref { }
public struct extern "@argtypes" "@argtypes" {f} argtypes { }
public struct extern "@argnames" "@argnames" {f} argnames { }
public struct extern "@args" "@args" {f} args { }
  /* list{list{name, typ, byref, mutable}} */

public struct extern "@is_copyable_type" "@is_copyable_type" {t}
  is_copyable_type { }
public struct extern "@is_asignable_type" "@is_asignable_type" {t}
  is_asignable_type { }
public struct extern "@is_polymorphic_type" "@is_polymorphic_type" {t}
  is_polymorphic_type { }
public struct extern "@inherits" "@inherits" {tderived, tbase} inherits { }

public struct extern "@field_types" "@field_types" {t} field_types { }
public struct extern "@field_names" "@field_names" {t} field_names { }
public struct extern "@fields" "@fields" {t} fields { }
  /* list{list{name, typ, byref(=0), mutable}} */
public struct extern "@member_functions" "@member_functions" {t}
  member_functions { }

public struct extern "@apply" "@apply" {mf, lst} apply { }

public struct extern "@to_int" "@to_int" {x} to_int { }
public struct extern "@to_string" "@to_string" {x} to_string { }
public struct extern "@full_string" "@full_string" {x} full_string { }

public struct extern "@concat" "@concat" {x} concat { }
public struct extern "@index" "@index" {x, y} index { }
public struct extern "@substring" "@substring" {x, i, j} substring { }
public struct extern "@subst" "@subst" {x, from, to} subst { }
public struct extern "@strlen" "@strlen" {x} strlen { }

public struct extern "@@cond" "@@cond" {c, x, y} cond { }
public struct extern "@@or" "@@or" {x, y} or { }
public struct extern "@@and" "@@and" {x, y} and { }
public struct extern "@@timing" "@@timing" {x} timing { }

public struct extern "@list" "@list" {x, y} list { }
public struct extern "@size" "@size" {x} size { }
public struct extern "@slice" "@slice" {lst, i0, i1} slice { }
public struct extern "@at" "@at" {lst, idx} at { }
public struct extern "@seq" "@seq" {x, y} seq { }
public struct extern "@map" "@map" {lists, mf, args} map { }
  /* map{list_0, ... , lst_n, func, arg_0, ... , arg_n} */
public struct extern "@fold" "@fold" {lst, mf, v0} fold { }
public struct extern "@filter" "@filter" {lst, f} filter { }
public struct extern "@join" "@join" {list_of_lists} join { }
public struct extern "@joinv" "@joinv" {lst1, lst2} joinv { }
public struct extern "@join_tail" "@join_tail" {cons} join_tail { }
public struct extern "@sort" "@sort" {lst} sort { }
public struct extern "@unique" "@unique" {lst} unique { }
public struct extern "@base" "@base" {t} base { }

public struct extern "@add" "@add" {x, y} add { }
public struct extern "@sub" "@sub" {x, y} sub { }
public struct extern "@mul" "@mul" {x, y} mul { }
public struct extern "@div" "@div" {x, y} div { }
public struct extern "@mod" "@mod" {x, y} mod { }
public struct extern "@gt" "@gt" {x, y} gt { }
public struct extern "@lt" "@lt" {x, y} lt { }

public struct extern "@csymbol" "@csymbol" {x} csymbol { }

public metafunction ne{x, y} not{eq{x, y}};
public metafunction max{x, y} cond{gt{x, y}, x, y};
public metafunction min{x, y} cond{gt{x, y}, y, x};
public metafunction ge{x, y} not{lt{x, y}};
public metafunction le{x, y} not{gt{x, y}};

public metafunction at0{lst} at{lst, 0};
public metafunction at1{lst} at{lst, 1};
public metafunction at2{lst} at{lst, 2};
public metafunction at3{lst} at{lst, 3};
public metafunction at4{lst} at{lst, 4};
public metafunction at5{lst} at{lst, 5};
public metafunction at6{lst} at{lst, 6};
public metafunction at7{lst} at{lst, 7};
public metafunction at8{lst} at{lst, 8};
public metafunction at9{lst} at{lst, 9};
public metafunction empty{lst} eq{size{lst}, 0};

public metafunction iteration_limit{f, v} iteration_limit_rec{f, v, f{v}};
  private metafunction iteration_limit_rec{f, v0, v1}
    cond{eq{v0, v1}, v0, iteration_limit_rec{f, v1, f{v1}}};

public metafunction imports_transitive{ns}
  iteration_limit{imports_rec, imports_init{ns}};
  private metafunction is_import_pub{ent} eq{at1{ent}, 0};
  private metafunction imports_name_pub{ns}
    map{filter{imports{ns}, is_import_pub}, at0};
  private metafunction imports_name{ns} map{imports{ns}, at0};
  private metafunction imports_init{ns}
    sort{unique{joinv{list{ns}, imports_name{ns}}}};
  private metafunction imports_rec{lst}
    sort{unique{joinv{lst, join{map{lst, imports_name_pub}}}}};

public metafunction field_type{t, fname}
  field_type_rec{field_types{t}, field_names{t}, fname};
  private metafunction field_type_rec{tlst, nlst, n}
    cond{eq{at0{nlst}, n},
      at0{tlst},
      field_type_rec{slice{tlst, 1}, slice{nlst, 1}, n}};

