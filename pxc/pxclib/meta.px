public threaded namespace meta "use-unsafe";

public struct extern "@error" "@error" {x} error { }

public struct extern "@is_type" "@is_type" {x} is_type { }
public struct extern "@is_interface" "@is_interface" {x} is_interface { }
public struct extern "@is_function" "@is_function" {x} is_function{ }
public struct extern "@is_member_function" "@is_member_function" {x}
  is_member_function{ }
public struct extern "@is_mutable_member_function"
  "@is_mutable_member_function" {x} is_mutable_member_function{ }
public struct extern "@is_const_member_function" "@is_const_member_function"
  {x} is_const_member_function{ }
public struct extern "@is_metafunction" "@is_metafunction" {x}
  is_metafunction { }
public struct extern "@is_int" "@is_int" {x} is_int { }
public struct extern "@is_string" "@is_string" {x} is_string { }
public struct extern "@is_list" "@is_list" {x} is_list { }
public struct extern "@eq" "@eq" {x, y} eq { } /* vararg */
public struct extern "@not" "@not" {x} not { }

public struct extern "@imports" "@imports" {ns} imports { }
public struct extern "@functions" "@functions" {ns} functions { }
public struct extern "@types" "@types" {ns} types { }
public struct extern "@global_variables" "@global_variables" {ns}
  global_variables { }
  /* {{name, typ, byref(=0), mutable}, ...} */

public struct extern "@symbol" "@symbol" {ns_or_t, name, opt_notfound_value}
  symbol { }
public struct extern "@symbol_exists" "@symbol_exists" {ns_or_t, name}
  symbol_exists { }
public struct extern "@characteristic" "@characteristic" {t, name}
  characteristic { }
public struct extern "@family" "@family" {t} family { }
public struct extern "@nameof" "@nameof" {x} nameof { }
  /* foo::bar{...} => "foo::bar" */
public struct extern "@nsof" "@nsof" {x} nsof { }
  /* foo::bar{...} => "foo" */
public struct extern "@tparam_size" "@tparam_size" {x} tparam_size { }
public struct extern "@targ_size" "@targ_size" {x} targ_size { }
public struct extern "@targs" "@targs" {x} targs { }
public struct extern "@base" "@base" {t} base { }
public struct extern "@typeof" "@typeof" {v} typeof { }
public struct extern "@context" "@context" {x} context { }

public struct extern "@values" "@values" {x} values { }

public struct extern "@ret_type" "@ret_type" {f} ret_type { }
public struct extern "@ret_byref" "@ret_byref" {f} ret_byref { }
public struct extern "@ret_mutable" "@ret_mutable" {f} ret_mutable{ }
public struct extern "@ret" "@ret" {f} ret { }
  /* {"", typ, byref, mutable} */
public struct extern "@arg_size" "@arg_size" {f, i} arg_size { }
public struct extern "@arg_type" "@arg_type" {f, i} arg_type { }
public struct extern "@arg_byref" "@arg_byref" {f, i} arg_byref { }
public struct extern "@arg_mutable" "@arg_mutable" {f, i} arg_mutable { }
public struct extern "@arg_types" "@arg_types" {f} arg_types { }
public struct extern "@arg_names" "@arg_names" {f} arg_names { }
public struct extern "@args" "@args" {f} args { }
  /* {{name, typ, byref, mutable}, ...} */

public struct extern "@is_copyable_type" "@is_copyable_type" {t}
  is_copyable_type { }
public struct extern "@is_movable_type" "@is_movable_type" {t}
  is_movable_type { }
public struct extern "@is_assignable_type" "@is_assignable_type" {t}
  is_assignable_type { }
public struct extern "@is_constructible_type" "@is_constructible_type" {t}
  is_constructible_type { }
public struct extern "@is_default_constructible_type"
  "@is_default_constructible_type" {t} is_default_constructible_type { }
public struct extern "@is_polymorphic_type" "@is_polymorphic_type" {t}
  is_polymorphic_type { }
public struct extern "@inherits" "@inherits" {tderived, tbase} inherits { }

public struct extern "@field_types" "@field_types" {t} field_types { }
public struct extern "@field_names" "@field_names" {t} field_names { }
public struct extern "@fields" "@fields" {t} fields { }
  /* {{name, typ, byref(=0), mutable}} */
public struct extern "@member_functions" "@member_functions" {t}
  member_functions { }

public struct extern "@apply" "@apply" {mf, arg} apply { } /* vararg */
public struct extern "@apply_list" "@apply_list" {mf, lst} apply_list { }

public struct extern "@to_int" "@to_int" {x} to_int { }
public struct extern "@to_string" "@to_string" {x} to_string { }
public struct extern "@full_string" "@full_string" {x} full_string { }

public struct extern "@concat" "@concat" {x, y} concat { } /* vararg */
public struct extern "@substring" "@substring" {x, i, j} substring { }
public struct extern "@subst" "@subst" {x, from, to} subst { }
public struct extern "@strlen" "@strlen" {x} strlen { }
public struct extern "@character" "@character" {c} character { }
public struct extern "@code_at" "@code_at" {s, idx} code_at { }
public struct extern "@strchr" "@strchr" {x, c} strchr { }
public struct extern "@strrchr" "@strrchr" {x, c} strrchr { }

public struct extern "@@cond" "@@cond" {c, x, y} cond { } /* vararg */
public struct extern "@@or" "@@or" {x, y} or { } /* vararg */
public struct extern "@@and" "@@and" {x, y} and { } /* vararg */

public struct extern "@@trace" "@@trace" {x} trace { }
public struct extern "@@timing" "@@timing" {x} timing { }

public struct extern "@list" "@list" {x, y} list { } /* vararg */
public struct extern "@size" "@size" {x} size { }
public struct extern "@slice" "@slice" {lst, i0, i1} slice { }
public struct extern "@at" "@at" {lst, idx} at { }
public struct extern "@seq" "@seq" {x, y} seq { }
public struct extern "@map" "@map" {lst, mf} map { }
public struct extern "@fold" "@fold" {lst, mf, v0} fold { }
public struct extern "@filter" "@filter" {lst, f} filter { }
public struct extern "@join_list" "@join_list" {lstlst, opt_sep} join_list { }
public struct extern "@join" "@join" {lst1, lst2} join { } /* vararg */
public struct extern "@reverse" "@reverse" {lst} reverse { }
public struct extern "@transpose" "@transpose" {lstlst} transpose { }
public struct extern "@sort" "@sort" {lst} sort { }
public struct extern "@unique" "@unique" {lst} unique { }
public struct extern "@list_index" "@list_index" {lst} list_index { }
public struct extern "@list_find" "@list_find" {lst, key} list_find { }

public struct extern "@add" "@add" {x, y} add { } /* vararg */
public struct extern "@sub" "@sub" {x, y} sub { }
public struct extern "@mul" "@mul" {x, y} mul { } /* vararg */
public struct extern "@div" "@div" {x, y} div { }
public struct extern "@mod" "@mod" {x, y} mod { }
public struct extern "@gt" "@gt" {x, y} gt { }
public struct extern "@lt" "@lt" {x, y} lt { }

public struct extern "@csymbol" "@csymbol" {x} csymbol { }
public struct extern "@profile" "@profile" {x} profile { }
public struct extern "@is_safe_ns" "@is_safe_ns" {x} is_safe_ns { }

public metafunction ne{x, y} not{eq{x, y}};
public metafunction max{x, y} cond{gt{x, y}, x, y};
public metafunction min{x, y} cond{gt{x, y}, y, x};
public metafunction ge{x, y} not{lt{x, y}};
public metafunction le{x, y} not{gt{x, y}};
public metafunction is_true{x} ne{x, 0};
public metafunction is_false{x} eq{x, 0};

public metafunction nil seq{0};
public metafunction at0{lst} at{lst, 0};
public metafunction at1{lst} at{lst, 1};
public metafunction at2{lst} at{lst, 2};
public metafunction at3{lst} at{lst, 3};
public metafunction at4{lst} at{lst, 4};
public metafunction at5{lst} at{lst, 5};
public metafunction at6{lst} at{lst, 6};
public metafunction at7{lst} at{lst, 7};
public metafunction at8{lst} at{lst, 8};
public metafunction at9{lst} at{lst, 9};
public metafunction empty{lst} eq{size{lst}, 0};
public metafunction first{lst} at0{lst};
public metafunction last{lst} at{lst, sub{size{lst}, 1}};

public metafunction iteration_limit{f, v} iteration_limit_rec{f, v, f{v}};
  private metafunction iteration_limit_rec{f, v0, v1}
    cond{eq{v0, v1}, v0, iteration_limit_rec{f, v1, f{v1}}};

public metafunction imports_transitive{ns}
  iteration_limit{imports_rec, imports_init{ns}};
  private metafunction is_import_pub{ent} eq{at1{ent}, 0};
  private metafunction imports_name_pub{ns}
    map{filter{imports{ns}, is_import_pub}, at0};
  private metafunction imports_name{ns} map{imports{ns}, at0};
  private metafunction imports_init{ns}
    sort{unique{join{list{ns}, imports_name{ns}}}};
  private metafunction imports_rec{lst}
    sort{unique{join{lst, join_list{map{lst, imports_name_pub}}}}};

public metafunction field_type{t, fname}
  field_type_rec{field_types{t}, field_names{t}, fname};
  private metafunction field_type_rec{tlst, nlst, n}
    cond{eq{at0{nlst}, n},
      at0{tlst},
      field_type_rec{slice{tlst, 1}, slice{nlst, 1}, n}};

public metafunction find{x, key, defval}
  cond{
    is_list{x},
      apply{
	metafunction{i}
	  cond{
	    ge{i, 0}, at1{at{x, i}}, 
	    apply{
	      metafunction{j}
		cond{ge{j, 0}, find{at1{at{x, j}}, key, defval}, defval},
	      list_find{x, "__find__"}}},
	list_find{x, key}},
    is_type{x},
      cond{
	symbol_exists{x, key}, symbol{x, key, defval},
	find{symbol{x, "__find__", nil}, key, defval}},
    defval};

public metafunction type_attribute{t, key, defval}
  find{find{t, "__attribute__", nil}, key, defval};

