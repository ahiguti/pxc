namespace type::impl::farray;
public import type::impl::array_common;

extern "type" inline
namespace array {
template <typename T, size_t len>
struct farray {
  typedef size_t size_type;
  farray() : v() { }
  bool empty() const { return len == 0; }
  size_t size() const { return len; }
  T& operator [](size_type idx) {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  const T& operator [](size_type idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  T *rawarr() { return v; }
  const T *rawarr() const { return v; }
private:
  T v[len];
};
}; // namespace array

