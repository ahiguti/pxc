namespace type::array;
public import type::builtin -;
public import type::impl::stdvector;
public import type::impl::pxcvector;
public import type::impl::farray;
public import type::impl::darray;
public import meta::builtin m;

public mtvaluetype extern "array::stdvector" "varray"
struct {t} stdvector {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type slice{t};
  public macro crange_type cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
  public extern "resize" function void resize(size_t i, t const& v);
  public extern "clear" function void clear();
  public extern "push_back" function void push_back(t const& v);
  public extern "pop_back" function t pop_back();
  public extern "append" function void append(crange_type const& v);
  public extern "reserve" function void reserve(size_t i);
}

public mtvaluetype extern "array::pxcvector" "varray"
struct {t} pxcvector {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type slice{t};
  public macro crange_type cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
  public extern "resize" function void resize(size_t i, t const& v);
  public extern "clear" function void clear();
  public extern "push_back" function void push_back(t const& v);
  public extern "pop_back" function t pop_back();
  public extern "reserve" function void reserve(size_t i);
  public extern "append" function void append(crange_type const& v);
  public extern "insert" function void insert(size_t i, crange_type const& v);
  public extern "erase" function void erase(size_t first, size_t last);
}

public tsvaluetype extern "array::farray" "farray"
struct {t, n} farray {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type slice{t};
  public macro crange_type cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
}

public tsvaluetype extern "array::darray" "darray"
struct {t} darray {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type slice{t};
  public macro crange_type cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
}

