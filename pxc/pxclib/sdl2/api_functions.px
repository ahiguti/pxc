/* This file is generated by sdl_px_apigen.pl */
public threaded namespace sdl2::api_functions "export-unsafe";
public import core::common -;
public import core::pointer::raw -;
public import core::container::raw -;
public import sdl2::api_base -;
public import sdl2::api_types -;
public import core::meta m;
public function extern "%" int IMG_Init(int flags);
public function extern "%" crawptr{SDL_version} IMG_Linked_Version();
public threaded function extern "%" rawptr{SDL_Surface} IMG_Load(ccharptr file);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadBMP_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadCUR_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadGIF_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadICO_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadJPG_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadLBM_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadPCX_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadPNG_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadPNM_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadSVG_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadTGA_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadTIF_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Texture} IMG_LoadTexture(rawptr{SDL_Renderer} renderer, ccharptr file);
public threaded function extern "%" rawptr{SDL_Texture} IMG_LoadTextureTyped_RW(rawptr{SDL_Renderer} renderer, rawptr{SDL_RWops} src, int freesrc, ccharptr type);
public threaded function extern "%" rawptr{SDL_Texture} IMG_LoadTexture_RW(rawptr{SDL_Renderer} renderer, rawptr{SDL_RWops} src, int freesrc);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadTyped_RW(rawptr{SDL_RWops} src, int freesrc, ccharptr type);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadWEBP_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadXCF_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadXPM_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_LoadXV_RW(rawptr{SDL_RWops} src);
public threaded function extern "%" rawptr{SDL_Surface} IMG_Load_RW(rawptr{SDL_RWops} src, int freesrc);
public function extern "%" void IMG_Quit();
public function extern "%" rawptr{SDL_Surface} IMG_ReadXPMFromArray(rawptr{charptr} xpm);
public function extern "%" int IMG_SaveJPG(rawptr{SDL_Surface} surface, ccharptr file, int quality);
public function extern "%" int IMG_SaveJPG_RW(rawptr{SDL_Surface} surface, rawptr{SDL_RWops} dst, int freedst, int quality);
public function extern "%" int IMG_SavePNG(rawptr{SDL_Surface} surface, ccharptr file);
public function extern "%" int IMG_SavePNG_RW(rawptr{SDL_Surface} surface, rawptr{SDL_RWops} dst, int freedst);
public function extern "%" int IMG_isBMP(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isCUR(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isGIF(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isICO(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isJPG(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isLBM(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isPCX(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isPNG(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isPNM(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isSVG(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isTIF(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isWEBP(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isXCF(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isXPM(rawptr{SDL_RWops} src);
public function extern "%" int IMG_isXV(rawptr{SDL_RWops} src);
/* public function extern "%" void SDL_AddEventWatch(); */
/* public function extern "%" void SDL_AddHintCallback(); */
/* public function extern "%" SDL_TimerID SDL_AddTimer(); */
public function extern "%" rawptr{SDL_PixelFormat} SDL_AllocFormat(Uint32 pixel_format);
public function extern "%" rawptr{SDL_Palette} SDL_AllocPalette(int ncolors);
public function extern "%" rawptr{SDL_RWops} SDL_AllocRW();
public function extern "%" int SDL_AtomicAdd(rawptr{SDL_atomic_t} a, int v);
public function extern "%" SDL_bool SDL_AtomicCAS(rawptr{SDL_atomic_t} a, int oldval, int newval);
public function extern "%" SDL_bool SDL_AtomicCASPtr(rawptr{rawptr{void}} a, rawptr{void} oldval, rawptr{void} newval);
public function extern "%" int SDL_AtomicGet(rawptr{SDL_atomic_t} a);
public function extern "%" rawptr{void} SDL_AtomicGetPtr(rawptr{rawptr{void}} a);
public function extern "%" void SDL_AtomicLock(rawptr{SDL_SpinLock} lock);
public function extern "%" int SDL_AtomicSet(rawptr{SDL_atomic_t} a, int v);
public function extern "%" rawptr{void} SDL_AtomicSetPtr(rawptr{rawptr{void}} a, rawptr{void} v);
public function extern "%" SDL_bool SDL_AtomicTryLock(rawptr{SDL_SpinLock} lock);
public function extern "%" void SDL_AtomicUnlock(rawptr{SDL_SpinLock} lock);
public function extern "%" int SDL_AudioInit(ccharptr driver_name);
public function extern "%" void SDL_AudioQuit();
public function extern "%" int SDL_AudioStreamAvailable(rawptr{SDL_AudioStream} stream);
public function extern "%" void SDL_AudioStreamClear(rawptr{SDL_AudioStream} stream);
public function extern "%" int SDL_AudioStreamFlush(rawptr{SDL_AudioStream} stream);
public function extern "%" int SDL_AudioStreamGet(rawptr{SDL_AudioStream} stream, rawptr{void} buf, int len);
public function extern "%" int SDL_AudioStreamPut(rawptr{SDL_AudioStream} stream, crawptr{void} buf, int len);
public function extern "%" int SDL_BuildAudioCVT(rawptr{SDL_AudioCVT} cvt, SDL_AudioFormat src_format, Uint8 src_channels, int src_rate, SDL_AudioFormat dst_format, Uint8 dst_channels, int dst_rate);
public function extern "%" void SDL_CalculateGammaRamp(float gamma, rawptr{Uint16} ramp);
public function extern "%" int SDL_CaptureMouse(SDL_bool enabled);
public function extern "%" void SDL_ClearError();
public function extern "%" void SDL_ClearHints();
public function extern "%" void SDL_ClearQueuedAudio(SDL_AudioDeviceID dev);
public function extern "%" void SDL_CloseAudio();
public function extern "%" void SDL_CloseAudioDevice(SDL_AudioDeviceID dev);
public function extern "%" SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);
public function extern "%" int SDL_CondBroadcast(rawptr{SDL_cond} cond);
public function extern "%" int SDL_CondSignal(rawptr{SDL_cond} cond);
public function extern "%" int SDL_CondWait(rawptr{SDL_cond} cond, rawptr{SDL_mutex} mutex);
public function extern "%" int SDL_CondWaitTimeout(rawptr{SDL_cond} cond, rawptr{SDL_mutex} mutex, Uint32 ms);
public function extern "%" int SDL_ConvertAudio(rawptr{SDL_AudioCVT} cvt);
public function extern "%" int SDL_ConvertPixels(int width, int height, Uint32 src_format, crawptr{void} src, int src_pitch, Uint32 dst_format, rawptr{void} dst, int dst_pitch);
public function extern "%" rawptr{SDL_Surface} SDL_ConvertSurface(rawptr{SDL_Surface} src, crawptr{SDL_PixelFormat} fmt, Uint32 flags);
public function extern "%" rawptr{SDL_Surface} SDL_ConvertSurfaceFormat(rawptr{SDL_Surface} src, Uint32 pixel_format, Uint32 flags);
public function extern "%" rawptr{SDL_Cursor} SDL_CreateColorCursor(rawptr{SDL_Surface} surface, int hot_x, int hot_y);
public function extern "%" rawptr{SDL_cond} SDL_CreateCond();
public function extern "%" rawptr{SDL_Cursor} SDL_CreateCursor(crawptr{Uint8} data, crawptr{Uint8} mask, int w, int h, int hot_x, int hot_y);
public function extern "%" rawptr{SDL_mutex} SDL_CreateMutex();
public threaded function extern "%" rawptr{SDL_Surface} SDL_CreateRGBSurface(Uint32 flags, int width, int height, int depth, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
public threaded function extern "%" rawptr{SDL_Surface} SDL_CreateRGBSurfaceFrom(rawptr{void} pixels, int width, int height, int depth, int pitch, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
public threaded function extern "%" rawptr{SDL_Surface} SDL_CreateRGBSurfaceWithFormat(Uint32 flags, int width, int height, int depth, Uint32 format);
public threaded function extern "%" rawptr{SDL_Surface} SDL_CreateRGBSurfaceWithFormatFrom(rawptr{void} pixels, int width, int height, int depth, int pitch, Uint32 format);
public function extern "%" rawptr{SDL_Renderer} SDL_CreateRenderer(rawptr{SDL_Window} window, int index, Uint32 flags);
public function extern "%" rawptr{SDL_sem} SDL_CreateSemaphore(Uint32 initial_value);
public function extern "%" rawptr{SDL_Window} SDL_CreateShapedWindow(ccharptr title, uint x, uint y, uint w, uint h, Uint32 flags);
public function extern "%" rawptr{SDL_Renderer} SDL_CreateSoftwareRenderer(rawptr{SDL_Surface} surface);
public function extern "%" rawptr{SDL_Cursor} SDL_CreateSystemCursor(SDL_SystemCursor id);
public function extern "%" rawptr{SDL_Texture} SDL_CreateTexture(rawptr{SDL_Renderer} renderer, Uint32 format, int access, int w, int h);
public function extern "%" rawptr{SDL_Texture} SDL_CreateTextureFromSurface(rawptr{SDL_Renderer} renderer, rawptr{SDL_Surface} surface);
public function extern "%" rawptr{SDL_Window} SDL_CreateWindow(ccharptr title, int x, int y, int w, int h, Uint32 flags);
public function extern "%" int SDL_CreateWindowAndRenderer(int width, int height, Uint32 window_flags, rawptr{rawptr{SDL_Window}} window, rawptr{rawptr{SDL_Renderer}} renderer);
public function extern "%" rawptr{SDL_Window} SDL_CreateWindowFrom(crawptr{void} data);
/* public function extern "%" void SDL_DelEventWatch(); */
/* public function extern "%" void SDL_DelHintCallback(); */
public function extern "%" void SDL_Delay(Uint32 ms);
public function extern "%" Uint32 SDL_DequeueAudio(SDL_AudioDeviceID dev, rawptr{void} data, Uint32 len);
public function extern "%" void SDL_DestroyCond(rawptr{SDL_cond} cond);
public function extern "%" void SDL_DestroyMutex(rawptr{SDL_mutex} mutex);
public function extern "%" void SDL_DestroyRenderer(rawptr{SDL_Renderer} renderer);
public function extern "%" void SDL_DestroySemaphore(rawptr{SDL_sem} sem);
public function extern "%" void SDL_DestroyTexture(rawptr{SDL_Texture} texture);
public function extern "%" void SDL_DestroyWindow(rawptr{SDL_Window} window);
public function extern "%" void SDL_DetachThread(rawptr{SDL_Thread} thread);
public function extern "%" void SDL_DisableScreenSaver();
public function extern "%" rawptr{SDL_Surface} SDL_DuplicateSurface(rawptr{SDL_Surface} surface);
public function extern "%" void SDL_EnableScreenSaver();
public function extern "%" SDL_bool SDL_EnclosePoints(crawptr{SDL_Point} points, int count, crawptr{SDL_Rect} clip, rawptr{SDL_Rect} result);
public function extern "%" int SDL_Error(SDL_errorcode code);
public function extern "%" Uint8 SDL_EventState(Uint32 type, int state);
public function extern "%" int SDL_FillRect(rawptr{SDL_Surface} dst, crawptr{SDL_Rect} rect, Uint32 color);
public function extern "%" int SDL_FillRects(rawptr{SDL_Surface} dst, crawptr{SDL_Rect} rects, int count, Uint32 color);
/* public function extern "%" void SDL_FilterEvents(); */
public function extern "%" int SDL_FlashWindow(rawptr{SDL_Window} window, SDL_FlashOperation operation);
public function extern "%" void SDL_FlushEvent(Uint32 type);
public function extern "%" void SDL_FlushEvents(Uint32 minType, Uint32 maxType);
public function extern "%" void SDL_FreeAudioStream(rawptr{SDL_AudioStream} stream);
public function extern "%" void SDL_FreeCursor(rawptr{SDL_Cursor} cursor);
public function extern "%" void SDL_FreeFormat(rawptr{SDL_PixelFormat} format);
public function extern "%" void SDL_FreePalette(rawptr{SDL_Palette} palette);
public threaded function extern "%" void SDL_FreeRW(rawptr{SDL_RWops} area);
public threaded function extern "%" void SDL_FreeSurface(rawptr{SDL_Surface} surface);
public function extern "%" void SDL_FreeWAV(rawptr{Uint8} audio_buf);
public function extern "%" int SDL_GL_BindTexture(rawptr{SDL_Texture} texture, rawptr{float} texw, rawptr{float} texh);
public function extern "%" SDL_GLContext SDL_GL_CreateContext(rawptr{SDL_Window} window);
public function extern "%" void SDL_GL_DeleteContext(SDL_GLContext context);
public function extern "%" SDL_bool SDL_GL_ExtensionSupported(ccharptr extension);
public function extern "%" int SDL_GL_GetAttribute(SDL_GLattr attr, rawptr{int} value);
public function extern "%" SDL_GLContext SDL_GL_GetCurrentContext();
public function extern "%" rawptr{SDL_Window} SDL_GL_GetCurrentWindow();
public function extern "%" void SDL_GL_GetDrawableSize(rawptr{SDL_Window} window, rawptr{int} w, rawptr{int} h);
public function extern "%" rawptr{void} SDL_GL_GetProcAddress(ccharptr proc);
public function extern "%" int SDL_GL_GetSwapInterval();
public function extern "%" int SDL_GL_LoadLibrary(ccharptr path);
public function extern "%" int SDL_GL_MakeCurrent(rawptr{SDL_Window} window, SDL_GLContext context);
public function extern "%" void SDL_GL_ResetAttributes();
public function extern "%" int SDL_GL_SetAttribute(SDL_GLattr attr, int value);
public function extern "%" int SDL_GL_SetSwapInterval(int interval);
public function extern "%" void SDL_GL_SwapWindow(rawptr{SDL_Window} window);
public function extern "%" int SDL_GL_UnbindTexture(rawptr{SDL_Texture} texture);
public function extern "%" void SDL_GL_UnloadLibrary();
public function extern "%" int SDL_GameControllerAddMapping(ccharptr mappingString);
public function extern "%" int SDL_GameControllerAddMappingsFromRW(rawptr{SDL_RWops} rw, int freerw);
public function extern "%" void SDL_GameControllerClose(rawptr{SDL_GameController} gamecontroller);
public function extern "%" int SDL_GameControllerEventState(int state);
public function extern "%" rawptr{SDL_GameController} SDL_GameControllerFromInstanceID(SDL_JoystickID joyid);
public function extern "%" rawptr{SDL_GameController} SDL_GameControllerFromPlayerIndex(int player_index);
public function extern "%" ccharptr SDL_GameControllerGetAppleSFSymbolsNameForAxis(rawptr{SDL_GameController} gamecontroller, SDL_GameControllerAxis axis);
public function extern "%" ccharptr SDL_GameControllerGetAppleSFSymbolsNameForButton(rawptr{SDL_GameController} gamecontroller, SDL_GameControllerButton button);
public function extern "%" SDL_bool SDL_GameControllerGetAttached(rawptr{SDL_GameController} gamecontroller);
public function extern "%" SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(ccharptr str);
public function extern "%" Uint8 SDL_GameControllerGetButton(rawptr{SDL_GameController} gamecontroller, SDL_GameControllerButton button);
public function extern "%" SDL_GameControllerButton SDL_GameControllerGetButtonFromString(ccharptr str);
public function extern "%" rawptr{SDL_Joystick} SDL_GameControllerGetJoystick(rawptr{SDL_GameController} gamecontroller);
public function extern "%" int SDL_GameControllerGetNumTouchpadFingers(rawptr{SDL_GameController} gamecontroller, int touchpad);
public function extern "%" int SDL_GameControllerGetNumTouchpads(rawptr{SDL_GameController} gamecontroller);
public function extern "%" int SDL_GameControllerGetPlayerIndex(rawptr{SDL_GameController} gamecontroller);
public function extern "%" Uint16 SDL_GameControllerGetProduct(rawptr{SDL_GameController} gamecontroller);
public function extern "%" Uint16 SDL_GameControllerGetProductVersion(rawptr{SDL_GameController} gamecontroller);
public function extern "%" int SDL_GameControllerGetSensorData(rawptr{SDL_GameController} gamecontroller, SDL_SensorType type, rawptr{float} data, int num_values);
public function extern "%" float SDL_GameControllerGetSensorDataRate(rawptr{SDL_GameController} gamecontroller, SDL_SensorType type);
public function extern "%" ccharptr SDL_GameControllerGetSerial(rawptr{SDL_GameController} gamecontroller);
public function extern "%" ccharptr SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);
public function extern "%" ccharptr SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);
public function extern "%" int SDL_GameControllerGetTouchpadFinger(rawptr{SDL_GameController} gamecontroller, int touchpad, int finger, rawptr{Uint8} state, rawptr{float} x, rawptr{float} y, rawptr{float} pressure);
public function extern "%" SDL_GameControllerType SDL_GameControllerGetType(rawptr{SDL_GameController} gamecontroller);
public function extern "%" Uint16 SDL_GameControllerGetVendor(rawptr{SDL_GameController} gamecontroller);
public function extern "%" SDL_bool SDL_GameControllerHasButton(rawptr{SDL_GameController} gamecontroller, SDL_GameControllerButton button);
public function extern "%" SDL_bool SDL_GameControllerHasLED(rawptr{SDL_GameController} gamecontroller);
public function extern "%" SDL_bool SDL_GameControllerHasRumble(rawptr{SDL_GameController} gamecontroller);
public function extern "%" SDL_bool SDL_GameControllerHasRumbleTriggers(rawptr{SDL_GameController} gamecontroller);
public function extern "%" SDL_bool SDL_GameControllerHasSensor(rawptr{SDL_GameController} gamecontroller, SDL_SensorType type);
public function extern "%" SDL_bool SDL_GameControllerIsSensorEnabled(rawptr{SDL_GameController} gamecontroller, SDL_SensorType type);
public function extern "%" charptr SDL_GameControllerMapping(rawptr{SDL_GameController} gamecontroller);
public function extern "%" charptr SDL_GameControllerMappingForDeviceIndex(int joystick_index);
public function extern "%" charptr SDL_GameControllerMappingForIndex(int mapping_index);
public function extern "%" ccharptr SDL_GameControllerName(rawptr{SDL_GameController} gamecontroller);
public function extern "%" ccharptr SDL_GameControllerNameForIndex(int joystick_index);
public function extern "%" int SDL_GameControllerNumMappings();
public function extern "%" rawptr{SDL_GameController} SDL_GameControllerOpen(int joystick_index);
public function extern "%" int SDL_GameControllerRumble(rawptr{SDL_GameController} gamecontroller, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
public function extern "%" int SDL_GameControllerRumbleTriggers(rawptr{SDL_GameController} gamecontroller, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
public function extern "%" int SDL_GameControllerSendEffect(rawptr{SDL_GameController} gamecontroller, crawptr{void} data, int size);
public function extern "%" int SDL_GameControllerSetLED(rawptr{SDL_GameController} gamecontroller, Uint8 red, Uint8 green, Uint8 blue);
public function extern "%" void SDL_GameControllerSetPlayerIndex(rawptr{SDL_GameController} gamecontroller, int player_index);
public function extern "%" int SDL_GameControllerSetSensorEnabled(rawptr{SDL_GameController} gamecontroller, SDL_SensorType type, SDL_bool enabled);
public function extern "%" SDL_GameControllerType SDL_GameControllerTypeForIndex(int joystick_index);
public function extern "%" void SDL_GameControllerUpdate();
/* public function extern "%"  SDL_GetAssertionHandler(); */
public function extern "%" crawptr{SDL_AssertData} SDL_GetAssertionReport();
public function extern "%" ccharptr SDL_GetAudioDeviceName(int index, int iscapture);
public function extern "%" int SDL_GetAudioDeviceSpec(int index, int iscapture, rawptr{SDL_AudioSpec} spec);
public function extern "%" SDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);
public function extern "%" ccharptr SDL_GetAudioDriver(int index);
public function extern "%" SDL_AudioStatus SDL_GetAudioStatus();
public function extern "%" charptr SDL_GetBasePath();
public function extern "%" int SDL_GetCPUCacheLineSize();
public function extern "%" int SDL_GetCPUCount();
public function extern "%" void SDL_GetClipRect(rawptr{SDL_Surface} surface, rawptr{SDL_Rect} rect);
public function extern "%" charptr SDL_GetClipboardText();
public function extern "%" rawptr{SDL_DisplayMode} SDL_GetClosestDisplayMode(int displayIndex, crawptr{SDL_DisplayMode} mode, rawptr{SDL_DisplayMode} closest);
public function extern "%" int SDL_GetColorKey(rawptr{SDL_Surface} surface, rawptr{Uint32} key);
public function extern "%" ccharptr SDL_GetCurrentAudioDriver();
public function extern "%" int SDL_GetCurrentDisplayMode(int displayIndex, rawptr{SDL_DisplayMode} mode);
public function extern "%" ccharptr SDL_GetCurrentVideoDriver();
public function extern "%" rawptr{SDL_Cursor} SDL_GetCursor();
/* public function extern "%"  SDL_GetDefaultAssertionHandler(); */
public function extern "%" rawptr{SDL_Cursor} SDL_GetDefaultCursor();
public function extern "%" int SDL_GetDesktopDisplayMode(int displayIndex, rawptr{SDL_DisplayMode} mode);
public function extern "%" int SDL_GetDisplayBounds(int displayIndex, rawptr{SDL_Rect} rect);
public function extern "%" int SDL_GetDisplayDPI(int displayIndex, rawptr{float} ddpi, rawptr{float} hdpi, rawptr{float} vdpi);
public function extern "%" int SDL_GetDisplayMode(int displayIndex, int modeIndex, rawptr{SDL_DisplayMode} mode);
public function extern "%" ccharptr SDL_GetDisplayName(int displayIndex);
public function extern "%" SDL_DisplayOrientation SDL_GetDisplayOrientation(int displayIndex);
public function extern "%" int SDL_GetDisplayUsableBounds(int displayIndex, rawptr{SDL_Rect} rect);
public function extern "%" ccharptr SDL_GetError();
public function extern "%" charptr SDL_GetErrorMsg(charptr errstr, int maxlen);
/* public function extern "%" SDL_bool SDL_GetEventFilter(); */
public function extern "%" Uint32 SDL_GetGlobalMouseState(rawptr{int} x, rawptr{int} y);
public function extern "%" rawptr{SDL_Window} SDL_GetGrabbedWindow();
public function extern "%" ccharptr SDL_GetHint(ccharptr name);
public function extern "%" SDL_bool SDL_GetHintBoolean(ccharptr name, SDL_bool default_value);
public function extern "%" SDL_Keycode SDL_GetKeyFromName(ccharptr name);
public function extern "%" SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode);
public function extern "%" ccharptr SDL_GetKeyName(SDL_Keycode key);
public function extern "%" rawptr{SDL_Window} SDL_GetKeyboardFocus();
public function extern "%" crawptr{Uint8} SDL_GetKeyboardState(rawptr{int} numkeys);
/* public function extern "%" void SDL_GetMemoryFunctions(); */
public function extern "%" SDL_Keymod SDL_GetModState();
public function extern "%" rawptr{SDL_Window} SDL_GetMouseFocus();
public function extern "%" Uint32 SDL_GetMouseState(rawptr{int} x, rawptr{int} y);
public function extern "%" int SDL_GetNumAllocations();
public function extern "%" int SDL_GetNumAudioDevices(int iscapture);
public function extern "%" int SDL_GetNumAudioDrivers();
public function extern "%" int SDL_GetNumDisplayModes(int displayIndex);
public function extern "%" int SDL_GetNumRenderDrivers();
public function extern "%" int SDL_GetNumTouchDevices();
public function extern "%" int SDL_GetNumTouchFingers(SDL_TouchID touchID);
public function extern "%" int SDL_GetNumVideoDisplays();
public function extern "%" int SDL_GetNumVideoDrivers();
public function extern "%" Uint64 SDL_GetPerformanceCounter();
public function extern "%" Uint64 SDL_GetPerformanceFrequency();
public function extern "%" ccharptr SDL_GetPixelFormatName(Uint32 format);
public function extern "%" ccharptr SDL_GetPlatform();
public function extern "%" SDL_PowerState SDL_GetPowerInfo(rawptr{int} secs, rawptr{int} pct);
public function extern "%" charptr SDL_GetPrefPath(ccharptr org, ccharptr app);
public function extern "%" rawptr{SDL_Locale} SDL_GetPreferredLocales();
public function extern "%" Uint32 SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev);
public function extern "%" void SDL_GetRGB(Uint32 pixel, crawptr{SDL_PixelFormat} format, rawptr{Uint8} r, rawptr{Uint8} g, rawptr{Uint8} b);
public function extern "%" void SDL_GetRGBA(Uint32 pixel, crawptr{SDL_PixelFormat} format, rawptr{Uint8} r, rawptr{Uint8} g, rawptr{Uint8} b, rawptr{Uint8} a);
public function extern "%" SDL_bool SDL_GetRelativeMouseMode();
public function extern "%" Uint32 SDL_GetRelativeMouseState(rawptr{int} x, rawptr{int} y);
public function extern "%" int SDL_GetRenderDrawBlendMode(rawptr{SDL_Renderer} renderer, rawptr{SDL_BlendMode} blendMode);
public function extern "%" int SDL_GetRenderDrawColor(rawptr{SDL_Renderer} renderer, rawptr{Uint8} r, rawptr{Uint8} g, rawptr{Uint8} b, rawptr{Uint8} a);
public function extern "%" int SDL_GetRenderDriverInfo(int index, rawptr{SDL_RendererInfo} info);
public function extern "%" rawptr{SDL_Texture} SDL_GetRenderTarget(rawptr{SDL_Renderer} renderer);
public function extern "%" rawptr{SDL_Renderer} SDL_GetRenderer(rawptr{SDL_Window} window);
public function extern "%" int SDL_GetRendererInfo(rawptr{SDL_Renderer} renderer, rawptr{SDL_RendererInfo} info);
public function extern "%" int SDL_GetRendererOutputSize(rawptr{SDL_Renderer} renderer, rawptr{int} w, rawptr{int} h);
public function extern "%" ccharptr SDL_GetRevision();
public function extern "%" SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key);
public function extern "%" SDL_Scancode SDL_GetScancodeFromName(ccharptr name);
public function extern "%" ccharptr SDL_GetScancodeName(SDL_Scancode scancode);
public function extern "%" int SDL_GetShapedWindowMode(rawptr{SDL_Window} window, rawptr{SDL_WindowShapeMode} shape_mode);
public function extern "%" int SDL_GetSurfaceAlphaMod(rawptr{SDL_Surface} surface, rawptr{Uint8} alpha);
public function extern "%" int SDL_GetSurfaceBlendMode(rawptr{SDL_Surface} surface, rawptr{SDL_BlendMode} blendMode);
public function extern "%" int SDL_GetSurfaceColorMod(rawptr{SDL_Surface} surface, rawptr{Uint8} r, rawptr{Uint8} g, rawptr{Uint8} b);
public function extern "%" int SDL_GetSystemRAM();
public function extern "%" int SDL_GetTextureAlphaMod(rawptr{SDL_Texture} texture, rawptr{Uint8} alpha);
public function extern "%" int SDL_GetTextureBlendMode(rawptr{SDL_Texture} texture, rawptr{SDL_BlendMode} blendMode);
public function extern "%" int SDL_GetTextureColorMod(rawptr{SDL_Texture} texture, rawptr{Uint8} r, rawptr{Uint8} g, rawptr{Uint8} b);
public function extern "%" int SDL_GetTextureScaleMode(rawptr{SDL_Texture} texture, rawptr{SDL_ScaleMode} scaleMode);
public function extern "%" rawptr{void} SDL_GetTextureUserData(rawptr{SDL_Texture} texture);
public function extern "%" SDL_threadID SDL_GetThreadID(rawptr{SDL_Thread} thread);
public function extern "%" ccharptr SDL_GetThreadName(rawptr{SDL_Thread} thread);
public function extern "%" Uint32 SDL_GetTicks();
public function extern "%" Uint64 SDL_GetTicks64();
public function extern "%" SDL_TouchID SDL_GetTouchDevice(int index);
public function extern "%" SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);
public function extern "%" rawptr{SDL_Finger} SDL_GetTouchFinger(SDL_TouchID touchID, int index);
public function extern "%" void SDL_GetVersion(rawptr{SDL_version} ver);
public function extern "%" ccharptr SDL_GetVideoDriver(int index);
public function extern "%" int SDL_GetWindowBordersSize(rawptr{SDL_Window} window, rawptr{int} top, rawptr{int} left, rawptr{int} bottom, rawptr{int} right);
public function extern "%" float SDL_GetWindowBrightness(rawptr{SDL_Window} window);
public function extern "%" rawptr{void} SDL_GetWindowData(rawptr{SDL_Window} window, ccharptr name);
public function extern "%" int SDL_GetWindowDisplayIndex(rawptr{SDL_Window} window);
public function extern "%" int SDL_GetWindowDisplayMode(rawptr{SDL_Window} window, rawptr{SDL_DisplayMode} mode);
public function extern "%" Uint32 SDL_GetWindowFlags(rawptr{SDL_Window} window);
public function extern "%" rawptr{SDL_Window} SDL_GetWindowFromID(Uint32 id);
public function extern "%" int SDL_GetWindowGammaRamp(rawptr{SDL_Window} window, rawptr{Uint16} red, rawptr{Uint16} green, rawptr{Uint16} blue);
public function extern "%" SDL_bool SDL_GetWindowGrab(rawptr{SDL_Window} window);
/* public function extern "%" rawptr{void} SDL_GetWindowICCProfile(); */
public function extern "%" Uint32 SDL_GetWindowID(rawptr{SDL_Window} window);
public function extern "%" SDL_bool SDL_GetWindowKeyboardGrab(rawptr{SDL_Window} window);
public function extern "%" void SDL_GetWindowMaximumSize(rawptr{SDL_Window} window, rawptr{int} w, rawptr{int} h);
public function extern "%" void SDL_GetWindowMinimumSize(rawptr{SDL_Window} window, rawptr{int} w, rawptr{int} h);
public function extern "%" SDL_bool SDL_GetWindowMouseGrab(rawptr{SDL_Window} window);
public function extern "%" crawptr{SDL_Rect} SDL_GetWindowMouseRect(rawptr{SDL_Window} window);
public function extern "%" int SDL_GetWindowOpacity(rawptr{SDL_Window} window, rawptr{float} out_opacity);
public function extern "%" Uint32 SDL_GetWindowPixelFormat(rawptr{SDL_Window} window);
public function extern "%" void SDL_GetWindowPosition(rawptr{SDL_Window} window, rawptr{int} x, rawptr{int} y);
public function extern "%" void SDL_GetWindowSize(rawptr{SDL_Window} window, rawptr{int} w, rawptr{int} h);
public function extern "%" rawptr{SDL_Surface} SDL_GetWindowSurface(rawptr{SDL_Window} window);
public function extern "%" ccharptr SDL_GetWindowTitle(rawptr{SDL_Window} window);
public function extern "%" SDL_bool SDL_GetWindowWMInfo(rawptr{SDL_Window} window, rawptr{SDL_SysWMinfo} info);
public function extern "%" SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode();
public function extern "%" SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int width, int height);
public function extern "%" void SDL_HapticClose(rawptr{SDL_Haptic} haptic);
public function extern "%" void SDL_HapticDestroyEffect(rawptr{SDL_Haptic} haptic, int effect);
public function extern "%" int SDL_HapticEffectSupported(rawptr{SDL_Haptic} haptic, rawptr{SDL_HapticEffect} effect);
public function extern "%" int SDL_HapticGetEffectStatus(rawptr{SDL_Haptic} haptic, int effect);
public function extern "%" int SDL_HapticIndex(rawptr{SDL_Haptic} haptic);
public function extern "%" ccharptr SDL_HapticName(int device_index);
public function extern "%" int SDL_HapticNewEffect(rawptr{SDL_Haptic} haptic, rawptr{SDL_HapticEffect} effect);
public function extern "%" int SDL_HapticNumAxes(rawptr{SDL_Haptic} haptic);
public function extern "%" int SDL_HapticNumEffects(rawptr{SDL_Haptic} haptic);
public function extern "%" int SDL_HapticNumEffectsPlaying(rawptr{SDL_Haptic} haptic);
public function extern "%" rawptr{SDL_Haptic} SDL_HapticOpen(int device_index);
public function extern "%" rawptr{SDL_Haptic} SDL_HapticOpenFromJoystick(rawptr{SDL_Joystick} joystick);
public function extern "%" rawptr{SDL_Haptic} SDL_HapticOpenFromMouse();
public function extern "%" int SDL_HapticOpened(int device_index);
public function extern "%" int SDL_HapticPause(rawptr{SDL_Haptic} haptic);
public function extern "%" uint SDL_HapticQuery(rawptr{SDL_Haptic} haptic);
public function extern "%" int SDL_HapticRumbleInit(rawptr{SDL_Haptic} haptic);
public function extern "%" int SDL_HapticRumblePlay(rawptr{SDL_Haptic} haptic, float strength, Uint32 length);
public function extern "%" int SDL_HapticRumbleStop(rawptr{SDL_Haptic} haptic);
public function extern "%" int SDL_HapticRumbleSupported(rawptr{SDL_Haptic} haptic);
public function extern "%" int SDL_HapticRunEffect(rawptr{SDL_Haptic} haptic, int effect, Uint32 iterations);
public function extern "%" int SDL_HapticSetAutocenter(rawptr{SDL_Haptic} haptic, int autocenter);
public function extern "%" int SDL_HapticSetGain(rawptr{SDL_Haptic} haptic, int gain);
public function extern "%" int SDL_HapticStopAll(rawptr{SDL_Haptic} haptic);
public function extern "%" int SDL_HapticStopEffect(rawptr{SDL_Haptic} haptic, int effect);
public function extern "%" int SDL_HapticUnpause(rawptr{SDL_Haptic} haptic);
public function extern "%" int SDL_HapticUpdateEffect(rawptr{SDL_Haptic} haptic, int effect, rawptr{SDL_HapticEffect} data);
public function extern "%" SDL_bool SDL_Has3DNow();
public function extern "%" SDL_bool SDL_HasARMSIMD();
public function extern "%" SDL_bool SDL_HasAVX();
public function extern "%" SDL_bool SDL_HasAVX2();
public function extern "%" SDL_bool SDL_HasAVX512F();
public function extern "%" SDL_bool SDL_HasAltiVec();
public function extern "%" SDL_bool SDL_HasClipboardText();
public function extern "%" SDL_bool SDL_HasColorKey(rawptr{SDL_Surface} surface);
public function extern "%" SDL_bool SDL_HasEvent(Uint32 type);
public function extern "%" SDL_bool SDL_HasEvents(Uint32 minType, Uint32 maxType);
public function extern "%" SDL_bool SDL_HasIntersection(crawptr{SDL_Rect} A, crawptr{SDL_Rect} B);
public function extern "%" SDL_bool SDL_HasMMX();
public function extern "%" SDL_bool SDL_HasNEON();
public function extern "%" SDL_bool SDL_HasRDTSC();
public function extern "%" SDL_bool SDL_HasSSE();
public function extern "%" SDL_bool SDL_HasSSE2();
public function extern "%" SDL_bool SDL_HasSSE3();
public function extern "%" SDL_bool SDL_HasSSE41();
public function extern "%" SDL_bool SDL_HasSSE42();
public function extern "%" SDL_bool SDL_HasScreenKeyboardSupport();
public function extern "%" SDL_bool SDL_HasSurfaceRLE(rawptr{SDL_Surface} surface);
public function extern "%" void SDL_HideWindow(rawptr{SDL_Window} window);
public function extern "%" int SDL_Init(Uint32 flags);
public function extern "%" int SDL_InitSubSystem(Uint32 flags);
public function extern "%" SDL_bool SDL_IntersectRect(crawptr{SDL_Rect} A, crawptr{SDL_Rect} B, rawptr{SDL_Rect} result);
public function extern "%" SDL_bool SDL_IntersectRectAndLine(crawptr{SDL_Rect} rect, rawptr{int} X1, rawptr{int} Y1, rawptr{int} X2, rawptr{int} Y2);
public function extern "%" SDL_bool SDL_IsGameController(int joystick_index);
public function extern "%" SDL_bool SDL_IsScreenKeyboardShown(rawptr{SDL_Window} window);
public function extern "%" SDL_bool SDL_IsScreenSaverEnabled();
public function extern "%" SDL_bool SDL_IsShapedWindow(crawptr{SDL_Window} window);
public function extern "%" SDL_bool SDL_IsTablet();
public function extern "%" SDL_bool SDL_IsTextInputActive();
public function extern "%" int SDL_JoystickAttachVirtual(SDL_JoystickType type, int naxes, int nbuttons, int nhats);
public function extern "%" void SDL_JoystickClose(rawptr{SDL_Joystick} joystick);
public function extern "%" SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(rawptr{SDL_Joystick} joystick);
public function extern "%" int SDL_JoystickDetachVirtual(int device_index);
public function extern "%" int SDL_JoystickEventState(int state);
public function extern "%" rawptr{SDL_Joystick} SDL_JoystickFromInstanceID(SDL_JoystickID instance_id);
public function extern "%" rawptr{SDL_Joystick} SDL_JoystickFromPlayerIndex(int player_index);
public function extern "%" SDL_bool SDL_JoystickGetAttached(rawptr{SDL_Joystick} joystick);
public function extern "%" Sint16 SDL_JoystickGetAxis(rawptr{SDL_Joystick} joystick, int axis);
public function extern "%" SDL_bool SDL_JoystickGetAxisInitialState(rawptr{SDL_Joystick} joystick, int axis, rawptr{Sint16} state);
public function extern "%" int SDL_JoystickGetBall(rawptr{SDL_Joystick} joystick, int ball, rawptr{int} dx, rawptr{int} dy);
public function extern "%" Uint8 SDL_JoystickGetButton(rawptr{SDL_Joystick} joystick, int button);
public function extern "%" SDL_JoystickGUID SDL_JoystickGetDeviceGUID(int device_index);
public function extern "%" SDL_JoystickID SDL_JoystickGetDeviceInstanceID(int device_index);
public function extern "%" int SDL_JoystickGetDevicePlayerIndex(int device_index);
public function extern "%" Uint16 SDL_JoystickGetDeviceProduct(int device_index);
public function extern "%" Uint16 SDL_JoystickGetDeviceProductVersion(int device_index);
public function extern "%" SDL_JoystickType SDL_JoystickGetDeviceType(int device_index);
public function extern "%" Uint16 SDL_JoystickGetDeviceVendor(int device_index);
public function extern "%" SDL_JoystickGUID SDL_JoystickGetGUID(rawptr{SDL_Joystick} joystick);
public function extern "%" SDL_JoystickGUID SDL_JoystickGetGUIDFromString(ccharptr pchGUID);
public function extern "%" void SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, charptr pszGUID, int cbGUID);
public function extern "%" Uint8 SDL_JoystickGetHat(rawptr{SDL_Joystick} joystick, int hat);
public function extern "%" int SDL_JoystickGetPlayerIndex(rawptr{SDL_Joystick} joystick);
public function extern "%" Uint16 SDL_JoystickGetProduct(rawptr{SDL_Joystick} joystick);
public function extern "%" Uint16 SDL_JoystickGetProductVersion(rawptr{SDL_Joystick} joystick);
public function extern "%" ccharptr SDL_JoystickGetSerial(rawptr{SDL_Joystick} joystick);
public function extern "%" SDL_JoystickType SDL_JoystickGetType(rawptr{SDL_Joystick} joystick);
public function extern "%" Uint16 SDL_JoystickGetVendor(rawptr{SDL_Joystick} joystick);
public function extern "%" SDL_bool SDL_JoystickHasLED(rawptr{SDL_Joystick} joystick);
public function extern "%" SDL_bool SDL_JoystickHasRumble(rawptr{SDL_Joystick} joystick);
public function extern "%" SDL_bool SDL_JoystickHasRumbleTriggers(rawptr{SDL_Joystick} joystick);
public function extern "%" SDL_JoystickID SDL_JoystickInstanceID(rawptr{SDL_Joystick} joystick);
public function extern "%" int SDL_JoystickIsHaptic(rawptr{SDL_Joystick} joystick);
public function extern "%" SDL_bool SDL_JoystickIsVirtual(int device_index);
public function extern "%" ccharptr SDL_JoystickName(rawptr{SDL_Joystick} joystick);
public function extern "%" ccharptr SDL_JoystickNameForIndex(int device_index);
public function extern "%" int SDL_JoystickNumAxes(rawptr{SDL_Joystick} joystick);
public function extern "%" int SDL_JoystickNumBalls(rawptr{SDL_Joystick} joystick);
public function extern "%" int SDL_JoystickNumButtons(rawptr{SDL_Joystick} joystick);
public function extern "%" int SDL_JoystickNumHats(rawptr{SDL_Joystick} joystick);
public function extern "%" rawptr{SDL_Joystick} SDL_JoystickOpen(int device_index);
public function extern "%" int SDL_JoystickRumble(rawptr{SDL_Joystick} joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
public function extern "%" int SDL_JoystickRumbleTriggers(rawptr{SDL_Joystick} joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
public function extern "%" int SDL_JoystickSendEffect(rawptr{SDL_Joystick} joystick, crawptr{void} data, int size);
public function extern "%" int SDL_JoystickSetLED(rawptr{SDL_Joystick} joystick, Uint8 red, Uint8 green, Uint8 blue);
public function extern "%" void SDL_JoystickSetPlayerIndex(rawptr{SDL_Joystick} joystick, int player_index);
public function extern "%" int SDL_JoystickSetVirtualAxis(rawptr{SDL_Joystick} joystick, int axis, Sint16 value);
public function extern "%" int SDL_JoystickSetVirtualButton(rawptr{SDL_Joystick} joystick, int button, Uint8 value);
public function extern "%" int SDL_JoystickSetVirtualHat(rawptr{SDL_Joystick} joystick, int hat, Uint8 value);
public function extern "%" void SDL_JoystickUpdate();
public function extern "%" int SDL_LinuxSetThreadPriority(Sint64 threadID, int priority);
public function extern "%" int SDL_LinuxSetThreadPriorityAndPolicy(Sint64 threadID, int sdlPriority, int schedPolicy);
public function extern "%" rawptr{SDL_Surface} SDL_LoadBMP_RW(rawptr{SDL_RWops} src, int freesrc);
public function extern "%" int SDL_LoadDollarTemplates(SDL_TouchID touchId, rawptr{SDL_RWops} src);
/* public function extern "%" rawptr{void} SDL_LoadFile(); */
/* public function extern "%" rawptr{void} SDL_LoadFile_RW(); */
public function extern "%" rawptr{void} SDL_LoadFunction(rawptr{void} handle, ccharptr name);
public function extern "%" rawptr{void} SDL_LoadObject(ccharptr sofile);
public function extern "%" rawptr{SDL_AudioSpec} SDL_LoadWAV_RW(rawptr{SDL_RWops} src, int freesrc, rawptr{SDL_AudioSpec} spec, rawptr{rawptr{Uint8}} audio_buf, rawptr{Uint32} audio_len);
public function extern "%" void SDL_LockAudio();
public function extern "%" void SDL_LockAudioDevice(SDL_AudioDeviceID dev);
public function extern "%" void SDL_LockJoysticks();
public function extern "%" int SDL_LockMutex(rawptr{SDL_mutex} mutex);
public function extern "%" void SDL_LockSensors();
public function extern "%" int SDL_LockSurface(rawptr{SDL_Surface} surface);
public function extern "%" int SDL_LockTexture(rawptr{SDL_Texture} texture, crawptr{SDL_Rect} rect, rawptr{rawptr{void}} pixels, rawptr{int} pitch);
public function extern "%" int SDL_LockTextureToSurface(rawptr{SDL_Texture} texture, crawptr{SDL_Rect} rect, rawptr{rawptr{SDL_Surface}} surface);
/* public function extern "%" void SDL_LogGetOutputFunction(); */
public function extern "%" SDL_LogPriority SDL_LogGetPriority(int category);
/* public function extern "%" void SDL_LogMessageV(); */
public function extern "%" void SDL_LogResetPriorities();
public function extern "%" void SDL_LogSetAllPriority(SDL_LogPriority priority);
/* public function extern "%" void SDL_LogSetOutputFunction(); */
public function extern "%" void SDL_LogSetPriority(int category, SDL_LogPriority priority);
public function extern "%" int SDL_LowerBlit(rawptr{SDL_Surface} src, rawptr{SDL_Rect} srcrect, rawptr{SDL_Surface} dst, rawptr{SDL_Rect} dstrect);
public function extern "%" int SDL_LowerBlitScaled(rawptr{SDL_Surface} src, rawptr{SDL_Rect} srcrect, rawptr{SDL_Surface} dst, rawptr{SDL_Rect} dstrect);
public function extern "%" Uint32 SDL_MapRGB(crawptr{SDL_PixelFormat} format, Uint8 r, Uint8 g, Uint8 b);
public function extern "%" Uint32 SDL_MapRGBA(crawptr{SDL_PixelFormat} format, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
public function extern "%" Uint32 SDL_MasksToPixelFormatEnum(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
public function extern "%" void SDL_MaximizeWindow(rawptr{SDL_Window} window);
public function extern "%" void SDL_MemoryBarrierAcquireFunction();
public function extern "%" void SDL_MemoryBarrierReleaseFunction();
public function extern "%" SDL_MetalView SDL_Metal_CreateView(rawptr{SDL_Window} window);
public function extern "%" void SDL_Metal_DestroyView(SDL_MetalView view);
public function extern "%" void SDL_Metal_GetDrawableSize(rawptr{SDL_Window} window, rawptr{int} w, rawptr{int} h);
public function extern "%" rawptr{void} SDL_Metal_GetLayer(SDL_MetalView view);
public function extern "%" void SDL_MinimizeWindow(rawptr{SDL_Window} window);
public function extern "%" void SDL_MixAudio(rawptr{Uint8} dst, crawptr{Uint8} src, Uint32 len, int volume);
public function extern "%" void SDL_MixAudioFormat(rawptr{Uint8} dst, crawptr{Uint8} src, SDL_AudioFormat format, Uint32 len, int volume);
public function extern "%" int SDL_MouseIsHaptic();
public function extern "%" rawptr{SDL_AudioStream} SDL_NewAudioStream(SDL_AudioFormat src_format, Uint8 src_channels, int src_rate, SDL_AudioFormat dst_format, Uint8 dst_channels, int dst_rate);
public function extern "%" int SDL_NumHaptics();
public function extern "%" int SDL_NumJoysticks();
public function extern "%" int SDL_NumSensors();
public function extern "%" void SDL_OnApplicationDidBecomeActive();
public function extern "%" void SDL_OnApplicationDidEnterBackground();
public function extern "%" void SDL_OnApplicationDidReceiveMemoryWarning();
public function extern "%" void SDL_OnApplicationWillEnterForeground();
public function extern "%" void SDL_OnApplicationWillResignActive();
public function extern "%" void SDL_OnApplicationWillTerminate();
public function extern "%" int SDL_OpenAudio(rawptr{SDL_AudioSpec} desired, rawptr{SDL_AudioSpec} obtained);
public function extern "%" SDL_AudioDeviceID SDL_OpenAudioDevice(ccharptr device, int iscapture, crawptr{SDL_AudioSpec} desired, rawptr{SDL_AudioSpec} obtained, int allowed_changes);
public function extern "%" int SDL_OpenURL(ccharptr url);
public function extern "%" void SDL_PauseAudio(int pause_on);
public function extern "%" void SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on);
public function extern "%" int SDL_PeepEvents(rawptr{SDL_Event} events, int numevents, SDL_eventaction action, Uint32 minType, Uint32 maxType);
public function extern "%" SDL_bool SDL_PixelFormatEnumToMasks(Uint32 format, rawptr{int} bpp, rawptr{Uint32} Rmask, rawptr{Uint32} Gmask, rawptr{Uint32} Bmask, rawptr{Uint32} Amask);
public function extern "%" int SDL_PollEvent(rawptr{SDL_Event} event);
public function extern "%" int SDL_PremultiplyAlpha(int width, int height, Uint32 src_format, crawptr{void} src, int src_pitch, Uint32 dst_format, rawptr{void} dst, int dst_pitch);
public function extern "%" void SDL_PumpEvents();
public function extern "%" int SDL_PushEvent(rawptr{SDL_Event} event);
public function extern "%" int SDL_QueryTexture(rawptr{SDL_Texture} texture, rawptr{Uint32} format, rawptr{int} access, rawptr{int} w, rawptr{int} h);
public function extern "%" int SDL_QueueAudio(SDL_AudioDeviceID dev, crawptr{void} data, Uint32 len);
public function extern "%" void SDL_Quit();
public function extern "%" void SDL_QuitSubSystem(Uint32 flags);
public threaded function extern "%" rawptr{SDL_RWops} SDL_RWFromConstMem(crawptr{void} mem, int size);
public threaded function extern "%" rawptr{SDL_RWops} SDL_RWFromFP(rawptr{void} fp, SDL_bool autoclose);
public threaded function extern "%" rawptr{SDL_RWops} SDL_RWFromFile(ccharptr file, ccharptr mode);
public threaded function extern "%" rawptr{SDL_RWops} SDL_RWFromMem(rawptr{void} mem, int size);
public threaded function extern "%" int SDL_RWclose(rawptr{SDL_RWops} context);
/* public function extern "%"  SDL_RWread(); */
public threaded function extern "%" Sint64 SDL_RWseek(rawptr{SDL_RWops} context, Sint64 offset, int whence);
public threaded function extern "%" Sint64 SDL_RWsize(rawptr{SDL_RWops} context);
public threaded function extern "%" Sint64 SDL_RWtell(rawptr{SDL_RWops} context);
/* public function extern "%"  SDL_RWwrite(); */
public function extern "%" void SDL_RaiseWindow(rawptr{SDL_Window} window);
public function extern "%" Uint16 SDL_ReadBE16(rawptr{SDL_RWops} src);
public function extern "%" Uint32 SDL_ReadBE32(rawptr{SDL_RWops} src);
public function extern "%" Uint64 SDL_ReadBE64(rawptr{SDL_RWops} src);
public function extern "%" Uint16 SDL_ReadLE16(rawptr{SDL_RWops} src);
public function extern "%" Uint32 SDL_ReadLE32(rawptr{SDL_RWops} src);
public function extern "%" Uint64 SDL_ReadLE64(rawptr{SDL_RWops} src);
public function extern "%" Uint8 SDL_ReadU8(rawptr{SDL_RWops} src);
public function extern "%" int SDL_RecordGesture(SDL_TouchID touchId);
public function extern "%" Uint32 SDL_RegisterEvents(int numevents);
public function extern "%" SDL_bool SDL_RemoveTimer(SDL_TimerID id);
public function extern "%" int SDL_RenderClear(rawptr{SDL_Renderer} renderer);
public function extern "%" int SDL_RenderCopy(rawptr{SDL_Renderer} renderer, rawptr{SDL_Texture} texture, crawptr{SDL_Rect} srcrect, crawptr{SDL_Rect} dstrect);
public function extern "%" int SDL_RenderCopyEx(rawptr{SDL_Renderer} renderer, rawptr{SDL_Texture} texture, crawptr{SDL_Rect} srcrect, crawptr{SDL_Rect} dstrect, double angle, crawptr{SDL_Point} center, SDL_RendererFlip flip);
public function extern "%" int SDL_RenderCopyExF(rawptr{SDL_Renderer} renderer, rawptr{SDL_Texture} texture, crawptr{SDL_Rect} srcrect, crawptr{SDL_FRect} dstrect, double angle, crawptr{SDL_FPoint} center, SDL_RendererFlip flip);
public function extern "%" int SDL_RenderCopyF(rawptr{SDL_Renderer} renderer, rawptr{SDL_Texture} texture, crawptr{SDL_Rect} srcrect, crawptr{SDL_FRect} dstrect);
public function extern "%" int SDL_RenderDrawLine(rawptr{SDL_Renderer} renderer, int x1, int y1, int x2, int y2);
public function extern "%" int SDL_RenderDrawLineF(rawptr{SDL_Renderer} renderer, float x1, float y1, float x2, float y2);
public function extern "%" int SDL_RenderDrawLines(rawptr{SDL_Renderer} renderer, crawptr{SDL_Point} points, int count);
public function extern "%" int SDL_RenderDrawLinesF(rawptr{SDL_Renderer} renderer, crawptr{SDL_FPoint} points, int count);
public function extern "%" int SDL_RenderDrawPoint(rawptr{SDL_Renderer} renderer, int x, int y);
public function extern "%" int SDL_RenderDrawPointF(rawptr{SDL_Renderer} renderer, float x, float y);
public function extern "%" int SDL_RenderDrawPoints(rawptr{SDL_Renderer} renderer, crawptr{SDL_Point} points, int count);
public function extern "%" int SDL_RenderDrawPointsF(rawptr{SDL_Renderer} renderer, crawptr{SDL_FPoint} points, int count);
public function extern "%" int SDL_RenderDrawRect(rawptr{SDL_Renderer} renderer, crawptr{SDL_Rect} rect);
public function extern "%" int SDL_RenderDrawRectF(rawptr{SDL_Renderer} renderer, crawptr{SDL_FRect} rect);
public function extern "%" int SDL_RenderDrawRects(rawptr{SDL_Renderer} renderer, crawptr{SDL_Rect} rects, int count);
public function extern "%" int SDL_RenderDrawRectsF(rawptr{SDL_Renderer} renderer, crawptr{SDL_FRect} rects, int count);
public function extern "%" int SDL_RenderFillRect(rawptr{SDL_Renderer} renderer, crawptr{SDL_Rect} rect);
public function extern "%" int SDL_RenderFillRectF(rawptr{SDL_Renderer} renderer, crawptr{SDL_FRect} rect);
public function extern "%" int SDL_RenderFillRects(rawptr{SDL_Renderer} renderer, crawptr{SDL_Rect} rects, int count);
public function extern "%" int SDL_RenderFillRectsF(rawptr{SDL_Renderer} renderer, crawptr{SDL_FRect} rects, int count);
public function extern "%" int SDL_RenderFlush(rawptr{SDL_Renderer} renderer);
public function extern "%" int SDL_RenderGeometry(rawptr{SDL_Renderer} renderer, rawptr{SDL_Texture} texture, crawptr{SDL_Vertex} vertices, int num_vertices, crawptr{int} indices, int num_indices);
public function extern "%" int SDL_RenderGeometryRaw(rawptr{SDL_Renderer} renderer, rawptr{SDL_Texture} texture, crawptr{float} xy, int xy_stride, crawptr{SDL_Color} color, int color_stride, crawptr{float} uv, int uv_stride, int num_vertices, crawptr{void} indices, int num_indices, int size_indices);
public function extern "%" void SDL_RenderGetClipRect(rawptr{SDL_Renderer} renderer, rawptr{SDL_Rect} rect);
public function extern "%" SDL_bool SDL_RenderGetIntegerScale(rawptr{SDL_Renderer} renderer);
public function extern "%" void SDL_RenderGetLogicalSize(rawptr{SDL_Renderer} renderer, rawptr{int} w, rawptr{int} h);
public function extern "%" rawptr{void} SDL_RenderGetMetalCommandEncoder(rawptr{SDL_Renderer} renderer);
public function extern "%" rawptr{void} SDL_RenderGetMetalLayer(rawptr{SDL_Renderer} renderer);
public function extern "%" void SDL_RenderGetScale(rawptr{SDL_Renderer} renderer, rawptr{float} scaleX, rawptr{float} scaleY);
public function extern "%" void SDL_RenderGetViewport(rawptr{SDL_Renderer} renderer, rawptr{SDL_Rect} rect);
public function extern "%" SDL_bool SDL_RenderIsClipEnabled(rawptr{SDL_Renderer} renderer);
public function extern "%" void SDL_RenderLogicalToWindow(rawptr{SDL_Renderer} renderer, float logicalX, float logicalY, rawptr{int} windowX, rawptr{int} windowY);
public function extern "%" void SDL_RenderPresent(rawptr{SDL_Renderer} renderer);
public function extern "%" int SDL_RenderReadPixels(rawptr{SDL_Renderer} renderer, crawptr{SDL_Rect} rect, Uint32 format, rawptr{void} pixels, int pitch);
public function extern "%" int SDL_RenderSetClipRect(rawptr{SDL_Renderer} renderer, crawptr{SDL_Rect} rect);
public function extern "%" int SDL_RenderSetIntegerScale(rawptr{SDL_Renderer} renderer, SDL_bool enable);
public function extern "%" int SDL_RenderSetLogicalSize(rawptr{SDL_Renderer} renderer, int w, int h);
public function extern "%" int SDL_RenderSetScale(rawptr{SDL_Renderer} renderer, float scaleX, float scaleY);
public function extern "%" int SDL_RenderSetVSync(rawptr{SDL_Renderer} renderer, int vsync);
public function extern "%" int SDL_RenderSetViewport(rawptr{SDL_Renderer} renderer, crawptr{SDL_Rect} rect);
public function extern "%" SDL_bool SDL_RenderTargetSupported(rawptr{SDL_Renderer} renderer);
public function extern "%" void SDL_RenderWindowToLogical(rawptr{SDL_Renderer} renderer, int windowX, int windowY, rawptr{float} logicalX, rawptr{float} logicalY);
public function extern "%" SDL_AssertState SDL_ReportAssertion(rawptr{SDL_AssertData} _0, ccharptr _1, ccharptr _2, int _3);
public function extern "%" void SDL_ResetAssertionReport();
public function extern "%" void SDL_RestoreWindow(rawptr{SDL_Window} window);
/* public function extern "%" rawptr{void} SDL_SIMDAlloc(); */
public function extern "%" void SDL_SIMDFree(rawptr{void} ptr);
/* public function extern "%"  SDL_SIMDGetAlignment(); */
/* public function extern "%" rawptr{void} SDL_SIMDRealloc(); */
public function extern "%" int SDL_SaveAllDollarTemplates(rawptr{SDL_RWops} dst);
public function extern "%" int SDL_SaveBMP_RW(rawptr{SDL_Surface} surface, rawptr{SDL_RWops} dst, int freedst);
public function extern "%" int SDL_SaveDollarTemplate(SDL_GestureID gestureId, rawptr{SDL_RWops} dst);
public function extern "%" int SDL_SemPost(rawptr{SDL_sem} sem);
public function extern "%" int SDL_SemTryWait(rawptr{SDL_sem} sem);
public function extern "%" Uint32 SDL_SemValue(rawptr{SDL_sem} sem);
public function extern "%" int SDL_SemWait(rawptr{SDL_sem} sem);
public function extern "%" int SDL_SemWaitTimeout(rawptr{SDL_sem} sem, Uint32 ms);
public function extern "%" void SDL_SensorClose(rawptr{SDL_Sensor} sensor);
public function extern "%" rawptr{SDL_Sensor} SDL_SensorFromInstanceID(SDL_SensorID instance_id);
public function extern "%" int SDL_SensorGetData(rawptr{SDL_Sensor} sensor, rawptr{float} data, int num_values);
public function extern "%" SDL_SensorID SDL_SensorGetDeviceInstanceID(int device_index);
public function extern "%" ccharptr SDL_SensorGetDeviceName(int device_index);
public function extern "%" int SDL_SensorGetDeviceNonPortableType(int device_index);
public function extern "%" SDL_SensorType SDL_SensorGetDeviceType(int device_index);
public function extern "%" SDL_SensorID SDL_SensorGetInstanceID(rawptr{SDL_Sensor} sensor);
public function extern "%" ccharptr SDL_SensorGetName(rawptr{SDL_Sensor} sensor);
public function extern "%" int SDL_SensorGetNonPortableType(rawptr{SDL_Sensor} sensor);
public function extern "%" SDL_SensorType SDL_SensorGetType(rawptr{SDL_Sensor} sensor);
public function extern "%" rawptr{SDL_Sensor} SDL_SensorOpen(int device_index);
public function extern "%" void SDL_SensorUpdate();
/* public function extern "%" void SDL_SetAssertionHandler(); */
public function extern "%" SDL_bool SDL_SetClipRect(rawptr{SDL_Surface} surface, crawptr{SDL_Rect} rect);
public function extern "%" int SDL_SetClipboardText(ccharptr text);
public function extern "%" int SDL_SetColorKey(rawptr{SDL_Surface} surface, int flag, Uint32 key);
public function extern "%" void SDL_SetCursor(rawptr{SDL_Cursor} cursor);
/* public function extern "%" void SDL_SetEventFilter(); */
public function extern "%" SDL_bool SDL_SetHint(ccharptr name, ccharptr value);
public function extern "%" SDL_bool SDL_SetHintWithPriority(ccharptr name, ccharptr value, SDL_HintPriority priority);
public function extern "%" void SDL_SetMainReady();
/* public function extern "%" int SDL_SetMemoryFunctions(); */
public function extern "%" void SDL_SetModState(SDL_Keymod modstate);
public function extern "%" int SDL_SetPaletteColors(rawptr{SDL_Palette} palette, crawptr{SDL_Color} colors, int firstcolor, int ncolors);
public function extern "%" int SDL_SetPixelFormatPalette(rawptr{SDL_PixelFormat} format, rawptr{SDL_Palette} palette);
public function extern "%" int SDL_SetRelativeMouseMode(SDL_bool enabled);
public function extern "%" int SDL_SetRenderDrawBlendMode(rawptr{SDL_Renderer} renderer, SDL_BlendMode blendMode);
public function extern "%" int SDL_SetRenderDrawColor(rawptr{SDL_Renderer} renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
public function extern "%" int SDL_SetRenderTarget(rawptr{SDL_Renderer} renderer, rawptr{SDL_Texture} texture);
public function extern "%" int SDL_SetSurfaceAlphaMod(rawptr{SDL_Surface} surface, Uint8 alpha);
public function extern "%" int SDL_SetSurfaceBlendMode(rawptr{SDL_Surface} surface, SDL_BlendMode blendMode);
public function extern "%" int SDL_SetSurfaceColorMod(rawptr{SDL_Surface} surface, Uint8 r, Uint8 g, Uint8 b);
public function extern "%" int SDL_SetSurfacePalette(rawptr{SDL_Surface} surface, rawptr{SDL_Palette} palette);
public function extern "%" int SDL_SetSurfaceRLE(rawptr{SDL_Surface} surface, int flag);
public function extern "%" void SDL_SetTextInputRect(rawptr{SDL_Rect} rect);
public function extern "%" int SDL_SetTextureAlphaMod(rawptr{SDL_Texture} texture, Uint8 alpha);
public function extern "%" int SDL_SetTextureBlendMode(rawptr{SDL_Texture} texture, SDL_BlendMode blendMode);
public function extern "%" int SDL_SetTextureColorMod(rawptr{SDL_Texture} texture, Uint8 r, Uint8 g, Uint8 b);
public function extern "%" int SDL_SetTextureScaleMode(rawptr{SDL_Texture} texture, SDL_ScaleMode scaleMode);
public function extern "%" int SDL_SetTextureUserData(rawptr{SDL_Texture} texture, rawptr{void} userdata);
public function extern "%" int SDL_SetThreadPriority(SDL_ThreadPriority priority);
public function extern "%" void SDL_SetWindowAlwaysOnTop(rawptr{SDL_Window} window, SDL_bool on_top);
public function extern "%" void SDL_SetWindowBordered(rawptr{SDL_Window} window, SDL_bool bordered);
public function extern "%" int SDL_SetWindowBrightness(rawptr{SDL_Window} window, float brightness);
public function extern "%" rawptr{void} SDL_SetWindowData(rawptr{SDL_Window} window, ccharptr name, rawptr{void} userdata);
public function extern "%" int SDL_SetWindowDisplayMode(rawptr{SDL_Window} window, crawptr{SDL_DisplayMode} mode);
public function extern "%" int SDL_SetWindowFullscreen(rawptr{SDL_Window} window, Uint32 flags);
public function extern "%" int SDL_SetWindowGammaRamp(rawptr{SDL_Window} window, crawptr{Uint16} red, crawptr{Uint16} green, crawptr{Uint16} blue);
public function extern "%" void SDL_SetWindowGrab(rawptr{SDL_Window} window, SDL_bool grabbed);
/* public function extern "%" int SDL_SetWindowHitTest(); */
public function extern "%" void SDL_SetWindowIcon(rawptr{SDL_Window} window, rawptr{SDL_Surface} icon);
public function extern "%" int SDL_SetWindowInputFocus(rawptr{SDL_Window} window);
public function extern "%" void SDL_SetWindowKeyboardGrab(rawptr{SDL_Window} window, SDL_bool grabbed);
public function extern "%" void SDL_SetWindowMaximumSize(rawptr{SDL_Window} window, int max_w, int max_h);
public function extern "%" void SDL_SetWindowMinimumSize(rawptr{SDL_Window} window, int min_w, int min_h);
public function extern "%" int SDL_SetWindowModalFor(rawptr{SDL_Window} modal_window, rawptr{SDL_Window} parent_window);
public function extern "%" void SDL_SetWindowMouseGrab(rawptr{SDL_Window} window, SDL_bool grabbed);
public function extern "%" int SDL_SetWindowMouseRect(rawptr{SDL_Window} window, crawptr{SDL_Rect} rect);
public function extern "%" int SDL_SetWindowOpacity(rawptr{SDL_Window} window, float opacity);
public function extern "%" void SDL_SetWindowPosition(rawptr{SDL_Window} window, int x, int y);
public function extern "%" void SDL_SetWindowResizable(rawptr{SDL_Window} window, SDL_bool resizable);
public function extern "%" int SDL_SetWindowShape(rawptr{SDL_Window} window, rawptr{SDL_Surface} shape, rawptr{SDL_WindowShapeMode} shape_mode);
public function extern "%" void SDL_SetWindowSize(rawptr{SDL_Window} window, int w, int h);
public function extern "%" void SDL_SetWindowTitle(rawptr{SDL_Window} window, ccharptr title);
public function extern "%" void SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);
public function extern "%" int SDL_ShowCursor(int toggle);
public function extern "%" int SDL_ShowMessageBox(crawptr{SDL_MessageBoxData} messageboxdata, rawptr{int} buttonid);
public function extern "%" int SDL_ShowSimpleMessageBox(Uint32 flags, ccharptr title, ccharptr message, rawptr{SDL_Window} window);
public function extern "%" void SDL_ShowWindow(rawptr{SDL_Window} window);
public function extern "%" int SDL_SoftStretch(rawptr{SDL_Surface} src, crawptr{SDL_Rect} srcrect, rawptr{SDL_Surface} dst, crawptr{SDL_Rect} dstrect);
public function extern "%" int SDL_SoftStretchLinear(rawptr{SDL_Surface} src, crawptr{SDL_Rect} srcrect, rawptr{SDL_Surface} dst, crawptr{SDL_Rect} dstrect);
public function extern "%" void SDL_StartTextInput();
public function extern "%" void SDL_StopTextInput();
public function extern "%" void SDL_TLSCleanup();
public function extern "%" SDL_TLSID SDL_TLSCreate();
public function extern "%" rawptr{void} SDL_TLSGet(SDL_TLSID id);
public function extern "%" SDL_threadID SDL_ThreadID();
public function extern "%" int SDL_TryLockMutex(rawptr{SDL_mutex} mutex);
public function extern "%" void SDL_UnionRect(crawptr{SDL_Rect} A, crawptr{SDL_Rect} B, rawptr{SDL_Rect} result);
public function extern "%" void SDL_UnloadObject(rawptr{void} handle);
public function extern "%" void SDL_UnlockAudio();
public function extern "%" void SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);
public function extern "%" void SDL_UnlockJoysticks();
public function extern "%" int SDL_UnlockMutex(rawptr{SDL_mutex} mutex);
public function extern "%" void SDL_UnlockSensors();
public function extern "%" void SDL_UnlockSurface(rawptr{SDL_Surface} surface);
public function extern "%" void SDL_UnlockTexture(rawptr{SDL_Texture} texture);
public function extern "%" int SDL_UpdateNVTexture(rawptr{SDL_Texture} texture, crawptr{SDL_Rect} rect, crawptr{Uint8} Yplane, int Ypitch, crawptr{Uint8} UVplane, int UVpitch);
public function extern "%" int SDL_UpdateTexture(rawptr{SDL_Texture} texture, crawptr{SDL_Rect} rect, crawptr{void} pixels, int pitch);
public function extern "%" int SDL_UpdateWindowSurface(rawptr{SDL_Window} window);
public function extern "%" int SDL_UpdateWindowSurfaceRects(rawptr{SDL_Window} window, crawptr{SDL_Rect} rects, int numrects);
public function extern "%" int SDL_UpdateYUVTexture(rawptr{SDL_Texture} texture, crawptr{SDL_Rect} rect, crawptr{Uint8} Yplane, int Ypitch, crawptr{Uint8} Uplane, int Upitch, crawptr{Uint8} Vplane, int Vpitch);
public threaded function extern "%" int SDL_UpperBlit(rawptr{SDL_Surface} src, crawptr{SDL_Rect} srcrect, rawptr{SDL_Surface} dst, rawptr{SDL_Rect} dstrect);
public threaded function extern "%" int SDL_UpperBlitScaled(rawptr{SDL_Surface} src, crawptr{SDL_Rect} srcrect, rawptr{SDL_Surface} dst, rawptr{SDL_Rect} dstrect);
public function extern "%" int SDL_VideoInit(ccharptr driver_name);
public function extern "%" void SDL_VideoQuit();
/* public function extern "%" SDL_bool SDL_Vulkan_CreateSurface(); */
public function extern "%" void SDL_Vulkan_GetDrawableSize(rawptr{SDL_Window} window, rawptr{int} w, rawptr{int} h);
public function extern "%" SDL_bool SDL_Vulkan_GetInstanceExtensions(rawptr{SDL_Window} window, rawptr{uint} pCount, rawptr{ccharptr} pNames);
public function extern "%" rawptr{void} SDL_Vulkan_GetVkGetInstanceProcAddr();
public function extern "%" int SDL_Vulkan_LoadLibrary(ccharptr path);
public function extern "%" void SDL_Vulkan_UnloadLibrary();
public function extern "%" int SDL_WaitEvent(rawptr{SDL_Event} event);
public function extern "%" int SDL_WaitEventTimeout(rawptr{SDL_Event} event, int timeout);
public function extern "%" void SDL_WaitThread(rawptr{SDL_Thread} thread, rawptr{int} status);
public function extern "%" int SDL_WarpMouseGlobal(int x, int y);
public function extern "%" void SDL_WarpMouseInWindow(rawptr{SDL_Window} window, int x, int y);
public function extern "%" Uint32 SDL_WasInit(Uint32 flags);
/* public function extern "%"  SDL_WriteBE16(); */
/* public function extern "%"  SDL_WriteBE32(); */
/* public function extern "%"  SDL_WriteBE64(); */
/* public function extern "%"  SDL_WriteLE16(); */
/* public function extern "%"  SDL_WriteLE32(); */
/* public function extern "%"  SDL_WriteLE64(); */
/* public function extern "%"  SDL_WriteU8(); */
public function extern "%" int SDL_abs(int x);
public function extern "%" double SDL_acos(double x);
public function extern "%" float SDL_acosf(float x);
public function extern "%" double SDL_asin(double x);
public function extern "%" float SDL_asinf(float x);
public function extern "%" double SDL_atan(double x);
public function extern "%" double SDL_atan2(double y, double x);
public function extern "%" float SDL_atan2f(float y, float x);
public function extern "%" float SDL_atanf(float x);
public function extern "%" double SDL_atof(ccharptr str);
public function extern "%" int SDL_atoi(ccharptr str);
/* public function extern "%" rawptr{void} SDL_calloc(); */
public function extern "%" double SDL_ceil(double x);
public function extern "%" float SDL_ceilf(float x);
public function extern "%" double SDL_copysign(double x, double y);
public function extern "%" float SDL_copysignf(float x, float y);
public function extern "%" double SDL_cos(double x);
public function extern "%" float SDL_cosf(float x);
/* public function extern "%" Uint32 SDL_crc32(); */
public function extern "%" double SDL_exp(double x);
public function extern "%" float SDL_expf(float x);
public function extern "%" double SDL_fabs(double x);
public function extern "%" float SDL_fabsf(float x);
public function extern "%" double SDL_floor(double x);
public function extern "%" float SDL_floorf(float x);
public function extern "%" double SDL_fmod(double x, double y);
public function extern "%" float SDL_fmodf(float x, float y);
public function extern "%" void SDL_free(rawptr{void} mem);
public function extern "%" charptr SDL_getenv(ccharptr name);
public function extern "%" void SDL_hid_ble_scan(SDL_bool active);
public function extern "%" void SDL_hid_close(rawptr{SDL_hid_device} dev);
public function extern "%" Uint32 SDL_hid_device_change_count();
/* public function extern "%" rawptr{SDL_hid_device_info} SDL_hid_enumerate(); */
public function extern "%" int SDL_hid_exit();
public function extern "%" void SDL_hid_free_enumeration(rawptr{SDL_hid_device_info} devs);
/* public function extern "%" int SDL_hid_get_feature_report(); */
/* public function extern "%" int SDL_hid_get_indexed_string(); */
/* public function extern "%" int SDL_hid_get_manufacturer_string(); */
/* public function extern "%" int SDL_hid_get_product_string(); */
/* public function extern "%" int SDL_hid_get_serial_number_string(); */
public function extern "%" int SDL_hid_init();
/* public function extern "%" rawptr{SDL_hid_device} SDL_hid_open(); */
public function extern "%" rawptr{SDL_hid_device} SDL_hid_open_path(ccharptr path, int bExclusive);
/* public function extern "%" int SDL_hid_read(); */
/* public function extern "%" int SDL_hid_read_timeout(); */
/* public function extern "%" int SDL_hid_send_feature_report(); */
public function extern "%" int SDL_hid_set_nonblocking(rawptr{SDL_hid_device} dev, int nonblock);
/* public function extern "%" int SDL_hid_write(); */
/* public function extern "%"  SDL_iconv(); */
public function extern "%" int SDL_iconv_close(SDL_iconv_t cd);
public function extern "%" SDL_iconv_t SDL_iconv_open(ccharptr tocode, ccharptr fromcode);
/* public function extern "%" charptr SDL_iconv_string(); */
public function extern "%" int SDL_isalnum(int x);
public function extern "%" int SDL_isalpha(int x);
public function extern "%" int SDL_isblank(int x);
public function extern "%" int SDL_iscntrl(int x);
public function extern "%" int SDL_isdigit(int x);
public function extern "%" int SDL_isgraph(int x);
public function extern "%" int SDL_islower(int x);
public function extern "%" int SDL_isprint(int x);
public function extern "%" int SDL_ispunct(int x);
public function extern "%" int SDL_isspace(int x);
public function extern "%" int SDL_isupper(int x);
public function extern "%" int SDL_isxdigit(int x);
public function extern "%" charptr SDL_itoa(int value, charptr str, int radix);
public function extern "%" charptr SDL_lltoa(Sint64 value, charptr str, int radix);
public function extern "%" double SDL_log(double x);
public function extern "%" double SDL_log10(double x);
public function extern "%" float SDL_log10f(float x);
public function extern "%" float SDL_logf(float x);
public function extern "%" long SDL_lround(double x);
public function extern "%" long SDL_lroundf(float x);
public function extern "%" charptr SDL_ltoa(long value, charptr str, int radix);
/* public function extern "%" rawptr{void} SDL_malloc(); */
/* public function extern "%" int SDL_memcmp(); */
public function extern "%" double SDL_pow(double x, double y);
public function extern "%" float SDL_powf(float x, float y);
/* public function extern "%" rawptr{void} SDL_realloc(); */
public function extern "%" double SDL_round(double x);
public function extern "%" float SDL_roundf(float x);
public function extern "%" double SDL_scalbn(double x, int n);
public function extern "%" float SDL_scalbnf(float x, int n);
public function extern "%" int SDL_setenv(ccharptr name, ccharptr value, int overwrite);
public function extern "%" double SDL_sin(double x);
public function extern "%" float SDL_sinf(float x);
public function extern "%" double SDL_sqrt(double x);
public function extern "%" float SDL_sqrtf(float x);
public function extern "%" int SDL_strcasecmp(ccharptr str1, ccharptr str2);
public function extern "%" charptr SDL_strchr(ccharptr str, int c);
public function extern "%" int SDL_strcmp(ccharptr str1, ccharptr str2);
public function extern "%" charptr SDL_strdup(ccharptr str);
/* public function extern "%"  SDL_strlen(); */
public function extern "%" charptr SDL_strlwr(charptr str);
/* public function extern "%" int SDL_strncasecmp(); */
/* public function extern "%" int SDL_strncmp(); */
public function extern "%" charptr SDL_strrchr(ccharptr str, int c);
public function extern "%" charptr SDL_strrev(charptr str);
public function extern "%" charptr SDL_strstr(ccharptr haystack, ccharptr needle);
public function extern "%" double SDL_strtod(ccharptr str, rawptr{charptr} endp);
public function extern "%" charptr SDL_strtokr(charptr s1, ccharptr s2, rawptr{charptr} saveptr);
public function extern "%" long SDL_strtol(ccharptr str, rawptr{charptr} endp, int base);
public function extern "%" Sint64 SDL_strtoll(ccharptr str, rawptr{charptr} endp, int base);
public function extern "%" ulong SDL_strtoul(ccharptr str, rawptr{charptr} endp, int base);
public function extern "%" Uint64 SDL_strtoull(ccharptr str, rawptr{charptr} endp, int base);
public function extern "%" charptr SDL_strupr(charptr str);
public function extern "%" double SDL_tan(double x);
public function extern "%" float SDL_tanf(float x);
public function extern "%" int SDL_tolower(int x);
public function extern "%" int SDL_toupper(int x);
public function extern "%" double SDL_trunc(double x);
public function extern "%" float SDL_truncf(float x);
public function extern "%" charptr SDL_uitoa(uint value, charptr str, int radix);
public function extern "%" charptr SDL_ulltoa(Uint64 value, charptr str, int radix);
public function extern "%" charptr SDL_ultoa(ulong value, charptr str, int radix);
/* public function extern "%"  SDL_utf8strlen(); */
/* public function extern "%" int SDL_vasprintf(); */
/* public function extern "%" int SDL_vsscanf(); */
/* public function extern "%" int SDL_wcscasecmp(); */
/* public function extern "%" int SDL_wcscmp(); */
/* public function extern "%"  SDL_wcsdup(); */
/* public function extern "%"  SDL_wcslen(); */
/* public function extern "%" int SDL_wcsncasecmp(); */
/* public function extern "%" int SDL_wcsncmp(); */
/* public function extern "%"  SDL_wcsstr(); */
public threaded function extern "%" void TTF_ByteSwappedUNICODE(SDL_bool swapped);
public threaded function extern "%" void TTF_CloseFont(rawptr{TTF_Font} font);
public threaded function extern "%" int TTF_FontAscent(crawptr{TTF_Font} font);
public threaded function extern "%" int TTF_FontDescent(crawptr{TTF_Font} font);
public threaded function extern "%" charptr TTF_FontFaceFamilyName(crawptr{TTF_Font} font);
public threaded function extern "%" int TTF_FontFaceIsFixedWidth(crawptr{TTF_Font} font);
public threaded function extern "%" charptr TTF_FontFaceStyleName(crawptr{TTF_Font} font);
public threaded function extern "%" long TTF_FontFaces(crawptr{TTF_Font} font);
public threaded function extern "%" int TTF_FontHeight(crawptr{TTF_Font} font);
public threaded function extern "%" int TTF_FontLineSkip(crawptr{TTF_Font} font);
public threaded function extern "%" int TTF_GetFontHinting(crawptr{TTF_Font} font);
public threaded function extern "%" int TTF_GetFontKerning(crawptr{TTF_Font} font);
public threaded function extern "%" int TTF_GetFontOutline(crawptr{TTF_Font} font);
public threaded function extern "%" int TTF_GetFontStyle(crawptr{TTF_Font} font);
public threaded function extern "%" void TTF_GetFreeTypeVersion(rawptr{int} major, rawptr{int} minor, rawptr{int} patch);
public threaded function extern "%" void TTF_GetHarfBuzzVersion(rawptr{int} major, rawptr{int} minor, rawptr{int} patch);
public threaded function extern "%" int TTF_GlyphIsProvided(rawptr{TTF_Font} font, Uint16 ch);
public threaded function extern "%" int TTF_GlyphIsProvided32(rawptr{TTF_Font} font, Uint32 ch);
public threaded function extern "%" int TTF_GlyphMetrics(rawptr{TTF_Font} font, Uint16 ch, rawptr{int} minx, rawptr{int} maxx, rawptr{int} miny, rawptr{int} maxy, rawptr{int} advance);
public threaded function extern "%" int TTF_GlyphMetrics32(rawptr{TTF_Font} font, Uint32 ch, rawptr{int} minx, rawptr{int} maxx, rawptr{int} miny, rawptr{int} maxy, rawptr{int} advance);
public threaded function extern "%" int TTF_Init();
public threaded function extern "%" crawptr{SDL_version} TTF_Linked_Version();
public threaded function extern "%" int TTF_MeasureText(rawptr{TTF_Font} font, ccharptr text, int measure_width, rawptr{int} extent, rawptr{int} count);
public threaded function extern "%" int TTF_MeasureUNICODE(rawptr{TTF_Font} font, crawptr{Uint16} text, int measure_width, rawptr{int} extent, rawptr{int} count);
public threaded function extern "%" int TTF_MeasureUTF8(rawptr{TTF_Font} font, ccharptr text, int measure_width, rawptr{int} extent, rawptr{int} count);
public threaded function extern "%" rawptr{TTF_Font} TTF_OpenFont(ccharptr file, int ptsize);
public threaded function extern "%" rawptr{TTF_Font} TTF_OpenFontDPI(ccharptr file, int ptsize, uint hdpi, uint vdpi);
public threaded function extern "%" rawptr{TTF_Font} TTF_OpenFontDPIRW(rawptr{SDL_RWops} src, int freesrc, int ptsize, uint hdpi, uint vdpi);
public threaded function extern "%" rawptr{TTF_Font} TTF_OpenFontIndex(ccharptr file, int ptsize, long index);
public threaded function extern "%" rawptr{TTF_Font} TTF_OpenFontIndexDPI(ccharptr file, int ptsize, long index, uint hdpi, uint vdpi);
public threaded function extern "%" rawptr{TTF_Font} TTF_OpenFontIndexDPIRW(rawptr{SDL_RWops} src, int freesrc, int ptsize, long index, uint hdpi, uint vdpi);
public threaded function extern "%" rawptr{TTF_Font} TTF_OpenFontIndexRW(rawptr{SDL_RWops} src, int freesrc, int ptsize, long index);
public threaded function extern "%" rawptr{TTF_Font} TTF_OpenFontRW(rawptr{SDL_RWops} src, int freesrc, int ptsize);
public threaded function extern "%" void TTF_Quit();
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderGlyph32_Blended(rawptr{TTF_Font} font, Uint32 ch, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderGlyph32_Shaded(rawptr{TTF_Font} font, Uint32 ch, SDL_Color fg, SDL_Color bg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderGlyph32_Solid(rawptr{TTF_Font} font, Uint32 ch, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderGlyph_Blended(rawptr{TTF_Font} font, Uint16 ch, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderGlyph_Shaded(rawptr{TTF_Font} font, Uint16 ch, SDL_Color fg, SDL_Color bg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderGlyph_Solid(rawptr{TTF_Font} font, Uint16 ch, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderText_Blended(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderText_Blended_Wrapped(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg, Uint32 wrapLength);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderText_Shaded(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg, SDL_Color bg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderText_Shaded_Wrapped(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg, SDL_Color bg, Uint32 wrapLength);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderText_Solid(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderText_Solid_Wrapped(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg, Uint32 wrapLength);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUNICODE_Blended(rawptr{TTF_Font} font, crawptr{Uint16} text, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUNICODE_Blended_Wrapped(rawptr{TTF_Font} font, crawptr{Uint16} text, SDL_Color fg, Uint32 wrapLength);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUNICODE_Shaded(rawptr{TTF_Font} font, crawptr{Uint16} text, SDL_Color fg, SDL_Color bg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUNICODE_Shaded_Wrapped(rawptr{TTF_Font} font, crawptr{Uint16} text, SDL_Color fg, SDL_Color bg, Uint32 wrapLength);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUNICODE_Solid(rawptr{TTF_Font} font, crawptr{Uint16} text, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUNICODE_Solid_Wrapped(rawptr{TTF_Font} font, crawptr{Uint16} text, SDL_Color fg, Uint32 wrapLength);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUTF8_Blended(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUTF8_Blended_Wrapped(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg, Uint32 wrapLength);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUTF8_Shaded(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg, SDL_Color bg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUTF8_Shaded_Wrapped(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg, SDL_Color bg, Uint32 wrapLength);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUTF8_Solid(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg);
public threaded function extern "%" rawptr{SDL_Surface} TTF_RenderUTF8_Solid_Wrapped(rawptr{TTF_Font} font, ccharptr text, SDL_Color fg, Uint32 wrapLength);
public threaded function extern "%" int TTF_SetDirection(int direction);
public threaded function extern "%" void TTF_SetFontHinting(rawptr{TTF_Font} font, int hinting);
public threaded function extern "%" void TTF_SetFontKerning(rawptr{TTF_Font} font, int allowed);
public threaded function extern "%" void TTF_SetFontOutline(rawptr{TTF_Font} font, int outline);
public threaded function extern "%" int TTF_SetFontSize(rawptr{TTF_Font} font, int ptsize);
public threaded function extern "%" int TTF_SetFontSizeDPI(rawptr{TTF_Font} font, int ptsize, uint hdpi, uint vdpi);
public threaded function extern "%" void TTF_SetFontStyle(rawptr{TTF_Font} font, int style);
public threaded function extern "%" int TTF_SetScript(int script);
public threaded function extern "%" int TTF_SizeText(rawptr{TTF_Font} font, ccharptr text, rawptr{int} w, rawptr{int} h);
public threaded function extern "%" int TTF_SizeUNICODE(rawptr{TTF_Font} font, crawptr{Uint16} text, rawptr{int} w, rawptr{int} h);
public threaded function extern "%" int TTF_SizeUTF8(rawptr{TTF_Font} font, ccharptr text, rawptr{int} w, rawptr{int} h);
public threaded function extern "%" int TTF_WasInit();
