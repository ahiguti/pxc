public threaded namespace pointer::strong "use-unsafe";
public import common -;
public import meta m;

public tsvaluetype struct extern "pxcrt::strong_count" {t}
strong_count(t const& v0)
{
  public metafunction __static_assert__ assert_default_constructible{t};
  public t value = v0;
}

public threaded struct extern "pxcrt::strong" {t}
strong(t const& p0)
{
  public metafunction __static_assert__ assert_tparam_for_strong{t};
  public t const pointer = p0;
}

private metafunction assert_default_constructible{t}
  m::cond{m::is_default_constructible_type{t}, 1,
    m::error{m::concat{"not default constructible: ", m::full_string{t}}}};


private metafunction assert_tparam_for_strong{t}
  m::cond{
    m::and{
      m::eq{m::full_string{m::base{t}}, "pointer::ptr{}"},
      m::eq{m::full_string{m::base{m::at0{t}}},
	"pointer::strong::strong_count{}"}
    },
    1,
    m::error{m::concat{"invalid type: ", m::full_string{t}}}};

extern "types" inline
namespace pxcrt {

template <typename T> struct strong_count
{
  strong_count(const T& v) : value(v), count(0) { }
  strong_count(const strong_count& x) : value(x.value), count(0) { }
  strong_count& operator =(const strong_count& x) {
    if (this != &x) {
      value = x.value;
    }
    return *this;
  }
  void strong_incref() {
    ++count;
  }
  void strong_decref() {
    if (--count == 0) {
      value = T(); /* reset to the default value */
    }
  }
  size_t get_count() const {
    return count;
  }
  T value;
  mutable size_t count;
};

template <typename T> struct strong
{
  strong(const T& p) : pointer(p) {
    pointer->value.strong_incref();
  }
  strong(const strong& x) : pointer(x.pointer) {
    pointer->value.strong_incref();
  }
  strong& operator =(const strong& x) {
    if (&x != this) {
      x.pointer->value.strong_incref();
      pointer->value.strong_decref();
      pointer = x.pointer;
    }
    return *this;
  }
  ~strong() {
    pointer->value.strong_decref();
  }
  T pointer;
};

}; // namespace pxcrt
;

