public threaded namespace pointer::raw "use-unsafe";
public import numeric::integral -;
public import pointer +;
public import generic::datatype -;
public import container::array +;
public import meta m;

public tsvaluetype struct extern "pxcrt::rawptr<>::type" "nocascade" {t}
rawptr
{
  public metafunction value_type t;
}

public tsvaluetype struct extern "pxcrt::crawptr<>::type" "nocascade" {t}
crawptr
{
  public metafunction value_type t;
}

public tsvaluetype struct extern "pxcrt::rawref<>::type" {t}
rawref(t mutable& x)
{
  metafunction __static_assert__ m::cond{
    is_rawref_or_crawref{t},
    m::error{"t is a rawref"},
    1};
  public metafunction value_type t;
}

public tsvaluetype struct extern "pxcrt::crawref<>::type" {t}
crawref(t const& x)
{
  metafunction __static_assert__ m::cond{
    is_rawref_or_crawref{t},
    m::error{"t is a rawref"},
    1};
  public metafunction value_type t;
}

public metafunction ptr_raw to_rawptr;
public metafunction ptr_craw to_crawptr;
public metafunction cptr_raw to_crawptr;
public metafunction cptr_craw to_crawptr;
public metafunction iptr_raw to_crawptr;
public metafunction iptr_craw to_crawptr;
public metafunction tptr_raw to_rawptr;
public metafunction tptr_craw to_crawptr;
public metafunction tcptr_raw to_crawptr;
public metafunction tcptr_craw to_crawptr;
public metafunction tiptr_raw to_crawptr;
public metafunction tiptr_craw to_crawptr;

public threaded function {t} rawptr{m::at0{t}}
to_rawptr(t const& x)
{
  return address(*x);
}

public threaded function {t} crawptr{m::at0{t}}
to_crawptr(t const& x)
{
  return caddress(*x);
}

public metafunction crawptr___to{tto, tfrom} chk_rawptr_upcast{tto, tfrom};
public metafunction rawptr___to{tto, tfrom} chk_rawptr_upcast{tto, tfrom};

public threaded function {tto, tfrom} tto chk_rawptr_upcast(tfrom x)
{
  metafunction tf m::nameof{tfrom};
  metafunction tt m::nameof{tto};
  metafunction cr "pointer::raw::crawptr";
  metafunction r "pointer::raw::rawptr";
  metafunction fa m::symbol{tfrom, "value_type"};
  metafunction ta m::symbol{tto, "value_type"};
  if (m::and{
    m::or{m::eq{tf, cr}, m::eq{tf, r}},
    m::or{m::eq{tt, cr}, m::eq{tt, r}},
    m::not{m::and{m::eq{tt, r}, m::eq{tf, cr}}},
    is_base_class{fa, ta}})
  {
    return rawptr_upcast{tto, tfrom}(x);
  } else {
    return m::error{m::concat{"invalid type: ", m::full_string{tto}, ", ",
      m::full_string{tfrom}}};
  }
}

private threaded function extern "::pxcrt::rawptr_upcast" {tto, tfrom} tto
rawptr_upcast(tfrom x);

public threaded function {t} bool rawptr_is_null(rawptr{t} x)
{
  return x == rawptr{t}();
}

public threaded function {t} bool crawptr_is_null(crawptr{t} x)
{
  return x == crawptr{t}();
}

public tsvaluetype struct extern "pxcrt::nomove" "nonmovable" {t}
nomove(t const& v)
{
  public t value;
}

public threaded struct {fconstr, fdestr}
scoped(expand(m::args{fconstr}))
{
  private metafunction value_type m::ret_type{fconstr};
  private nomove{value_type} hnd = nomove{value_type}(
    fconstr(expand(a: m::arg_names{fconstr}; a)));
  public function value_type get() const
  {
    return hnd.value;
  }
  public function {tto} value_type __to() const
  {
    return hnd.value;
  }
  private function ~ {
    fdestr(hnd.value);
  }
}

public threaded struct {fdestr}
scoped_nullable()
{
  /* value_type must support defcon, operator !=, and copying */
  private metafunction value_type m::arg_type{fdestr, 0};
  public nomove{value_type} hnd = nomove{value_type}(value_type());
  public function void reset(m::arg_type{fdestr, 0} const& v) {
    if (hnd.value != value_type()) {
      fdestr(hnd.value);
    }
    hnd.value = v;
  }
  public function value_type get() const
  {
    return hnd.value;
  }
  public function {tto} value_type __to() const
  {
    return hnd.value;
  }
  private function ~ {
    reset(value_type());
  }
}

public metafunction voidptr rawptr{void};
public metafunction cvoidptr crawptr{void};
public metafunction charptr rawptr{char};
public metafunction ccharptr crawptr{char};

public threaded function extern "pxcrt::address" {t} rawptr{t}
address(t mutable& x);
public threaded function extern "pxcrt::caddress" {t} crawptr{t}
caddress(t const& x);

private threaded function extern "pxcrt::array_to_rawptr" {t}
rawptr{m::symbol{t, "mapped_type"}}
array_to_rawptr(t mutable& x);
private threaded function extern "pxcrt::array_to_crawptr" {t}
crawptr{m::symbol{t, "mapped_type"}}
array_to_crawptr(t const& x);

public threaded function extern "pxcrt::slice_to_rawptr" {t} rawptr{t}
slice_to_rawptr(slice{t} const& x);
public threaded function extern "pxcrt::slice_to_crawptr" {t} crawptr{t}
slice_to_crawptr(slice{t} const& x);
public threaded function extern "pxcrt::cslice_to_crawptr" {t} crawptr{t}
cslice_to_crawptr(cslice{t} const& x);

public metafunction farray_to_rawptr array_to_rawptr;
public metafunction farray_to_crawptr array_to_crawptr;
public metafunction darray_to_rawptr array_to_rawptr;
public metafunction darray_to_crawptr array_to_crawptr;
public metafunction darrayst_to_rawptr array_to_rawptr;
public metafunction darrayst_to_crawptr array_to_crawptr;
public metafunction varray_to_rawptr array_to_rawptr;
public metafunction varray_to_crawptr array_to_crawptr;

public threaded function extern "pxcrt::strlit_to_crawptr" crawptr{uchar}
strlit_to_crawptr(strlit const& x);

public threaded function {tto, tfrom} ccharptr
strlit___to(strlit const& x) /* implicit conversion */
{
  return x.to_crawptr().to_ccharptr(); /* always nul-terminated */
}

public threaded function extern "pxcrt::rawptr_to_voidptr" {t} voidptr
rawptr_to_voidptr(rawptr{t} x);
public threaded function extern "pxcrt::rawptr_to_charptr" {t} charptr
rawptr_to_charptr(rawptr{t} x);
public threaded function extern "pxcrt::crawptr_to_cvoidptr" {t} cvoidptr
crawptr_to_cvoidptr(crawptr{t} x);
public threaded function extern "pxcrt::crawptr_to_ccharptr" {t} ccharptr
crawptr_to_ccharptr(crawptr{t} x);

public threaded function extern "pxcrt::rawptr_cast" {tto, tfrom} rawptr{tto}
rawptr_reinterpret_cast(rawptr{tfrom} x);
public threaded function extern "pxcrt::crawptr_cast" {tto, tfrom} crawptr{tto}
crawptr_reinterpret_cast(crawptr{tfrom} x);

public threaded function extern "pxcrt::rawptr_dynamic_cast" {tto, tfrom}
rawptr{tto}
rawptr_dynamic_cast(rawptr{tfrom} x);
public threaded function extern "pxcrt::crawptr_dynamic_cast" {tto, tfrom}
crawptr{tto}
crawptr_dynamic_cast(crawptr{tfrom} x);

public threaded function extern "pxcrt::crawptr_const_cast" {t} rawptr{t}
crawptr_const_cast(crawptr{t} x);

public threaded function extern "pxcrt::rawptr_eq" {tx, ty}
bool rawptr___eq(tx x, tx y);
public threaded function extern "pxcrt::rawptr_eq" {tx, ty}
bool crawptr___eq(tx x, tx y);
public threaded function extern "pxcrt::rawptr_ne" {tx, ty}
bool rawptr___ne(tx x, tx y);
public threaded function extern "pxcrt::rawptr_ne" {tx, ty}
bool crawptr___ne(tx x, tx y);
public threaded function extern "pxcrt::rawptr_add" {tx, ty}
check_rawptr{tx} rawptr___add(tx x, size_t n);
public threaded function extern "pxcrt::rawptr_add" {tx, ty}
check_crawptr{tx} crawptr___add(tx x, size_t n);
public threaded function extern "pxcrt::rawptr_sub" {tx, ty}
check_rawptr{tx} rawptr___sub(tx x, size_t n);
public threaded function extern "pxcrt::rawptr_sub" {tx, ty}
check_crawptr{tx} crawptr___sub(tx x, size_t n);

public threaded function extern "pxcrt::size_t_to_rawptr" {t} rawptr{t}
size_t_to_rawptr(size_t x);
public threaded function extern "pxcrt::size_t_to_crawptr" {t} crawptr{t}
size_t_to_crawptr(size_t x);

public threaded function extern "pxcrt::rawptr_to_size_t" {t} size_t
rawptr_to_size_t(rawptr{t} x);
public threaded function extern "pxcrt::crawptr_to_size_t" {t} size_t
crawptr_to_size_t(crawptr{t} x);

/* private */

private metafunction check_rawptr{t}
  check_internal{t, "pointer::raw::rawptr"};
private metafunction check_crawptr{t}
  check_internal{t, "pointer::raw::crawptr"};
private metafunction check_internal{t, name}
  m::cond{
    m::and{
      m::eq{m::nameof{t}, name},
      m::ne{m::symbol{t, "value_type"}, void}},
    t,
    m::error{t, ": unexpected type"}};

private metafunction is_rawref_or_crawref{t}
  m::or{
    m::eq{m::nameof{t}, "pointer::raw::rawref"},
    m::eq{m::nameof{t}, "pointer::raw::crawref"}};

private metafunction is_base_class{tderiv, tbase}
  m::apply{
    metafunction{x}
      m::cond{
	/* tbase is the same type as tderiv? */
	m::eq{tbase, tderiv},
	1,
	/* tbase is in the __base__ list of tderiv? */
        m::is_list{x},
	m::ge{m::list_find{x, m::to_string{tbase}}, 0},
	/* otherwise */
        0},
    m::map{
      m::cond{
	m::is_safe_ns{m::nsof{tderiv}},
	m::nil,
	m::symbol{tderiv, "__base__", m::nil}},
      m::to_string}};

extern "types" inline
namespace pxcrt {

template <typename T> struct rawptr { typedef T *type; };
template <typename T> struct crawptr { typedef const T *type; };

template <typename T> struct rawref { typedef T& type; };
template <typename T> struct crawref { typedef const T& type; };

typedef char *charptr;
typedef char const *ccharptr;

template <typename T> struct nomove
{
  nomove(T const& v) : value(v) { }
  T value;
private:
  nomove(nomove const&);
  nomove& operator =(nomove const&);
};

template <typename T> static inline T *
address(T& x) { return &x; }
template <typename T> static inline T const *
caddress(T const& x) { return &x; }

template <typename T> static inline typename T::mapped_type *
array_to_rawptr(T& x) { return x.rawarr(); }
template <typename T> static inline typename T::mapped_type const *
array_to_crawptr(T const& x) { return x.rawarr(); }

template <typename T> static inline T *
slice_to_rawptr(bt_slice<T> const& x) { return x.rawarr(); }
template <typename T> static inline T const *
slice_to_crawptr(bt_cslice<T> const& x) { return x.rawarr(); }
template <typename T> static inline T const *
cslice_to_crawptr(bt_cslice<T> const& x) { return x.rawarr(); }

static inline bt_uchar const *
strlit_to_crawptr(bt_strlit const& x) { return x.rawarr(); }

template <typename T> static inline void *
rawptr_to_voidptr(T *x) { return x; }
template <typename T> static inline void const *
crawptr_to_cvoidptr(T const *x) { return x; }
template <typename T> static inline char *
rawptr_to_charptr(T *x) { return reinterpret_cast<char *>(x); }
template <typename T> static inline char const *
crawptr_to_ccharptr(T const *x) { return reinterpret_cast<const char *>(x); }

template <typename Tto, typename Tfrom> static inline Tto *
rawptr_cast(Tfrom *x) { return reinterpret_cast<Tto *>(x); }
template <typename Tto, typename Tfrom> static inline Tto const *
crawptr_cast(Tfrom const *x) { return reinterpret_cast<Tto const *>(x); }

template <typename Tto, typename Tfrom> static inline Tto *
rawptr_dynamic_cast(Tfrom *x) { return dynamic_cast<Tto *>(x); }
template <typename Tto, typename Tfrom> static inline Tto const *
crawptr_dynamic_cast(Tfrom const *x) { return dynamic_cast<Tto const *>(x); }

template <typename T> static inline T *
crawptr_const_cast(T const *x) { return const_cast<T *>(x); }

template <typename T> static inline T *
size_t_to_rawptr(size_t x) { return reinterpret_cast<T *>(x); }
template <typename T> static inline T const *
size_t_to_crawptr(size_t x) { return reinterpret_cast<T const *>(x); }

template <typename T> static inline bt_size_t
rawptr_to_size_t(T *x) { return reinterpret_cast<bt_size_t>(x); }
template <typename T> static inline bt_size_t
crawptr_to_size_t(T const *x) { return reinterpret_cast<bt_size_t>(x); }

template <typename Tx, typename Ty> static inline bt_bool
rawptr_eq(Tx x, Tx /* not Ty */ y) { return x == y; }
template <typename Tx, typename Ty> static inline bt_bool
rawptr_ne(Tx x, Tx /* not Ty */ y) { return x != y; }
template <typename Tx, typename Ty> static inline Tx
rawptr_add(Tx x, size_t y) { return x + y; }
template <typename Tx, typename Ty> static inline Tx
rawptr_sub(Tx x, size_t y) { return x - y; }

template <typename Tto, typename Tfrom> static inline Tto
rawptr_upcast(Tfrom x)
{
  return x;
}

};
;

