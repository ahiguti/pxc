public threaded namespace pointer::raw_unsafe "export-unsafe";
public import numeric::integral -;
public import pointer -;
public import operator;
public import pointer::raw +;
public import container::array +;
public import meta m;
public import meta::vararg va;

/* unsafe */

public threaded function extern "pxcrt::rawptr_deref__" {t} t mutable&
rawptr_deref__(rawptr{t} x);
public threaded function extern "pxcrt::crawptr_deref__" {t} t const&
crawptr_deref__(crawptr{t} x);

public threaded function extern "pxcrt::rawptr_to_slice" {t} slice{t}
rawptr_to_slice(rawptr{t} x, size_t xlen);
public threaded function extern "pxcrt::crawptr_to_cslice" {t} cslice{t}
crawptr_to_cslice(crawptr{t} x, size_t xlen);

public threaded function {t, tilist} rawptr{t}
new(expand(va::arg_decls_byref{tilist}))
{
  rawptr{t} r;
  r extern "new" t(expand(a: va::arg_names{m::size{tilist}}; a));
  return r;
}

public threaded function {t} void
delete(t x)
{
  if (is_cm_rawptr{t}) {
    delete_impl{t}(x);
  } else {
    m::error{m::concat{"invalid type: ", t}};
  }
}

private metafunction is_cm_rawptr{t}
  m::or{
    m::eq{m::nameof{t}, "pointer::raw::rawptr"},
    m::eq{m::nameof{t}, "pointer::raw::crawptr"}};

private threaded function extern "pxcrt::delete_impl" {t} void
delete_impl(t x);

public threaded function ccharptr varray_c_str(string mutable& x)
{
  const sz = x.size();
  x.reserve(sz + 1);
  const p = x.to_rawptr();
  *(p + sz) = 0;
  return x.to_crawptr().to_ccharptr();
}

extern "types" inline
namespace pxcrt {

template <typename T> static inline T&
rawptr_deref__(T *x) { return *x; }
template <typename T> static inline T const&
crawptr_deref__(T const *x) { return *x; }

template <typename T> static inline bt_slice<T>
rawptr_to_slice(T *x, bt_size_t xlen) { return bt_slice<T>(x, xlen); }
template <typename T> static inline bt_cslice<T>
crawptr_to_cslice(T const *x, bt_size_t xlen) { return bt_cslice<T>(x, xlen); }

template <typename T> static inline void
delete_impl(T x) { delete x; }

}
;

