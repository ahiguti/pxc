namespace pointer::box;
import pointer -;
import meta::common m;
import meta::vararg v;

public threaded function {t, tilist} ptr{t} box(expand(argdecls{tilist}))
{ return box_pointer{ptr{t}, tilist}(expand(a: argnames{tilist}; a)); }
public threaded function {t, tilist} cptr{t} cbox(expand(argdecls{tilist}))
{ return box_pointer{cptr{t}, tilist}(expand(a: argnames{tilist}; a)); }
public threaded function {t, tilist} iptr{t} ibox(expand(argdecls{tilist}))
{ return box_pointer{iptr{t}, tilist}(expand(a: argnames{tilist}; a)); }
public threaded function {t, tilist} tptr{t} tbox(expand(argdecls{tilist}))
{ return box_pointer{tptr{t}, tilist}(expand(a: argnames{tilist}; a)); }
public threaded function {t, tilist} tcptr{t} tcbox(expand(argdecls{tilist}))
{ return box_pointer{tcptr{t}, tilist}(expand(a: argnames{tilist}; a)); }
public threaded function {t, tilist} tiptr{t} tibox(expand(argdecls{tilist}))
{ return box_pointer{tiptr{t}, tilist}(expand(a: argnames{tilist}; a)); }

private metafunction argdecls{tilist} v::arg_decls_bycref{tilist};
private metafunction argnames{tilist} v::arg_names{m::size{tilist}};

private threaded function {tp, tilist} tp box_pointer(expand(argdecls{tilist}))
{
  if (m::eq{m::list{m::at0{tp}}, m::map{tilist, m::at0}}) {
    tp r = tp(a0);
    return r;
  } else {
    tp r = tp(m::at0{tp}(expand(a: argnames{tilist}; a)));
    return r;
  }
}

