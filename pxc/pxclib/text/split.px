public threaded namespace text::split;
public import container::array -;
public import numeric::integral -;
public import numeric::cast -;
public import text::serialize -;
public import meta m;
public import meta::vararg va;
public import meta::family -;

private threaded function {delim, t} size_t
find_delim(t const& a0, size_t pos)
{
  size_t p;
  if (m::is_function{delim}) {
    p = pos;
    while (p < a0.size() && !delim(a0[p])) {
      ++p;
    }
  } else {
    p = find_mapped(a0, pos, static_cast{m::symbol{t, "mapped_type"}}(delim));
  }
  return p;
}

private threaded function {delim, t} size_t
skip_delim(t const& a0, size_t pos)
{
  const sz = a0.size();
  size_t p;
  if (m::is_function{delim}) {
    p = pos;
    while (p < a0.size() && delim(a0[p])) {
      ++p;
    }
  } else {
    p = pos + (pos < sz ? 1u : 0u);
  }
  return p;
}

public threaded function {delim, tlist} void
string_split(expand(split_arg_decls{tlist}))
{ 
  size_t pos = 0;
  if (m::and{
    m::eq{m::size{tlist}, 2},
    is_array_or_slice_type{m::at0{m::at1{tlist}}},
    m::eq{
      m::symbol{m::at0{m::at1{tlist}}, "mapped_type"},
      m::at0{m::at0{tlist}}}})
  {
    const sz = a0.size();
    while (true) {
      size_t const p = find_delim{delim}(a0, pos);
      if (is_string_or_slice_type{
        m::symbol{m::at0{m::at1{tlist}}, "mapped_type"}}) {
        a1.push_back(a0[pos .. p]);
      } else {
        a1.push_back(from_string{m::at0{m::at{tlist, 1}}}(a0[pos .. p]));
      }
      pos = skip_delim{delim}(a0, p);
      if (pos == sz) {
        break;
      }
    }
  } else {
    expand(arg, idx : va::arg_names{m::size{tlist}}) {
      if (m::ne{idx, 0}) {
        size_t const p = find_delim{delim}(a0, pos);
        if (is_string_or_slice_type{m::at0{m::at{tlist, idx}}}) {
          arg = a0[pos .. p];
        } else {
          arg = from_string{m::at0{m::at{tlist, idx}}}(a0[pos .. p]);
        }
        if (m::ne{idx, m::sub{m::size{tlist}, 1}}) {
          pos = skip_delim{delim}(a0, p);
        }
      }
    }
  }
}

public threaded function {delim, tlist} void
string_append_join(expand(concat_arg_decls{tlist}))
{
  expand (a, i: va::arg_names{m::size{tlist}}) {
    if (m::ne{i, 0}) { 
      if (m::and{m::ne{i, 1}, m::ne{delim, ""}}) {
	a0.append(delim);
      }
      metafunction t m::at0{m::at{tlist, i}};
      if (is_string_or_slice_type{t}) {
        a0.append(a);
      } else {
        serialize_to_string{t}(a, a0);
      }
    }
  }
}

public threaded function {delim, tlist} string
string_join(expand(va::arg_decls_bycref{tlist}))
{
  string s;
  expand (a, i: va::arg_names{m::size{tlist}}) {
    { 
      metafunction t m::at0{m::at{tlist, i}};
      if (m::and{m::ne{i, 0}, m::ne{delim, ""}}) {
        s.append(delim);
      }
      if (is_string_or_slice_type{t}) {
        s.append(a);
      } else {
        serialize_to_string{t}(a, s);
      }
    }
  }
  return s;
}

private metafunction split_arg_decls{tlist}
  m::map{
    m::seq{m::size{tlist}},
    metafunction{i}
      m::list{
	m::concat{"a", i},            /* name */
	m::at0{m::at{tlist, i}},      /* type */
	1,                            /* byref */
	m::cond{m::ge{i, 1}, 1, 0}}}; /* mutable */
private metafunction concat_arg_decls{tlist}
  m::map{
    m::seq{m::size{tlist}},
    metafunction{i}
      m::list{
	m::concat{"a", i},            /* name */
	m::at0{m::at{tlist, i}},      /* type */
	1,                            /* byref */
	m::cond{m::ge{i, 1}, 0, 1}}}; /* mutable */

