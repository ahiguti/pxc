public threaded namespace text::json;
public import numeric::integral -;
public import container::array -;
public import text::internal -;
public import generic::generic -;
public import operator;
public import meta m;
public import meta::family mf;
public import numeric::cast n;
public import text::positional p;
public import text::json_encode e;

public threaded struct ser_json {
  // serialize
  public metafunction ser_target_type string;
  public metafunction ser_specialized{tpl, t}
    m::cond{
      m::symbol_exists{t, "append_to_string"}, string_append_memfn{tpl, t},
	// FIXME: escape
      m::symbol_exists{m::nsof{t}, m::concat{t, "_append_to_string"}},
	m::apply{m::symbol{m::nsof{t}, m::concat{t, "_append_to_string"}},
	  tpl, t}, // FIXME: escape
      mf::is_string_or_slice_type{t}, string_append_encode{t},
      mf::is_integral_type{t}, p::integral_to_decimal{t},
      mf::is_fp_type{t}, p::fp_to_decimal,
      m::eq{t, bool}, bool_to_string,
      m::eq{t, unit}, unit_to_string,
      0};
  public metafunction ser_array_begin string_append_char{'['};
  public metafunction ser_array_end string_append_char{']'};
  public metafunction ser_array_sep string_append_char{','};
  public metafunction ser_map_begin string_append_char{'{'};
  public metafunction ser_map_end string_append_char{'}'};
  public metafunction ser_map_sep string_append_char{','};
  public metafunction ser_map_entry_sep string_append_char{':'};
  public metafunction ser_pointer_begin string_append_char{'['};
  public metafunction ser_pointer_end string_append_char{']'};
  public metafunction ser_struct_begin string_append_char{'{'};
  public metafunction ser_struct_end string_append_char{'}'};
  public metafunction ser_struct_sep string_append_char{','};
  public metafunction ser_struct_entry_sep string_append_char{':'};
  public metafunction ser_struct_field_name string_append_encode;
  public metafunction ser_union_begin string_append_char{'{'};
  public metafunction ser_union_end string_append_char{'}'};
  public metafunction ser_union_entry_sep string_append_char{','};
  public metafunction ser_union_field_name string_append_encode;
  public metafunction ser_unknown{fam} unknown_to_string;
  // deserialize
  public metafunction des_source_type cstrref;
  public metafunction des_specialized{tpl, t}
    m::cond{
      m::symbol_exists{t, "parse_from_string"}, string_parse_memfn{tpl, t},
	// FIXME: unescape
      m::symbol_exists{m::nsof{t}, m::concat{t, "_parse_from_string"}},
	m::apply{m::symbol{m::nsof{t}, m::concat{t, "_parse_from_string"}},
	  tpl}, // FIXME: unescape
      mf::is_string_or_slice_type{t}, string_parse_string_unescape,
      mf::is_integral_type{t}, string_parse_integral{t},
      mf::is_fp_type{t}, string_parse_fp{t},
      m::eq{t, bool}, string_parse_bool,
      m::eq{t, unit}, string_parse_unit,
      0};
  public metafunction des_array_begin_cond string_parse_char_cond{'['};
  public metafunction des_array_end_cond string_parse_char_cond{']'};
  public metafunction des_array_end_skip string_parse_char_skip{'[', ']'};
  public metafunction des_array_sep_cond string_parse_char_cond{','};
  public metafunction des_map_begin_cond string_parse_char_cond{'{'};
  public metafunction des_map_end_cond string_parse_char_cond{'}'};
  public metafunction des_map_end_skip string_parse_char_skip{'{', '}'};
  public metafunction des_map_sep_cond string_parse_char_cond{','};
  public metafunction des_map_entry_sep_cond string_parse_char_cond{':'};
  public metafunction des_pointer_begin_cond string_parse_char_cond{'['};
  public metafunction des_pointer_end_skip string_parse_char_skip{'[', ']'};
  public metafunction des_struct_begin_cond string_parse_char_cond{'{'};
  public metafunction des_struct_end_peek_cond
    string_parse_char_peek_cond{'}'};
  public metafunction des_struct_end_skip string_parse_char_skip{'{', '}'};
  public metafunction des_struct_sep_cond string_parse_char_cond{','};
  public metafunction des_struct_entry_sep_cond string_parse_char_cond{':'};
  public metafunction des_struct_field_name_peek string_parse_symbol_peek;
  public metafunction des_union_begin_cond string_parse_char_cond{'{'};
  public metafunction des_union_end_cond string_parse_char_cond{'}'};
  public metafunction des_union_end_skip string_parse_char_skip{'{', '}'};
  public metafunction des_union_sep_cond string_parse_char_cond{','};
  public metafunction des_union_entry_sep_cond string_parse_char_cond{','};
  public metafunction des_union_field_name string_parse_symbol;
  public metafunction des_unknown{fam} string_parse_token_skip;
  public metafunction des_value_skip string_parse_token_skip;
}

private threaded function {tpl, t} void
string_append_memfn(t const& x, string mutable& o)
{
  x.append_to_string{tpl}(o);
}

private threaded function {tpl, t} t
string_parse_memfn(cstrref mutable& s)
{
  t r = make_default{t}();
  r.parse_from_string{tpl}(s);
  return r;
}

private threaded function {t} void unknown_to_string(t const& v,
  string mutable& buf)
{
  buf.append("null");
}

private threaded function void unit_to_string(unit v, string mutable& buf)
{
  buf.append("null");
}

private threaded function void bool_to_string(bool v, string mutable& buf)
{
  if (v) {
    buf.append("true");
  } else {
    buf.append("false");
  }
}

private threaded function {t} void string_append_encode(t const& x,
  string mutable& v)
{
  e::json_encode(x, v);
}

private threaded function {ch} void string_append_char(string mutable& v)
{
  uchar const c = ch;
  v.push_back(c);
}

private threaded function void string_append_none(string mutable& v)
{
} 

private threaded function size_t token_length(cstrref const& s)
{
  if (s.empty()) {
    return 0;
  }
  uchar ch = s[0];
  if (ch == '"') {
    return find_string_close(s[1 .. s.size()]) + 1;
  }
  if (ch == '{' || ch == '[') {
    return find_brace_close(s[1 .. s.size()]) + 1;
  }
  for (size_t i, uchar ch : s) {
    if (ch == '}' || ch == ']' || ch == '"' || ch == ':' ||
      ch == ',' || ch == ' ') {
      return i;
    }
  }
  return s.size();
}

private threaded function size_t find_brace_close(cstrref const& s)
{
  size_t level = 1;
  bool qstr = false;
  for (size_t i, uchar ch : s) {
    if (qstr) {
      if (ch == '"') {
	qstr = false;
      }
    } else {
      if (ch == '}' || ch == ']') {
	if (--level == 0) {
	  return i + 1;
	}
      } else if (ch == '{' || ch == '[') {
	++level;
      } else if (ch == '"') {
	qstr = true;
      }
    }
  }
  return s.size();
}

private threaded function size_t find_string_close(cstrref const& s)
{
  for (size_t i, uchar ch : s) {
    if (ch == '"') {
      return i + 1;
    }
  }
  return s.size();
}

private threaded function void string_skip_space(cstrref mutable& s)
{
  while (!s.empty()) {
    uchar ch = s[0];
    if (ch != ' ') {
      break;
    }
    s.increment_front(1);
  }
}

private threaded function {t, f} t string_parse_token(cstrref mutable& s)
{
  string_skip_space(s);
  size_t const toklen = token_length(s);
  cstrref stok = s[0 .. toklen];
  s.increment_front(toklen);
  return f(stok);
}

private threaded function string string_parse_string_unescape(
  cstrref mutable& s)
{
  return string_parse_token{string, str_decode}(s);
  threaded function string str_decode(cstrref const& stok) {
    string r;
    bool suc;
    e::json_decode(stok, r, suc);
    if (!suc) {
      r = stok;
    }
    return r;
  }
}

private metafunction string_parse_integral{t}
  string_parse_token{t, p::decimal_to_integral{t}};

private metafunction string_parse_fp{t}
  string_parse_token{t, p::decimal_to_fp{t}};

private threaded function bool string_parse_bool(cstrref mutable& s)
{
  return string_parse_token{bool, parse_bool}(s);
  threaded function bool parse_bool(cstrref const& stok) {
    if (stok.empty() || stok == "0" || stok == "false" || stok == "null") {
      return false;
    } else {
      return true;
    }
  }
}

private threaded function unit string_parse_unit(cstrref mutable& s)
{
  string_parse_token_skip(s);
  return unit();
}

private threaded function size_t string_parse_symbol_peek(
  cstrref mutable& stok)
{
  size_t const sz0 = stok.size();
  string_skip_space(stok);
  size_t const sz = stok.size();
  size_t const toklen = token_length(stok);
  stok.decrement_back(sz - toklen);
  if (stok.size() >= 2 && stok[0] == '"' && stok[stok.size() - 1] == '"') {
    stok.increment_front(1);
    stok.decrement_back(1);
  }
  return toklen + (sz - sz0);
  // debug_log("spsp", stok);
}

private threaded function void string_parse_symbol(cstrref mutable& stok,
  cstrref mutable& s)
{
  size_t const sz0 = stok.size();
  string_skip_space(stok);
  size_t const sz1 = stok.size();
  size_t const toklen = token_length(stok);
  stok.decrement_back(sz1 - toklen);
  s.increment_front(toklen + (sz1 - sz0));
  if (stok.size() >= 2 && stok[0] == '"' && stok[stok.size() - 1] == '"') {
    stok.increment_front(1);
    stok.decrement_back(1);
  }
}

private threaded function {ch} bool string_parse_char_cond(cstrref mutable& s)
{
  string_skip_space(s);
  if (s.size() > 0 && s[0] == ch) {
    s.increment_front(1);
    return true;
  } else {
    return false;
  }
}

private threaded function {ch0, ch1} void string_parse_char_skip(
  cstrref mutable& s)
{
  string_skip_space(s);
  size_t level = 1;
  for (size_t i, uchar ch : s) {
    if (ch == ch1) {
      if (--level == 0) {
	s.increment_front(i + 1);
	return;
      }
    } else if (ch == ch0) {
      ++level;
    }
  }
}

private threaded function void string_parse_token_skip(cstrref mutable& s)
{
  string_skip_space(s);
  size_t const toklen = token_length(s);
  s.increment_front(toklen);
}

private threaded function {ch} bool string_parse_char_peek_cond(
  cstrref mutable& s)
{
  string_skip_space(s);
  return !s.empty() && s[0] == ch;
}

