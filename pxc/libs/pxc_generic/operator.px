namespace operator;
public import numeric::integral -;

function {t} t add(t const& x, t const& y) { return x.__add(y); }
function {t} t sub(t const& x, t const& y) { return x.__sub(y); }
function {t} t mul(t const& x, t const& y) { return x.__mul(y); }
function {t} t div(t const& x, t const& y) { return x.__div(y); }
function {t} t mod(t const& x, t const& y) { return x.__mod(y); }
function {t} t or(t const& x, t const& y) { return x.__or(y); }
function {t} t and(t const& x, t const& y) { return x.__and(y); }
function {t} t xor(t const& x, t const& y) { return x.__xor(y); }
function {t} t eq(t const& x, t const& y) { return x.__eq(y); }
function {t} t ne(t const& x, t const& y) { return x.__ne(y); }
function {t} t shiftl(t const& x, t const& y) { return x.__shiftl(y); }
function {t} t shiftr(t const& x, t const& y) { return x.__shiftr(y); }
function {tx, ty} void adda(tx mutable& x, ty const& y) { x.__adda(y); }
function {tx, ty} void suba(tx mutable& x, ty const& y) { x.__suba(y); }
function {tx, ty} void mula(tx mutable& x, ty const& y) { x.__mula(y); }
function {tx, ty} void diva(tx mutable& x, ty const& y) { x.__diva(y); }
function {tx, ty} void moda(tx mutable& x, ty const& y) { x.__moda(y); }
function {tx, ty} void ora(tx mutable& x, ty const& y) { x.__ora(y); }
function {tx, ty} void anda(tx mutable& x, ty const& y) { x.__anda(y); }
function {tx, ty} void xora(tx mutable& x, ty const& y) { x.__xora(y); }
function {tx, ty} void shiftla(tx mutable& x, ty const& y) { x.__shiftla(y); }
function {tx, ty} void shiftra(tx mutable& x, ty const& y) { x.__shiftra(y); }
function {t} t plus(t const& x) { return x.__plus(); }
function {t} t minus(t const& x) { return x.__minus(); }
function {t} t neg(t const& x) { return x.__neg(); }
function {t} t not(t const& x) { return x.__not(); }

