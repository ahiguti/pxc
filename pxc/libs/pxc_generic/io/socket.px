namespace io::socket;
public import numeric::integral -;
public import container::array -;
public import algebraic -;
public import pointer -;
public import io -;
public import io::file -;
public import io::errno -;
public import io::addrinfo ai;

public multithreaded struct extern "pxcio::socket_acceptor" "nodefault"
  socket_acceptor { }
public multithreaded struct extern "pxcio::socket_connector" "nodefault"
  socket_connector { }

public threaded function open_t
accept(socket_acceptor const& sfp, ai::sockaddr_storage mutable& addr_r)
{
  open_t r;
  errno_t err = EOK;
  file f = accept_internal(err, sfp, addr_r);
  if (err != EOK) {
    r.errno = err;
  } else {
    r.value = f;
  }
  return r;
}

public threaded function open_t
connect(socket_connector const& sfp)
{
  open_t r;
  errno_t err = EOK;
  file f = connect_internal(err, sfp);
  if (err != EOK) {
    r.errno = err;
  } else {
    r.value = f;
  }
  return r;
}

public threaded function extern "pxcio::socket_set_recv_timeout"
  errno_t socket_set_recv_timeout(file const& f, uint sec);
public threaded function extern "pxcio::socket_set_send_timeout"
  errno_t socket_set_send_timeout(file const& f, uint sec);

public metafunction socketpair_t errno_or_value{pair{file, file}};

public threaded function socketpair_t
socketpair(io const& iop, ai::family_t family, ai::socktype_t socktype,
  ai::protocol_t protocol)
{
  socketpair_t r;
  errno_t err = EOK;
  vector{file} v = socketpair_internal(iop, err, family, socktype,
    protocol);
  if (err != EOK) {
    r.errno = err;
  } else {
    r.value = pair{file, file}(v[0], v[1]);
  }
  return r;
}

public multithreaded union create_acceptor_t {
  ai::gai_error_t gai_error;
  errno_t errno;
  socket_acceptor value;
}

public threaded function create_acceptor_t create_acceptor(io const& iop,
  cstrref const& host, cstrref const& service, ai::family_t family,
  ai::socktype_t socktype, uint backlog, uint timeout_sec)
{
  create_acceptor_t r;
  const ai = ai::addrinfo(iop, host, service, family, socktype,
    ai::PROTO_UNSPEC, ai::AI_PASSIVE);
  if (ai.get_error() != ai::EAI_OK) {
    r.gai_error = ai.get_error();
  } else {
    errno_t err = EOK;
    const sa = create_socket_acceptor(iop, err, ai.get_sockaddr(), socktype,
      ai::PROTO_UNSPEC, backlog, timeout_sec);
    if (err != EOK) {
      r.errno = err;
    } else {
      r.value = sa;
    }
  }
  return r;
}

public multithreaded union create_connector_t {
  ai::gai_error_t gai_error;
  socket_connector value;
}

public threaded function create_connector_t create_connector(io const& iop,
  cstrref const& host, cstrref const& service, ai::family_t family,
  ai::socktype_t socktype, uint timeout_sec)
{
  create_connector_t r;
  const ai = ai::addrinfo(iop, host, service, family, socktype,
    ai::PROTO_UNSPEC, 0);
  if (ai.get_error() != ai::EAI_OK) {
  } else {
    r.value = create_socket_connector(iop, ai.get_sockaddr(), socktype,
      ai::PROTO_UNSPEC, timeout_sec);
  }
  return r;
}

private threaded function extern "pxcio::create_socket_acceptor"
  socket_acceptor create_socket_acceptor(io const& iop,
    errno_t mutable& err_r, ai::sockaddr_storage const& addr,
    ai::socktype_t socktype, ai::protocol_t protocol, uint listen_backlog,
    uint accept_timeout_sec);
private threaded function extern "pxcio::create_socket_connector"
  socket_connector create_socket_connector(io const& iop,
    ai::sockaddr_storage const& addr, ai::socktype_t socktype,
    ai::protocol_t protocol, uint connect_timeout_sec);
private threaded function extern "pxcio::accept_internal"
  file accept_internal(errno_t mutable& err_r, socket_acceptor const& sfp,
    ai::sockaddr_storage mutable& addr_r);
private threaded function extern "pxcio::connect_internal"
  file connect_internal(errno_t mutable& err_r, socket_connector const& sfp);
private threaded function extern "pxcio::socketpair_internal" vector{file}
socketpair_internal(io const& iop, errno_t mutable& err_r, ai::family_t family,
  ai::socktype_t socktype, ai::protocol_t protocol);

extern "types" inline
namespace pxcio {

struct socket_acceptor_rep {
  /* NOTE: must be immutable. */
  socket_acceptor_rep(int& err_r, sockaddr_storage const& addr, int socktype,
    int protocol, bt_uint backlog, bt_uint timeout_secern);
  const sockaddr_storage addr;
  const int socktype;
  const int protocol;
  const bt_uint timeout_sec;
  const file listener; /* tiptr */
};

struct socket_connector_rep {
  /* NOTE: must be immutable. */
  socket_connector_rep(sockaddr_storage const& addr, int socktype,
    int protocol, bt_uint timeout_sec);
  const sockaddr_storage addr;
  const int socktype;
  const int protocol;
  const bt_uint timeout_sec;
};

typedef pxcrt::rcptr< pxcrt::tircval<socket_acceptor_rep> > socket_acceptor;
typedef pxcrt::rcptr< pxcrt::tircval<socket_connector_rep> > socket_connector;

};
;

extern "implementation" inline
namespace pxcio {

static int socket_acceptor_fd(int& err_r, sockaddr_storage const& addr,
  int socktype, int protocol, int backlog, int timeout_sec)
{
  err_r = 0;
  int fd = ::socket(addr.get_family(), socktype, protocol);
  int e = 0;
  do {
    if (fd < 0) {
      e = -1;
      err_r = errno;
      break;
    }
    e = ::bind(fd, addr.get_sockaddr(), addr.get_len());
    if (e != 0) {
      err_r = errno;
      break;
    }
    e = ::listen(fd, backlog);
    if (e != 0) {
      err_r = errno;
      break;
    }
  } while (0);
  if (e != 0) {
    if (fd >= 0) {
      close(fd);
    }
    return -1;
  }
  return fd;
}

socket_acceptor_rep::socket_acceptor_rep(int& err_r,
  sockaddr_storage const& addr, int socktype, int protocol, bt_uint backlog,
  bt_uint timeout_sec)
  : addr(addr), socktype(socktype), protocol(protocol),
    timeout_sec(timeout_sec),
    listener(create_file(socket_acceptor_fd(err_r, addr, socktype, protocol,
      backlog, timeout_sec)))
{
}

socket_acceptor create_socket_acceptor(::pxcio::io const& iop,
  int& err_r, sockaddr_storage const& addr, int socktype, int protocol,
  bt_uint backlog, bt_uint timeout_sec)
{
  socket_acceptor sa(socket_acceptor::create_rawptr(
    socket_acceptor_rep(
      err_r, addr, socktype, protocol, backlog, timeout_sec)));
  return sa;
}

socket_connector_rep::socket_connector_rep(sockaddr_storage const& addr,
  int socktype, int protocol, bt_uint timeout_sec)
  : addr(addr), socktype(socktype), protocol(protocol),
    timeout_sec(timeout_sec)
{
}

socket_connector create_socket_connector(::pxcio::io const& iop,
  sockaddr_storage const& addr, int socktype, int protocol,
  bt_uint timeout_sec)
{
  socket_connector sc(socket_connector::create_rawptr(
    socket_connector_rep(addr, socktype, protocol, timeout_sec)));
  return sc;
}

file accept_internal(int& err_r, socket_acceptor const& sfp,
  sockaddr_storage& addr_r)
{
  socket_acceptor_rep& sf = sfp->value$z;
  socklen_t len = addr_r.get_maxlen();
  int fd = ::accept(sf.listener->value$z.get(), addr_r.get_sockaddr(), &len);
  if (fd < 0) {
    err_r = errno;
    fd = -1;
  }
  return create_file(fd);
}

file connect_internal(int& err_r, socket_connector const& sfp)
{
  socket_connector_rep& sf = sfp->value$z;
  int e = 0;
  int fd = ::socket(sf.addr.get_family(), sf.socktype, sf.protocol);
  do {
    if (fd < 0) {
      err_r = errno;
      e = -1;
      break;
    }
    if (sf.timeout_sec != 0) {
      struct ::timeval tv = { 0 };
      tv.tv_sec = sf.timeout_sec;
      e = ::setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
      if (e != 0) {
	err_r = errno;
	break;
      }
    }
    e = ::connect(fd, sf.addr.get_sockaddr(), sf.addr.get_len());
    if (e != 0) {
      err_r = errno;
      break;
    }
  } while (0);
  if (e != 0) {
    if (fd >= 0) {
      close(fd);
    }
    fd = -1;
  }
  return create_file(fd);
}

static int setsockopt_common(int fd, int level, int optname,
  const void *val, socklen_t valsz)
{
  int e = ::setsockopt(fd, level, optname, val, valsz);
  return (e == 0) ? 0 : errno;
}

int socket_set_recv_timeout(file const& f, bt_uint sec)
{
  struct ::timeval tv = { 0 };
  tv.tv_sec = sec;
  return setsockopt_common(f->value$z.get(), SOL_SOCKET, SO_RCVTIMEO, &tv,
    sizeof(tv));
}

int socket_set_send_timeout(file const& f, bt_uint sec)
{
  struct ::timeval tv = { 0 };
  tv.tv_sec = sec;
  return setsockopt_common(f->value$z.get(), SOL_SOCKET, SO_SNDTIMEO, &tv,
    sizeof(tv));
}

::pxcrt::pxcvector<file> socketpair_internal(::pxcio::io const& iop,
  int& err_r, int family, int typ, int protocol)
{
  int fds[2];
  const int e = ::socketpair(family, typ, protocol, fds);
  if (e != 0) {
    err_r = errno;
    fds[0] = fds[1] = -1;
  }
  ::pxcrt::pxcvector<file> r;
  if (e == 0) {
    r.push_back(create_file(fds[0]));
    r.push_back(create_file(fds[1]));
  }
  return r;
}

};
;

