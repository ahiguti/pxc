namespace exception::impl;
public import numeric::integral -;
public import container::array -;

extern "types" inline
#include <stdexcept>
#include <vector>
namespace pxcrt {

void throw_invalid_index() __attribute__((noreturn));
void throw_null_dereference() __attribute__((noreturn));
void throw_invalid_field() __attribute__((noreturn));
void throw_would_invalidate() __attribute__((noreturn));
void throw_bad_alloc() __attribute__((noreturn));
void set_stack_trace_limit(size_t sz);

struct exception {
  exception();
  virtual ~exception() throw() { }
  virtual bt_string message() const = 0;
  std::vector<void *> trace;
};

struct logic_error : virtual exception, std::logic_error {
  logic_error();
  virtual bt_string message() const;
};

struct runtime_error : virtual exception, std::runtime_error {
  runtime_error();
  virtual bt_string message() const;
};

struct bad_alloc : virtual exception, std::bad_alloc {
  bad_alloc();
  virtual bt_string message() const;
};

struct invalid_index : logic_error {
  virtual bt_string message() const;
};

struct invalid_field : logic_error {
  virtual bt_string message() const;
};

struct would_invalidate : logic_error {
  virtual bt_string message() const;
};

int main_nothrow(void (*main_f)(void));

}; // namespace pxcrt
;

extern "functions" inline
namespace pxcrt {

bt_string c_exception_message(std::exception const& ex);
bt_string c_exception_stack_trace(std::exception const& ex);

}; // namespace pxcrt
;

extern "implementation" inline
#include <string>
#include <unistd.h>
#ifdef __LINUX__
#include <execinfo.h>
#endif
namespace pxcrt {

logic_error::logic_error() : std::logic_error("pxcrt::logic_error")
{ }
bt_string logic_error::message() const
{ return cstr_to_string("logic_error"); }

runtime_error::runtime_error() : std::runtime_error("pxcrt::runtime_error")
{ }
bt_string runtime_error::message() const
{ return cstr_to_string("runtime_error"); }

bad_alloc::bad_alloc()
{ }
bt_string bad_alloc::message() const
{ return cstr_to_string("bad_alloc"); }

bt_string invalid_index::message() const
{ return cstr_to_string("invalid_index"); }
bt_string invalid_field::message() const
{ return cstr_to_string("invalid_field"); }
bt_string would_invalidate::message() const
{ return cstr_to_string("would_invalidate"); }

void throw_bad_alloc()
{ throw bad_alloc(); }
void throw_invalid_index()
{ throw invalid_index(); }
void throw_invalid_field()
{ throw invalid_field(); }
void throw_would_invalidate()
{ throw would_invalidate(); }

size_t stack_trace_limit = static_cast<size_t>(-1);

void set_stack_trace_limit(size_t sz)
{
  stack_trace_limit = sz;
}

exception::exception()
{
#ifdef __LINUX__
  if (stack_trace_limit != 0) {
    size_t n = std::min(static_cast<size_t>(5), stack_trace_limit);
    while (true) {
      trace.resize(n);
      backtrace(&trace[0], trace.size());
      if (trace[trace.size() - 1] == 0) {
	while (trace[trace.size() - 1] == 0) {
	  trace.resize(trace.size() - 1);
	}
	break;
      }
      size_t n2 = std::min(n * 2, stack_trace_limit);
      if (n2 <= n) {
	break;
      }
      n = n2;
    }
  }
#endif
}

struct auto_free {
  auto_free(void *ptr) : ptr(ptr) { }
  ~auto_free() { free(ptr); }
private:
  auto_free(const auto_free&);
  auto_free& operator =(const auto_free&);
  void *ptr;
};

bt_string c_exception_message(std::exception const& exc)
{
  const exception *const e = dynamic_cast<const exception *>(&exc);
  if (e == 0) {
    const char *const s = exc.what();
    const bt_uchar *const us = reinterpret_cast<const bt_uchar *>(s);
    return bt_string(us, strlen(s));
  } else {
    return e->message();
  }
}

bt_string c_exception_stack_trace(std::exception const& exc)
{
  const exception *const e = dynamic_cast<const exception *>(&exc);
  if (e== 0 || e->trace.empty()) {
    return bt_string();
  }
  bt_string r;
#ifdef __LINUX__
  std::vector<void *> const& tr = e->trace; 
  char **syms = backtrace_symbols(&tr[0], tr.size());
  if (syms == 0) {
    throw_bad_alloc();
  }
  auto_free af(syms);
  for (size_t i = 0; i < tr.size(); ++i) {
    r.append(cstrref(
      reinterpret_cast<const bt_uchar *>(syms[i]), strlen(syms[i])));
    r.push_back('\n');
  }
#endif
  return r;
}

int main_nothrow(void (*main_f)(void))
{
  try {
    try {
      (*main_f)();
    } catch (const std::exception& e) {
      std::string mess;
      bt_string s0 = c_exception_message(e);
      mess.insert(mess.end(), s0.begin(), s0.end());
      if (!mess.empty() && mess[mess.size() - 1] != '\n') {
	mess += "\n";
      }
      bt_string st = c_exception_stack_trace(e);
      mess.insert(mess.end(), st.begin(), st.end());
      ::write(2, mess.data(), mess.size());
      return 1;
    }
  } catch (...) {
    const char *const mess = "main: uncaught exception\n";
    ::write(2, mess, strlen(mess));
    return 1;
  }
  return 0;
}

}; // namespace pxcrt
;

