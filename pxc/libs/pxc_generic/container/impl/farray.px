threaded namespace container::impl::farray "use-unsafe";
public import container::impl::array_common;
public import container::impl::vector;

extern "types" inline
namespace pxcrt {
template <typename T, size_t len>
struct farray {
  typedef T mapped_type;
  typedef size_t size_type;
  typedef T *iterator;
  typedef const T *const_iterator;
  typedef pxcrt::bt_slice<T> range_type;
  typedef pxcrt::bt_cslice<T> crange_type;
  farray() : v() { }
  bool empty() const { return len == 0; }
  size_t size() const { return len; }
  T& operator [](size_type idx) {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  const T& operator [](size_type idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  T value_at(size_type idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  iterator begin() { return v; }
  const_iterator begin() const { return v; }
  iterator end() { return v + len; }
  const_iterator end() const { return v + len; }
  T *rawarr() { return v; }
  const T *rawarr() const { return v; }
private:
  T v[len];
};

}; // namespace pxcrt 
;

