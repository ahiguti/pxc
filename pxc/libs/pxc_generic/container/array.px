namespace container::array "use-unsafe";
public import numeric::integral -;
public import numeric::cast -;
public import container::impl::farray;
public import container::impl::darray;
public import container::impl::vector;
public import container::impl::invguard;
public import container::impl::util;
public import meta m;
public import meta::family mf;
public import meta::vararg va;

public tsvaluetype struct extern "::pxcrt::bt_slice" "slice" {t} slice {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type slice{t};
  public metafunction crange_type slice{t};
  public metafunction non_ephemeral_type vector{t};
  public metafunction rebind{u} slice{u};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "get" t get(size_t i) const;
  public function extern "set" void set(size_t i, t v) const;
  public function extern "next" void next();
  public function extern "pop_front" void pop_front(size_t i);
  public function extern "pop_back" void pop_back(size_t i);
}

public tsvaluetype struct extern "::pxcrt::bt_cslice" "cslice" {t} cslice {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type cslice{t};
  public metafunction crange_type cslice{t};
  public metafunction non_ephemeral_type vector{t};
  public metafunction rebind{u} cslice{u};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "get" t get(size_t i) const;
  public function extern "next" void next();
  public function extern "pop_front" void pop_front(size_t i);
  public function extern "pop_back" void pop_back(size_t i);
}

public metafunction string vector{uchar};
public metafunction dstring darray{uchar};
public metafunction fstring farray{uchar};

public mtvaluetype struct extern "::pxcrt::pxcvector" "varray" {t} vector {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type slice{t};
  public metafunction crange_type cslice{t};
  public metafunction rebind{u} vector{u};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "resize" void resize(size_t i, t const& v);
  public function extern "clear" void clear();
  public function extern "push_back" void push_back(t const& v);
  public function extern "pop_back" t pop_back();
  public function extern "reserve" void reserve(size_t i);
  public function extern "append" void append(crange_type const& v);
  public function extern "insert" void insert(size_t i, crange_type const& v);
  public function extern "erase" void erase(size_t first, size_t last);
}

/* in-place construction */
public function {ts} void
vector_emplace_back(expand(emplace_back_arg_decls{ts}))
{
  metafunction t m::at0{m::at0{m::at0{ts}}};
  t mutable& x = vector_push_back_uninitialized(a0);
  /* no need to handle exceptions here */
  x extern "placement-new" t(expand(a: emplace_back_arg_names{ts}; a));
  vector_rawarr_set_valid_len(a0, a0.size() + 1);
}

private function extern "::pxcrt::pxcvector_push_back_uninitialized" {t}
t mutable& vector_push_back_uninitialized(vector{t} mutable& v);
private function extern "::pxcrt::pxcvector_rawarr_set_valid_len" {t}
void vector_rawarr_set_valid_len(vector{t} mutable& v, size_t len);
private metafunction emplace_back_arg_decls{ts}
  m::map{
    m::seq{m::size{ts}},
    metafunction{i}
      m::list{m::concat{"a", i}, m::at0{m::at{ts, i}},
	m::cond{m::eq{i, 0}, 1, 0}, 1}}; /* 1st arg is by mutable ref */
private metafunction emplace_back_arg_names{ts}
  m::map{m::seq{1, m::size{ts}}, metafunction{i} m::concat{"a", i}};

public tsvaluetype struct extern "::pxcrt::farray" "farray" {t, n} farray {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type slice{t};
  public metafunction crange_type cslice{t};
  public metafunction rebind{u} farray{u, n};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
}

public tsvaluetype struct extern "::pxcrt::darray" "darray" {t}
darray(size_t len, t const& value) {
  public metafunction key_type size_t;
  public metafunction mapped_type t;
  public metafunction range_type slice{t};
  public metafunction crange_type cslice{t};
  public metafunction rebind{u} darray{u};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
}

public metafunction strref slice{uchar};
public metafunction cstrref cslice{uchar};

public tsvaluetype struct extern "::pxcrt::bt_strlit" "farray" strlit {
  public metafunction key_type size_t;
  public metafunction mapped_type uchar;
  public metafunction range_type slice{uchar};
  public metafunction crange_type cslice{uchar};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
}

public threaded function extern "::pxcrt::memcmp_string" {t}
  int memcmp_string(t const& x, t const& y);

public threaded function {typ, tlist} farray{typ, m::size{tlist}}
make_farray(expand(va::arg_decls_bycref{tlist}))
{
  farray{typ, m::size{tlist}} arr;
  expand (a, i: va::arg_names{m::size{tlist}}) {
    if (mf::is_numeric_type{typ}) {
      arr[i] = static_cast{typ}(a);
    } else {
      arr[i] = a;
    }
  }
  return arr;
}

public threaded function {typ, tlist} darray{typ}
make_darray(expand(va::arg_decls_bycref{tlist}))
{
  mutable arr = darray{typ}(m::size{tlist}, typ());
  expand (a, i: va::arg_names{m::size{tlist}}) {
    if (mf::is_numeric_type{typ}) {
      arr[i] = static_cast{typ}(a);
    } else {
      arr[i] = a;
    }
  }
  return arr;
}

public threaded function {typ, tlist} vector{typ}
make_vector(expand(va::arg_decls_bycref{tlist}))
{
  mutable arr = vector{typ}();
  arr.resize(m::size{tlist});
  expand (a, i: va::arg_names{m::size{tlist}}) {
    if (mf::is_numeric_type{typ}) {
      arr[i] = static_cast{typ}(a);
    } else {
      arr[i] = a;
    }
  }
  return arr;
}

public threaded function {t, tk, tm} tk
find_mapped(t const& c, tk k, tm const& x)
{
  if (m::and{mf::is_array_or_slice_type{t},
    m::or{m::eq{tm, char}, m::eq{tm, uchar}}}) {
    return find_mapped_memchr{t}(c, k, x);
  } else {
    tk i;
    tk const sz = c.size();
    for (i = k; i < sz; ++i) {
      extern "disable-bounds-checking" 1;
      if (c[i] == x) { break; }
    }
    return i;
  }
}

private threaded function extern "::pxcrt::find_mapped_memchr" {t}
m::local{t, "key_type"}
find_mapped_memchr(t const& c, m::local{t, "key_type"} const& k,
  m::local{t, "mapped_type"} const& x);

public threaded function {t} void reverse(slice{t} const& x)
{
  metafunction size_type size_t;
  metafunction mapped_type slice{t}:mapped_type;
  size_type s = 0;
  size_type f = x.size();
  while (s < f) {
    extern "disable-bounds-checking" 1;
    --f;
    mapped_type const v = x[s];
    x[s] = x[f];
    x[f] = v;
    ++s;
  }
}

