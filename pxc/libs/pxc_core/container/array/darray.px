public threaded namespace container::array::darray "use-unsafe";
public import container::array::vector;

extern "types" inline
namespace pxcrt {

template <typename T>
struct darray {
  typedef T mapped_type;
  template <typename Tc> friend struct pxcrt::guard_ref;
  template <typename Tc> friend struct pxcrt::guard_val;
  typedef pxcrt::bt_size_t size_type;
  typedef T *iterator;
  typedef const T *const_iterator;
  typedef pxcrt::bt_slice<T> range_type;
  typedef pxcrt::bt_cslice<T> crange_type;
  ~darray() {
    deinitialize_n(start, valid_len);
    deallocate_uninitialized(start, valid_len);
  }
  darray(size_type len, const T& val) {
    construct_fill(len, val);
  }
  darray(const darray& x) {
    construct_copy(x.start, x.valid_len);
  }
  darray(const range_type& x) {
    construct_copy(x.rawarr(), x.size());
  }
  darray(const crange_type& x) {
    construct_copy(x.rawarr(), x.size());
  }
  bool empty() const { return valid_len == 0; }
  size_type size() const { return valid_len; }
  T& operator [](size_type idx) {
    if (idx >= valid_len) { pxcrt::throw_invalid_index(); }
    return start[idx];
  }
  const T& operator [](size_type idx) const {
    if (idx >= valid_len) { pxcrt::throw_invalid_index(); }
    return start[idx];
  }
  T value_at(size_type idx) const {
    if (idx >= valid_len) { pxcrt::throw_invalid_index(); }
    return start[idx];
  }
  iterator begin() { return start; }
  const_iterator begin() const { return start; }
  iterator end() { return start + valid_len; }
  const_iterator end() const { return start + valid_len; }
  T *rawarr() { return start; }
  const T *rawarr() const { return start; }
private:
  void construct_fill(size_type len, const T& val) {
    valid_len = len;
    start = allocate_uninitialized<T>(valid_len);
    if (is_trivially_copyable<T>::value) {
      initialize_fill_n(start, valid_len, val);
    } else {
      PXC_TRY {
	initialize_fill_n(start, valid_len, val);
      } PXC_CATCH(...) {
	deallocate_uninitialized(start, valid_len);
	PXC_RETHROW;
      }
    }
  }
  void construct_copy(const T *arr, size_type len) {
    valid_len = len;
    start = allocate_uninitialized<T>(valid_len);
    if (is_trivially_copyable<T>::value) {
      initialize_copy_n(start, valid_len, arr);
    } else {
      PXC_TRY {
       initialize_copy_n(start, valid_len, arr);
      } PXC_CATCH(...) {
       deallocate_uninitialized(start, valid_len);
       PXC_RETHROW;
      }
    }
  }
private:
  T *start;
  size_type valid_len;
  darray(); /* not allowed */
  darray& operator =(const darray& x); /* not allowed */
};

}; // namespace pxcrt
;
