public threaded namespace container::array::svector "use-unsafe";
public import container::array::vector;

extern "types" inline

#include <algorithm>
#include <limits>

#define PXCRT_DBG_SVECTOR1(x)
#define PXCRT_DBG_SVECTOR2(x)

namespace pxcrt {

struct svector_rep {
  /* must be a pod so that empty_rep is initialized wo constructor call */
  size_t refcnt;
  size_t valid_len;
  size_t alloc_len;
};

extern svector_rep empty_rep; /* for empty value */

template <typename T>
struct svector {
  typedef T mapped_type;
  typedef pxcrt::bt_size_t size_type;
  typedef T *iterator;
  typedef const T *const_iterator;
  typedef pxcrt::bt_slice<T> range_type;
  typedef pxcrt::bt_cslice<T> crange_type;
  svector() : rep(&empty_rep) { }
  svector(const svector& x) : rep(x.rep) { rep_incref(rep); }
  svector(const crange_type& x) {
    rep_init(x.begin(), x.size(), x.size());
    rep_zerofill();
  }
  svector(const range_type& x) {
    rep_init(x.begin(), x.size(), x.size());
    rep_zerofill();
  }
  svector(const T *start, size_type sz, size_type asz) {
    rep_init(start, sz, asz);
    rep_zerofill();
  }
  void operator =(const svector& x) {
    if (&x != this) {
      rep_incref(x.rep);
      rep_decref(rep);
      rep = x.rep;
    }
  }
  ~svector() { rep_decref(rep); }
  bt_bool empty() const { return size() == 0; }
  size_type size() const { return rep->valid_len; }
  size_type find(bt_size_t offset, T const& value) const {
    return array_find(begin(), size(), offset, value);
  }
  T& operator [](size_type idx) {
    if (idx >= size()) { pxcrt::throw_invalid_index(); }
    return begin()[idx];
  }
  const T& operator [](size_type idx) const {
    if (idx >= size()) { pxcrt::throw_invalid_index(); }
    return begin()[idx];
  }
  void resize(size_type sz, T const& x) {
    if (sz == 0) {
      clear();
      return;
    }
    size_type const olen = size();
    rep_make_unique(sz);
    if (sz > olen) {
      initialize_fill_n(end(), sz - olen, x);
      rep->valid_len = sz;
      rep_zerofill();
    }
  }
  void clear() {
    rep_decref(rep);
    rep = &empty_rep;
  }
  void swap(svector& x) {
    svector_rep *orep = rep;
    rep = x.rep;
    x.rep = orep;
  }
  void push_back(T const& x) {
    if (rep->refcnt == 1 && rep->valid_len < rep->alloc_len) {
      /* fast path */
      PXCRT_DBG_SVECTOR2(fprintf(stderr, "fastpath\n"));
      initialize_1(end(), x);
      rep->valid_len += 1;
      rep_zerofill();
      return;
    } else {
      /* slow path */
      PXCRT_DBG_SVECTOR2(fprintf(stderr, "slowpath %zu %zu %zu\n", rep->refcnt,
	rep->valid_len, rep->alloc_len));
      rep_make_unique(size() + 1);
      initialize_1(end(), x);
      rep->valid_len += 1;
      rep_zerofill();
    }
  }
  T pop_back() {
    if (empty()) { pxcrt::throw_invalid_index(); }
    size_type nlen = size() - 1;
    if (nlen == 0) {
      clear();
      return;
    }
    const T r = end()[-1];
    const bool is_uniq = rep->refcnt == 1;
    rep_make_unique(nlen);
    if (is_trivially_copyable<T>::value && sizeof(T) == 1) {
      if (is_uniq) {
	assert(rep->valid_len < rep->alloc_len);
	end() = 0;
      } else {
	/* new copy */
	rep_zerofill();
      }
    }
    return r;
  }
  void reserve(size_type sz) {
    rep_make_unique(std::max(size(), sz));
    rep_zerofill();
  }
  void append(const crange_type& x) {
    append(x.begin(), x.size());
  }
  void append(const T *ptr, size_type len) {
    size_type const olen = size();
    size_type const nlen = olen + len;
    if (nlen < olen) { pxcrt::throw_bad_alloc(); } /* overflow */
    rep_make_unique(nlen);
    initialize_copy_n(begin() + olen, len, ptr);
    rep->valid_len = nlen;
    rep_zerofill();
  }
  void insert(size_type pos, const crange_type& x) {
    size_type const olen = size();
    size_type const plen = x.size();
    size_type const nlen = olen + plen;
    if (pos > olen) { pxcrt::throw_invalid_index(); }
    if (nlen < olen) { pxcrt::throw_bad_alloc(); } /* overflow */
    rep_make_unique(nlen);
    if (plen == 0) { return; }
    insert_n(begin(), rep->valid_len /* modified */, x.begin(), plen, pos);
    rep_zerofill();
  }
  void erase(size_type first, size_type last) {
    size_type const olen = size();
    if (last > olen || first > last) { pxcrt::throw_invalid_index(); }
    if (first >= last) { return; }
    size_type const elen = last - first;
    if (rep->refcnt == 1) {
      /* already unique. erase in-place */
      T *const start = begin();
      copy_n(start + first, olen - last, start + last);
      deinitialize_n(start + olen - elen, elen);
      rep->valid_len -= elen;
    } else {
      /* create a copy */
      svector x(begin(), first, olen - elen);
      x.append(begin() + last, olen - last);
      this->swap(x);
    }
    rep_zerofill();
  }
  const_iterator begin() const {
    return reinterpret_cast<const T *>(
      reinterpret_cast<const char *>(rep) + sizeof(svector_rep));
  }
  const_iterator end() const {
    return begin() + size();
  }
  iterator begin() {
    return reinterpret_cast<T *>(
      reinterpret_cast<char *>(rep) + sizeof(svector_rep));
  }
  iterator end() {
    return begin() + size();
  }
  T *rawarr() { return begin(); }
  const T *rawarr() const { return begin(); }
  template <size_t mul> T *reserve_back(size_type len) {
    if (len >= ((size_t)-1) / mul) {
      pxcrt::throw_bad_alloc(); /* overflow */
    }
    const size_type osz = size();
    const size_type nsz = osz + len * mul;
    if (nsz < osz) {
      pxcrt::throw_bad_alloc(); /* overflow */
    }
    rep_make_unique(nsz);
    rep_zerofill();
    return begin() + osz;
  }
  void rawarr_set_valid_len(size_type len) {
    assert(rep->refcnt == 1);
    rep->valid_len = len;
    rep_zerofill();
  }
  template <typename Tc> struct guard_ref {
    guard_ref(Tc& x) : v(x) { }
    Tc& get() { return v; }
    typename Tc::range_type get_range()
      { return typename Tc::range_type(v); }
    typename Tc::crange_type get_crange()
      { return typename Tc::crange_type(v); }
  private:
    Tc v; /* shares rep */
    guard_ref(const guard_ref&);
    guard_ref& operator =(const guard_ref&);
  };
  template <typename Tc> struct guard_val {
    guard_val(const Tc& x) : v(x) { }
    Tc& get() { return v; }
    typename Tc::range_type get_range()
      { return typename Tc::range_type(v); }
    typename Tc::crange_type get_crange()
      { return typename Tc::crange_type(v); }
  private:
    Tc v;
    guard_val(const guard_val&);
    guard_val& operator =(const guard_val&);
  };
private:
  svector_rep *rep;
private:
  static inline void rep_incref(svector_rep *rep) {
    if (rep->refcnt != 0) {
      PXCRT_DBG_SVECTOR1(fprintf(stderr, "rep_decref incref %p %zu\n", rep,
	rep->refcnt + 1));
      ++rep->refcnt;
    }
  }
  static inline void rep_decref(svector_rep *rep) {
    if (rep->refcnt != 0) {
      PXCRT_DBG_SVECTOR1(fprintf(stderr, "rep_decref decref %p %zu\n", rep,
	rep->refcnt - 1));
      if (--rep->refcnt == 0) {
	T *const p = reinterpret_cast<T *>(
	  reinterpret_cast<char *>(rep) + sizeof(svector_rep));
	deinitialize_n(p, rep->valid_len);
	PXCRT_DBG_SVECTOR1(fprintf(stderr, "rep_decref dealloc %p\n", rep));
	global_deallocate_n(rep,
	  sizeof(svector_rep) + sizeof(T) * rep->alloc_len);
      }
    }
  }
  void rep_zerofill() {
    if (is_trivially_copyable<T>::value && sizeof(T) == 1) {
      char *p = reinterpret_cast<char *>(begin());
      size_t pos = rep->valid_len;
      const size_t epos = (pos + 7) & ~7ULL;
      assert(epos <= rep->alloc_len);
      if (epos != pos) {
	memset(p + pos, 0, epos - pos);
      }
    }
  }
  void rep_init(const T *ptr, size_t sz, size_t asz) {
    rep = &empty_rep;
    assert(rep->refcnt == 0 && rep->valid_len == 0 && rep->alloc_len == 0);
    if (asz != 0) {
      const size_type max_len =
	(-(sizeof(svector_rep) + sizeof(T))) / sizeof(T) - 8;
      if (asz > max_len) { pxcrt::throw_bad_alloc(); }
      if (is_trivially_copyable<T>::value && sizeof(T) == 1) {
//fprintf(stderr, "asz pre=%zu\n", asz);
	asz = (asz + 7) & ~7ULL; /* align for 0-filling */
//fprintf(stderr, "asz post=%zu\n", asz);
      }
      const size_type aszt = asz * sizeof(T) + sizeof(svector_rep);
      void *const vrep = global_allocate_n(aszt);
      svector_rep *const nrep = reinterpret_cast<svector_rep *>(vrep);
      PXCRT_DBG_SVECTOR1(fprintf(stderr, "rep_init alloc %p\n", nrep));
      nrep->refcnt = 1;
      nrep->valid_len = 0;
      nrep->alloc_len = asz;
      T *const start = reinterpret_cast<T *>(
	reinterpret_cast<char *>(nrep) + sizeof(svector_rep));
      if (is_trivially_copyable<T>::value) {
	initialize_copy_n(start, sz, ptr);
	#if 0
	if (sizeof(T) == 1) {
	  /* 0-filling */
	  memset(start + sz, 0, asz - sz);
	}
	#endif
      } else {
	PXC_TRY {
	  initialize_copy_n(start, sz, ptr);
	} PXC_CATCH(...) {
	  PXCRT_DBG_SVECTOR1(fprintf(stderr, "rep_init dealloc %p\n", rep));
	  global_deallocate_n(rep,
	    sizeof(svector_rep) + sizeof(T) * rep->alloc_len);
	  PXC_RETHROW;
	}
      }
      nrep->valid_len = sz;
      rep = nrep;
    }
  }
  void rep_make_unique(size_type asz) {
    if (rep->refcnt != 1) {
      /* need to create a unique rep */
      rep_make_unique_resize(asz);
    } else {
      /* already unique */
      if (asz > rep->alloc_len) {
	/* extend alloc_len */
	size_type nl = rep->alloc_len;
	do {
	  const size_type nl_n = (nl >= 1) ? (nl * 2) : 1;
	  const size_type max_len =
	    (-(sizeof(svector_rep) + sizeof(T))) / sizeof(T) - 8;
	  if (nl_n <= nl || nl_n > max_len) { pxcrt::throw_bad_alloc(); }
	  nl = nl_n;
	} while (nl < asz);
	rep_make_unique_resize(nl);
      } else if (asz < rep->valid_len) {
	/* shrink valid_len */
	deinitialize_n(begin() + asz, rep->valid_len - asz);
	rep->valid_len = asz;
      } else {
	/* nothing to do */
      }
    }
    assert(rep->refcnt == 1);
  }
  void rep_make_unique_resize(size_type asz) {
    if (is_trivially_copyable<T>::value) {
      if (rep->refcnt != 1) {
	svector_rep *const orep = rep;
	asz = std::max(asz, size_type(1));
	  /* set asz nonzero so that rep_init allocate a unique buffer */
	PXCRT_DBG_SVECTOR1(fprintf(stderr, "rep_make_unique_resize init1 %p\n",
	  rep));
	rep_init(begin(), std::min(size(), asz), asz);
	rep_decref(orep);
      } else {
	PXCRT_DBG_SVECTOR1(fprintf(stderr, "rep_make_unique_resize pre %p\n",
	  rep));
	if (sizeof(T) == 1) {
//fprintf(stderr, "asztr pre=%zu\n", asz);
	  asz = (asz + 7) & ~7ULL; /* align for 0-filling */
//fprintf(stderr, "asztr post=%zu\n", asz);
	}
	rep = (svector_rep *)global_reallocate_n(rep,
	    sizeof(svector_rep) + sizeof(T) * rep->alloc_len,
	    sizeof(svector_rep) + sizeof(T) * asz);
	PXCRT_DBG_SVECTOR1(fprintf(stderr, "rep_make_unique_resize post %p\n",
	  rep));
	rep->alloc_len = asz;
	#if 0
	if (sizeof(T) == 1) {
	  /* 0-filling */
	  memset(end(), 0, asz - rep->valid_len);
	}
	#endif
      }
    } else {
      svector_rep *const orep = rep;
      PXC_TRY {
	asz = std::max(asz, size_type(1));
	  /* set asz nonzero so that rep_init allocate a unique buffer */
	rep_init(begin(), std::min(size(), asz), asz);
      } PXC_CATCH(...) {
	rep_decref(orep);
	PXC_RETHROW;
      } 
      rep_decref(orep);
    }
  }
};

template <typename T> struct msvector : public svector<T> {
  typedef pxcrt::bt_size_t size_type;
  typedef pxcrt::bt_slice<T> range_type;
  typedef pxcrt::bt_cslice<T> crange_type;
  msvector() { }
  msvector(const msvector& x) : svector<T>(x) { }
  msvector(const crange_type& x) : svector<T>(x) { }
  msvector(const range_type& x) : svector<T>(x) { }
  msvector(const T *start, size_type sz, size_type asz)
    : svector<T>(start, sz, asz) { }
};

template <typename T> struct csvector : public svector<T> {
  typedef pxcrt::bt_size_t size_type;
  typedef pxcrt::bt_slice<T> range_type;
  typedef pxcrt::bt_cslice<T> crange_type;
  csvector() { }
  csvector(const csvector& x) : svector<T>(x) { }
  csvector(const crange_type& x) : svector<T>(x) { }
  csvector(const range_type& x) : svector<T>(x) { }
  csvector(const T *start, size_type sz, size_type asz)
    : svector<T>(start, sz, asz) { }
};

}; // namespace pxcrt

#undef PXCRT_DBG_SVECTOR1
#undef PXCRT_DBG_SVECTOR2

;

extern "implementation" inline
namespace pxcrt {

svector_rep empty_rep; /* pod */

}; // namespace pxcrt
;

