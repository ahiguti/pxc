public threaded namespace container::array::vector "use-unsafe";
public import container::array::array_common;

extern "types" inline
#include <limits>
namespace pxcrt {

template <typename T>
struct bt_cslice {
  typedef T mapped_type;
  bt_cslice() : v(0), len(0) { }
  bt_cslice(const T *ptr, bt_size_t o) : v(ptr), len(o) { }
  template <typename Tc> bt_cslice(const Tc& c)
    : v(c.rawarr()), len(c.size()) { }
  template <typename Tc> bt_cslice(const Tc& c, bt_size_t o1, bt_size_t o2) {
    if (o2 > c.size()) { o2 = c.size(); }
    if (o1 > o2) { o1 = o2; }
    v = c.rawarr() + o1;
    len = o2 - o1;
  }
  bt_bool empty() const { return len == 0; }
  bt_size_t size() const { return len; }
  bt_size_t find(bt_size_t offset, T const& value) const {
    return array_find(v, len, offset, value);
  }
  void increment_front(size_t i) {
    if (len < i) { pxcrt::throw_invalid_index(); }
    v += i;
    len -= i;
  }
  void decrement_back(size_t i) {
    if (len < i) { pxcrt::throw_invalid_index(); }
    len -= i;
  }
  bt_cslice<T> next_token(T const& delim) {
    bt_size_t const offset = array_find(v, len, 0, delim);
    bt_cslice<T> r(v, offset);
    if (offset < len) {
      v += offset + 1;
      len -= offset + 1;
    } else {
      v += len;
      len = 0;
    }
    return r;
  }
  const T& operator [](bt_size_t idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  const T& operator *() const {
    if (len == 0) { pxcrt::throw_invalid_index(); }
    return *v;
  }
  T value_at(bt_size_t idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  T deref_value() const {
    if (len == 0) { pxcrt::throw_invalid_index(); }
    return *v;
  }
  const T *begin() const { return v; }
  const T *end() const { return v + len; }
  const T *rawarr() const { return v; }
//private:
//  bt_cslice& operator =(const bt_cslice&); /* not allowed */
protected:
  const T *v;
  bt_size_t len;
};

template <typename T>
struct bt_slice {
  typedef T mapped_type;
  bt_slice() : v(0), len(0) { }
  bt_slice(T *ptr, bt_size_t o) : v(ptr), len(o) { }
  template <typename Tc> bt_slice(Tc& c) : v(c.rawarr()), len(c.size()) { }
  template <typename Tc> bt_slice(Tc& c, bt_size_t o1, bt_size_t o2) {
    if (o2 > c.size()) { o2 = c.size(); }
    if (o1 > o2) { o1 = o2; }
    v = c.rawarr() + o1;
    len = o2 - o1;
  }
  bt_bool empty() const { return len == 0; }
  bt_size_t size() const { return len; }
  void set(bt_size_t i, T value) const { if (i < len) v[i] = value; }
  bt_size_t find(bt_size_t offset, T const& value) const {
    return array_find(v, len, offset, value);
  }
  void next() {
    if (len == 0) { pxcrt::throw_invalid_index(); }
    ++v;
    --len;
  }
  void increment_front(size_t i) {
    if (len < i) { pxcrt::throw_invalid_index(); }
    v += i;
    len -= i;
  }
  void decrement_back(size_t i) {
    if (len < i) { pxcrt::throw_invalid_index(); }
    len -= i;
  }
  bt_slice<T> next_token(T delim) {
    bt_size_t const offset = array_find(v, len, 0, delim);
    bt_slice<T> r(v, offset);
    if (offset < len) {
      v += offset + 1;
      len -= offset + 1;
    } else {
      v += len;
      len = 0;
    }
    return r;
  }
  T& operator [](bt_size_t idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  T& operator *() const {
    if (len == 0) { pxcrt::throw_invalid_index(); }
    return *v;
  }
  T value_at(bt_size_t idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  T deref_value() const {
    if (len == 0) { pxcrt::throw_invalid_index(); }
    return *v;
  }
  T *begin() const { return v; }
  T *end() const { return v + len; }
  T *rawarr() const { return v; }
//private:
//  bt_slice& operator =(const bt_slice&); /* not allowed */
protected:
  T *v;
  bt_size_t len;
};

struct bt_strlit : public bt_cslice<bt_uchar> {
  typedef bt_uchar mapped_type;
  typedef bt_uchar char_type;
  typedef size_t size_type;
  typedef const char_type *iterator;
  typedef const char_type *const_iterator;
  typedef bt_cslice<char_type> range_type;
  typedef bt_cslice<char_type> crange_type;
  bt_strlit() { }
  template <size_type n> bt_strlit(const char (& ptr)[n])
    : bt_cslice<bt_uchar>(reinterpret_cast<const char_type *>(ptr), n - 1) { }
  bt_size_t find(bt_size_t offset, char_type const& value) const {
    return array_find(v, len, offset, value);
  }
  bt_strlit& operator =(const bt_strlit& x) { /* allowed */
    v = x.v;
    len = x.len;
    return *this;
  }
};

template <typename T>
struct pxcvector {
  typedef T mapped_type;
  typedef pxcrt::bt_size_t size_type;
  typedef T *iterator;
  typedef const T *const_iterator;
  typedef pxcrt::bt_slice<T> range_type;
  typedef pxcrt::bt_cslice<T> crange_type;
  pxcvector() : start(0), valid_len(0), alloc_len(0), refguard_count(0)
    { }
  ~pxcvector() {
    deinitialize_n(start, valid_len);
    deallocate_uninitialized(start, alloc_len);
  }
  pxcvector(const pxcvector& x)
    { construct_internal(x.start, x.valid_len); }
  pxcvector(const crange_type& x)
    { construct_internal(x.rawarr(), x.size()); }
  pxcvector(const range_type& x)
    { construct_internal(x.rawarr(), x.size()); }
  pxcvector(const T *ptr, size_type len)
    { construct_internal(ptr, len); }
  pxcvector& operator =(const pxcvector& x) {
    check_resize();
    if (&x != this) {
      clear_internal();
      append_internal(x.start, x.valid_len);
    }
    return *this;
  }
  bt_bool empty() const { return valid_len == 0; }
  size_type size() const { return valid_len; }
  bt_size_t find(bt_size_t offset, T const& value) const {
    return array_find(start, valid_len, offset, value);
  }
  T& operator [](size_type idx) {
    if (idx >= valid_len) { pxcrt::throw_invalid_index(); }
    return start[idx];
  }
  const T& operator [](size_type idx) const {
    if (idx >= valid_len) { pxcrt::throw_invalid_index(); }
    return start[idx];
  }
  void resize(size_type sz, T const& x) {
    check_resize();
    if (sz > valid_len) {
      reserve_internal(sz);
      initialize_fill_n(start + valid_len, sz - valid_len, x);
    } else {
      deinitialize_n(start + sz, valid_len - sz);
    }
    valid_len = sz;
  }
  void clear() {
    check_resize();
    clear_internal();
  }
  template <typename Tc> friend Tc&
  pxcvector_push_back_uninitialized(pxcvector<Tc>& v);
  template <typename Tc> friend void
  pxcvector_rawarr_set_valid_len(pxcvector<Tc>& v,
    typename pxcvector<Tc>::size_type len);
  void push_back(T const& x) {
    /* re-ordered for speed */
    if (refguard_count == 0) {
      /* valid_len + 1 never overflows */
      if (valid_len + 1 < alloc_len) {
	/* fast path */
	initialize_1(start + valid_len, x);
	valid_len++;
	return;
      } else {
	/* slow path */
	reserve_internal(valid_len + 1);
	initialize_1(start + valid_len, x);
	valid_len++;
	return;
      }
    } else {
      pxcrt::throw_would_invalidate();
    }
  }
  T pop_back() {
    check_resize();
    if (empty()) { pxcrt::throw_invalid_index(); }
    const T r = start[valid_len - 1];
    deinitialize_1(start + valid_len - 1);
    --valid_len;
    return r;
  }
  void reserve(size_type sz) {
    check_resize();
    reserve_internal(sz);
  }
  void append(const crange_type& x) {
    check_resize();
    append_internal(x.rawarr(), x.size());
  }
  void append(const T *ptr, size_type len) {
    check_resize();
    append_internal(ptr, len);
  }
  void insert(size_type pos, const crange_type& x) {
    check_resize();
    insert_internal(pos, x.rawarr(), x.size());
  }
  void erase(size_type first, size_type last) {
    check_resize();
    erase_internal(first, last);
  }
  iterator begin() { return start; }
  const_iterator begin() const { return start; }
  iterator end() { return start + valid_len; }
  const_iterator end() const { return start + valid_len; }
  T *rawarr() { return start; }
  const T *rawarr() const { return start; }
  template <size_t mul> T *reserve_back(size_type len) {
    check_resize();
    if (len >= ::std::numeric_limits<size_type>::max() / mul) {
      pxcrt::throw_bad_alloc(); /* overflow */
    }
    const size_type osz = valid_len;
    const size_type nsz = osz + len * mul;
    if (nsz < osz) {
      pxcrt::throw_bad_alloc(); /* overflow */
    }
    reserve_internal(nsz);
    return start + osz;
  }
  void rawarr_set_valid_len(size_type len) {
    valid_len = len;
  }
  template <typename Tc> struct guard_ref {
    guard_ref(Tc& x) : v(x) { v.inc_refguard(); }
    ~guard_ref() { v.dec_refguard(); }
    Tc& get() { return v; }
    typename Tc::range_type get_range()
      { return typename Tc::range_type(v); }
    typename Tc::crange_type get_crange()
      { return typename Tc::crange_type(v); }
  private:
    Tc& v;
    guard_ref(const guard_ref&);
    guard_ref& operator =(const guard_ref&);
  };
  template <typename Tc> struct guard_val {
    guard_val(const Tc& x) : v(x) { v.inc_refguard(); }
    ~guard_val() { v.dec_refguard(); }
    Tc& get() { return v; }
    typename Tc::range_type get_range()
      { return typename Tc::range_type(v); }
    typename Tc::crange_type get_crange()
      { return typename Tc::crange_type(v); }
  private:
    Tc v;
    guard_val(const guard_val&);
    guard_val& operator =(const guard_val&);
  };
private:
  void construct_internal(const T *ptr, size_type len) {
    refguard_count = 0;
    alloc_len = valid_len = len;
    start = allocate_uninitialized<T>(alloc_len);
    if (is_trivially_copyable<T>::value) {
      initialize_copy_n(start, valid_len, ptr);
    } else {
      PXC_TRY {
	initialize_copy_n(start, valid_len, ptr);
      } PXC_CATCH(...) {
	deallocate_uninitialized(start, alloc_len);
	PXC_RETHROW;
      }
    }
  }
  void clear_internal() {
    deinitialize_n(start, valid_len);
    valid_len = 0;
  }
  void append_internal(const T *p, size_type len) {
    size_type nlen = valid_len + len;
    if (nlen < valid_len) {
      pxcrt::throw_bad_alloc(); /* overflow */
    }
    reserve_internal(nlen);
    initialize_copy_n(start + valid_len, len, p);
    valid_len = nlen;
  }
  void insert_internal(size_type pos, const T *p, size_type plen) {
    if (plen == 0) {
      return;
    }
    if (pos > valid_len) {
      pxcrt::throw_invalid_index();
    }
    const size_type vlen = valid_len;
    const size_type nlen = vlen + plen;
    if (nlen < vlen) {
      pxcrt::throw_bad_alloc(); /* overflow */
    }
    reserve_internal(nlen);
    insert_n(start, valid_len /* modified */, p, plen, pos);
  }
  void erase_internal(size_type first, size_type last) {
    if (last > valid_len || first > last) {
      pxcrt::throw_invalid_index();
    }
    if (first >= last) {
      return;
    }
    const size_type elen = last - first;
    copy_n(start + first, valid_len - last, start + last);
    deinitialize_n(start + valid_len - elen, elen);
    valid_len -= elen;
  }
  void reserve_internal(size_type len) {
    if (len <= alloc_len) {
      return;
    }
    size_type nl = alloc_len;
    do {
      const size_type nl_n = (nl >= 1) ? (nl * 2) : 1;
      const size_type max_len = ((size_t)-1) / sizeof(T);
      if (nl_n <= nl || nl_n > max_len) {
        PXC_THROW(std::bad_alloc()); /* overflow */
      }
      nl = nl_n;
    } while (nl < len);
    start = reserve_n(start, valid_len, nl);
    alloc_len = nl;
  }
  void check_resize() {
    if (refguard_count != 0) { pxcrt::throw_would_invalidate(); }
  }
  void inc_refguard() const {
    ++refguard_count;
  }
  void dec_refguard() const {
    --refguard_count;
  }
private:
  T *start;
  size_type valid_len;
  size_type alloc_len;
  mutable size_type refguard_count;
};

template <typename T> inline T&
pxcvector_push_back_uninitialized(pxcvector<T>& v)
{
  /* re-ordered for speed */
  if (v.refguard_count == 0) {
    /* valid_len + 1 never overflows */
    if (v.valid_len + 1 < v.alloc_len) {
      /* fast path */
      return v.start[v.valid_len];
    } else {
      /* slow path */
      v.reserve_internal(v.valid_len + 1);
      return v.start[v.valid_len];
    }
  } else {
    pxcrt::throw_would_invalidate();
  }
}

template <typename T> inline void
pxcvector_rawarr_set_valid_len(pxcvector<T>& v,
  typename pxcvector<T>::size_type len)
{
  v.valid_len = len;
}

typedef pxcvector<bt_uchar> bt_string;
typedef bt_slice<bt_uchar> strref;
typedef bt_cslice<bt_uchar> cstrref;

template <typename T> inline int memcmp_string(T const& x, T const& y)
{ return compare_memcmp(x, y); }

inline bt_string cstr_to_string(const char *cstr)
{
  return bt_string(
    reinterpret_cast<const unsigned char *>(cstr),
    strlen(cstr));
}

}; // namespace pxcrt
;

