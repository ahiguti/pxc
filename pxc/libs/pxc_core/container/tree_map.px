threaded namespace container::tree_map "use-unsafe";
public import numeric::integral -;
public import ordered::compare;
public import container::impl::vector;
public import container::impl::tree_map;

public metafunction tree_map{t, s}
  tree_map_compare{t, s, cmp{t}};
public metafunction tree_map_range{t, s}
  tree_map_compare_range{t, s, cmp{t}};
public metafunction tree_map_crange{t, s}
  tree_map_compare_crange{t, s, cmp{t}};

public metafunction tree_set{t}
  tree_set_compare{t, cmp{t}};
public metafunction tree_set_range{t}
  tree_set_compare_range{t, cmp{t}};
public metafunction tree_set_crange{t}
  tree_set_compare_crange{t, cmp{t}};

public metafunction tree_multimap{t, s}
  tree_multimap_compare{t, s, cmp{t}};
public metafunction tree_multimap_range{t, s}
  tree_multimap_compare_range{t, s, cmp{t}};
public metafunction tree_multimap_crange{t, s}
  tree_multimap_compare_crange{t, s, cmp{t}};

private tsvaluetype struct {t} cmp {
  public function int call(t const& x, t const& y) const
    { return ordered::compare::compare(x, y); }
}

private mtvaluetype struct
extern "pxcmap::with_guard< pxcmap::map_conf<> >" "map"
{t, s, f} tree_map_compare {
  public metafunction key_type t;
  public metafunction mapped_type s;
  public metafunction range_type tree_map_range{t, s};
  public metafunction crange_type tree_map_crange{t, s};
  public metafunction rebind{u} tree_map_compare{u, s, f};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "clear" void clear();
  public function extern "exists" bool exists(t const& k) const;
  public function extern "insert" bool insert(t const& k, s const& v);
  public function extern "erase" size_t erase(t const& k);
  public function extern "equal_crange"
    crange_type equal_crange(t const& k) const;
  public function extern "equal_range"
    range_type equal_range(t const& k);
}

private mtvaluetype struct
extern "pxcmap::range_base< pxcmap::map_conf<>, false >" "map_range"
{t, s, f} tree_map_compare_range {
  public metafunction key_type t;
  public metafunction mapped_type s;
  public metafunction range_type tree_map_compare_range{t, s, f};
  public metafunction crange_type tree_map_compare_crange{t, s, f};
  public metafunction non_ephemeral_type tree_map_compare{t, s, f};
  public metafunction rebind{u} tree_map_range{u, s, f};
  public function extern "empty" bool empty() const;
  public function extern "increment_front" void increment_front(size_t i);
}

private mtvaluetype struct
extern "pxcmap::range_base< pxcmap::map_conf<>, true >" "map_crange"
{t, s, f} tree_map_compare_crange {
  public metafunction key_type t;
  public metafunction mapped_type s;
  public metafunction range_type tree_map_compare_crange{t, s, f};
  public metafunction crange_type tree_map_compare_crange{t, s, f};
  public metafunction non_ephemeral_type tree_map_compare{t, s, f};
  public metafunction rebind{u} tree_map_crange{u, s, f};
  public function extern "empty" bool empty() const;
  public function extern "increment_front" void increment_front(size_t i);
}

private mtvaluetype struct
extern "pxcmap::with_guard< pxcmap::set_conf<> >" "map"
{t, f} tree_set_compare {
  public metafunction key_type t;
  public metafunction mapped_type unit;
  public metafunction range_type tree_set_range{t};
  public metafunction crange_type tree_set_crange{t};
  public metafunction rebind{u} tree_set_compare{u, f};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "clear" void clear();
  public function extern "exists" bool exists(t const& k) const;
  public function extern "insert" bool insert(t const& k, unit const& v);
  public function extern "erase" size_t erase(t const& k);
  public function extern "equal_crange"
    crange_type equal_crange(t const& k) const;
  public function extern "equal_range"
    range_type equal_range(t const& k);
}

private mtvaluetype struct
extern "pxcmap::range_base< pxcmap::set_conf<>, false >" "map"
{t, f} tree_set_compare_range {
  public metafunction key_type t;
  public metafunction mapped_type unit;
  public metafunction range_type tree_set_compare_range{t, f};
  public metafunction crange_type tree_set_compare_crange{t, f};
  public metafunction non_ephemeral_type tree_set_compare{t, f};
  public metafunction rebind{u} tree_set_range{u, f};
  public function extern "empty" bool empty() const;
  public function extern "increment_front" void increment_front(size_t i);
}

private mtvaluetype struct
extern "pxcmap::range_base< pxcmap::set_conf<>, true >" "map"
{t, f} tree_set_compare_crange {
  public metafunction key_type t;
  public metafunction mapped_type unit;
  public metafunction range_type tree_set_compare_crange{t, f};
  public metafunction crange_type tree_set_compare_crange{t, f};
  public metafunction non_ephemeral_type tree_set_compare{t, f};
  public metafunction rebind{u} tree_set_crange{u, f};
  public function extern "empty" bool empty() const;
  public function extern "increment_front" void increment_front(size_t i);
}

private mtvaluetype struct
extern "pxcmap::with_guard< pxcmap::multimap_conf<> >" "map"
{t, s, f} tree_multimap_compare {
  public metafunction key_type t;
  public metafunction mapped_type s;
  public metafunction range_type tree_multimap_range{t, s};
  public metafunction crange_type tree_multimap_crange{t, s};
  public metafunction rebind{u} tree_multimap_compare{u, s, f};
  public function extern "empty" bool empty() const;
  public function extern "size" size_t size() const;
  public function extern "clear" void clear();
  public function extern "exists" bool exists(t const& k) const;
  public function extern "insert" bool insert(t const& k, s const& v);
  public function extern "erase" size_t erase(t const& k);
  public function extern "equal_crange"
    crange_type equal_crange(t const& k) const;
  public function extern "equal_range"
    range_type equal_range(t const& k);
}

private mtvaluetype struct
extern "pxcmap::range_base< pxcmap::map_conf<>, false >" "map_range"
{t, s, f} tree_multimap_compare_range {
  public metafunction key_type t;
  public metafunction mapped_type s;
  public metafunction range_type tree_multimap_compare_range{t, s, f};
  public metafunction crange_type tree_multimap_compare_crange{t, s, f};
  public metafunction non_ephemeral_type tree_multimap_compare{t, s, f};
  public metafunction rebind{u} tree_multimap_range{u, s, f};
  public function extern "empty" bool empty() const;
  public function extern "increment_front" void increment_front(size_t i);
}

private mtvaluetype struct
extern "pxcmap::range_base< pxcmap::map_conf<>, true >" "map_crange"
{t, s, f} tree_multimap_compare_crange {
  public metafunction key_type t;
  public metafunction mapped_type s;
  public metafunction range_type tree_multimap_compare_crange{t, s, f};
  public metafunction crange_type tree_multimap_compare_crange{t, s, f};
  public metafunction non_ephemeral_type tree_multimap_compare{t, s, f};
  public metafunction rebind{u} tree_multimap_crange{u, s, f};
  public function extern "empty" bool empty() const;
  public function extern "increment_front" void increment_front(size_t i);
}

