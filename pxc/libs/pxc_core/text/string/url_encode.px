public namespace text::string::url_encode;
import numeric::integral -;
import container::string -;

public threaded function extern "pxcrt::url_encode"
void url_encode(string& buf, cstrref const& src);
public threaded function extern "pxcrt::url_decode"
bool url_decode(string& buf, cstrref const& src);

extern "functions" inline
namespace pxcrt {

using namespace pxcrt;

void url_encode(bt_string& buf, cstrref const& src);
bt_bool url_decode(bt_string& buf, cstrref const& src);

}; // namespace pxcrt

extern "implementation" inline
namespace pxcrt {

static bt_uchar hex_char(bt_uchar c)
{
  return (c < 10) ? ('0' + c) : ('a' + (c - 10));
}

void url_encode(bt_string& buf, cstrref const& src)
{
  const size_t srclen = src.size();
  const bt_uchar *const start = src.rawarr();
  const bt_uchar *const end = start + srclen;
  const size_t osize = buf.size();
  bt_uchar *const wstart = buf.reserve_back<3>(srclen); /* srclen * 3 */
  bt_uchar *wptr = wstart;
  for (const bt_uchar *p = start; p != end; ++p) {
    const bt_uchar c = p[0];
    if ((c >= '0' && c <= '9')
      || (c >= 'a' && c <= 'z')
      || (c >= 'A' && c <= 'Z')
      || c == '-' || c == '_' || c == '.'
      || c == '/' || c == ':' || c == ';') {
      wptr[0] = c;
      ++wptr;
    } else if (c == ' ') {
      wptr[0] = '+';
      ++wptr;
    } else {
      wptr[0] = '%';
      wptr[1] = hex_char((c >> 4) & 0x0f);
      wptr[2] = hex_char(c & 0x0f);
      wptr += 3;
    }
  }
  assert((size_t)(wptr - wstart) <= srclen * 3);
  buf.rawarr_set_valid_len(osize + wptr - wstart);
}

static int hexchr2int(bt_uchar c)
{
  if (c >= '0' && c <= '9')
    return c - '0';
  if (c >= 'a' && c <= 'f')
    return 10 + (c - 'a');
  if (c >= 'A' && c <= 'F')
    return 10 + (c - 'A');
  return -1;
}

bt_bool url_decode(bt_string& buf, cstrref const& src)
{
  bt_bool ok_flag = true;
  const size_t srclen = src.size();
  const bt_uchar *const start = src.rawarr();
  const bt_uchar *const end = start + srclen;
  const size_t osize = buf.size();
  bt_uchar *const wstart = buf.reserve_back<1>(srclen);
  bt_uchar *wptr = wstart;
  for (const bt_uchar *p = start; p != end; ++p) {
    if (p[0] == '%') {
      if (p + 1 == end) {
	ok_flag = false;
	(*wptr++) = p[0];
	break;
      } else if (p + 2 == end) {
	ok_flag = false;
	(*wptr++) = p[0];
	(*wptr++) = p[1];
        break;
      }
      const int a1 = hexchr2int(p[1]);
      const int a2 = hexchr2int(p[2]);
      if (a1 >= 0 && a2 >= 0) {
	const unsigned int a = a1 * 16 + a2;
	(*wptr++) = a;
      } else {
	ok_flag = false;
	(*wptr++) = p[0];
	(*wptr++) = p[1];
	(*wptr++) = p[2];
      }
      p += 2;
    } else if (p[0] == '+') {
      (*wptr++) = ' ';
    } else {
      (*wptr++) = p[0];
    }
  }
  assert((size_t)(wptr - wstart) <= srclen);
  buf.rawarr_set_valid_len(osize + wptr - wstart);
  return ok_flag;
}

}; // namespace pxcrt

