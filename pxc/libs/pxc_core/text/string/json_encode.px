public namespace text::string::json_encode;
import numeric::integral -;
import container::string -;

public threaded function void json_encode(cstrref const& src, string& out)
{
  out.push_back('"');
  size_t const len = src.size();
  size_t i = 0;
  while (true) {
    size_t j = i;
    uchar ch;
    while (i < len) {
      ch = src[i];
      if (ch < 0x20 || ch == '\\' || ch == '"') {
	break;
      }
      ++i;
    }
    if (j != i) {
      out.append(src[j .. i]);
    }
    if (i == len) {
      break;
    }
    out.push_back('\\');
    out.push_back(ch);
    ++i;
  }
  out.push_back('"');
}

public threaded function size_t json_decode(cstrref const& src, string& out,
  bool& suc_r)
{
  size_t const len = src.size();
  if (len == 0) {
    suc_r = false;
    return 0;
  }
  if (src[0] != '"') {
    suc_r = false;
    return 0;
  }
  size_t i = 1;
  while (true) {
    size_t j = i;
    uchar ch;
    while (i < len) {
      ch = src[i];
      if (ch == '\\' || ch == '"') {
	break;
      }
      ++i;
    }
    if (j != i) {
      out.append(src[j .. i]);
    }
    if (i == len) {
      suc_r = false;
      return i;
    }
    if (ch == '"') {
      break;
    }
    /* ch == '¥¥' */
    ++i;
    if (i == len) {
      suc_r = false;
      return i;
    }
    out.push_back(src[i]);
  }
  ++i;
  suc_r = true;
  return i;
}

