public threaded namespace text::split;
public import container::array -;
public import numeric::integral -;
public import numeric::cast -;
public import text::conversion -;
public import meta m;
public import meta::vararg va;
public import meta::family -;

public threaded function {delim, tlist} void
string_split(expand(split_arg_decls{tlist}))
{ 
  size_t pos = 0;
  const sz = a0.size();
  expand(arg, idx : va::arg_names{m::size{tlist}}) {
    if (m::ne{idx, 0}) {
      size_t p;
      if (m::is_function{delim}) {
	for (p = pos; p < sz; ++p) {
	  if (delim(a0[p])) {
	    break;
	  }
	}
      } else {
	p = find_mapped(a0, pos,
	  static_cast{m::symbol{m::at0{m::at0{tlist}}, "mapped_type"}}(delim));
      }
      if (is_string_or_slice_type{m::at0{m::at{tlist, idx}}}) {
	arg = a0[pos .. p];
      } else {
	arg = from_string{m::at0{m::at{tlist, idx}}}(a0[pos .. p]);
      }
      if (m::ne{idx, m::sub{m::size{tlist}, 1}}) {
	if (m::is_function{delim}) {
	  for (pos = p; pos < sz; ++pos) {
	    if (!delim(a0[pos])) {
	      break;
	    }
	  }
	} else {
	  for (pos = p; pos < sz; ++pos) {
	    if (a0[pos] != delim) {
	      break;
	    }
	  }
	}
      }
    }
  }
}

public threaded function {delim, tlist} void
string_append_join(expand(concat_arg_decls{tlist}))
{
  expand (a, i: va::arg_names{m::size{tlist}}) {
    if (m::ne{i, 0}) { 
      if (m::and{m::ne{i, 1}, m::ne{delim, ""}}) {
	a0.append(delim);
      }
      metafunction t m::at0{m::at{tlist, i}};
      if (is_string_or_slice_type{t}) {
        a0.append(a);
      } else {
        serialize_to_string{t}(a, a0);
      }
    }
  }
}

public threaded function {delim, tlist} string
string_join(expand(va::arg_decls_bycref{tlist}))
{
  string s;
  expand (a, i: va::arg_names{m::size{tlist}}) {
    { 
      metafunction t m::at0{m::at{tlist, i}};
      if (m::and{m::ne{i, 0}, m::ne{delim, ""}}) {
        s.append(delim);
      }
      if (is_string_or_slice_type{t}) {
        s.append(a);
      } else {
        serialize_to_string{t}(a, s);
      }
    }
  }
  return s;
}

private metafunction split_arg_decls{tlist}
  m::map{
    m::seq{m::size{tlist}},
    metafunction{i}
      m::list{
	m::concat{"a", i},            /* name */
	m::at0{m::at{tlist, i}},      /* type */
	1,                            /* byref */
	m::cond{m::ge{i, 1}, 1, 0}}}; /* mutable */
private metafunction concat_arg_decls{tlist}
  m::map{
    m::seq{m::size{tlist}},
    metafunction{i}
      m::list{
	m::concat{"a", i},            /* name */
	m::at0{m::at{tlist, i}},      /* type */
	1,                            /* byref */
	m::cond{m::ge{i, 1}, 0, 1}}}; /* mutable */

