public namespace pointer::func "use-unsafe";
public import numeric::integral -;
public import meta m;

public metafunction funcptr{t, ts}
  m::cond{
    m::eq{m::size{ts}, 0}, funcptr0{t},
    m::eq{m::size{ts}, 1}, funcptr1{t, m::at0{ts}},
    m::eq{m::size{ts}, 2}, funcptr2{t, m::at0{ts}, m::at1{ts}},
    m::eq{m::size{ts}, 3}, funcptr3{t, m::at0{ts}, m::at1{ts}, m::at2{ts}},
    m::eq{m::size{ts}, 4}, funcptr4{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}},
    m::eq{m::size{ts}, 5}, funcptr5{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}},
    m::eq{m::size{ts}, 6}, funcptr6{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}},
    m::eq{m::size{ts}, 7}, funcptr7{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}, m::at6{ts}},
    m::eq{m::size{ts}, 8}, funcptr8{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}, m::at6{ts}, m::at7{ts}},
    m::eq{m::size{ts}, 9}, funcptr9{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}, m::at6{ts}, m::at7{ts}, m::at8{ts}},
    m::eq{m::size{ts}, 10}, funcptr10{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}, m::at6{ts}, m::at7{ts}, m::at8{ts},
      m::at9{ts}},
    m::error{"too many arguments"}};

public tsvaluetype struct extern "pxcrt::funcptr0<>::type" "nocascade"
{tr}
funcptr0 { }

public tsvaluetype struct extern "pxcrt::funcptr1<>::type" "nocascade"
{tr, t0}
funcptr1 { }

public tsvaluetype struct extern "pxcrt::funcptr2<>::type" "nocascade"
{tr, t0, t1}
funcptr2 { }

public tsvaluetype struct extern "pxcrt::funcptr3<>::type" "nocascade"
{tr, t0, t1, t2}
funcptr3 { }

public tsvaluetype struct extern "pxcrt::funcptr4<>::type" "nocascade"
{tr, t0, t1, t2, t3}
funcptr4 { }

public tsvaluetype struct extern "pxcrt::funcptr5<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4}
funcptr5 { }

public tsvaluetype struct extern "pxcrt::funcptr6<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5}
funcptr6 { }

public tsvaluetype struct extern "pxcrt::funcptr7<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5, t6}
funcptr7 { }

public tsvaluetype struct extern "pxcrt::funcptr8<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5, t6, t7}
funcptr8 { }

public tsvaluetype struct extern "pxcrt::funcptr9<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8}
funcptr9 { }

public tsvaluetype struct extern "pxcrt::funcptr10<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9}
funcptr10 { }

public threaded function extern "pxcrt::funcptr0___call"
{tr} tr
funcptr0___call(funcptr0{tr} f);

public threaded function extern "pxcrt::funcptr1___call"
{tr, t0} tr
funcptr1___call(funcptr1{tr, t0} f,
  t0 a0);

public threaded function extern "pxcrt::funcptr2___call"
{tr, t0, t1} tr
funcptr2___call(funcptr2{tr, t0, t1} f,
  t0 a0, t1 a1);

public threaded function extern "pxcrt::funcptr3___call"
{tr, t0, t1, t2} tr
funcptr3___call(funcptr3{tr, t0, t1, t2} f,
  t0 a0, t1 a1, t2 a2);

public threaded function extern "pxcrt::funcptr4___call"
{tr, t0, t1, t2, t3} tr
funcptr4___call(funcptr4{tr, t0, t1, t2, t3} f,
  t0 a0, t1 a1, t2 a2, t3 a3);

public threaded function extern "pxcrt::funcptr5___call"
{tr, t0, t1, t2, t3, t4} tr
funcptr5___call(funcptr5{tr, t0, t1, t2, t3, t4} f,
  t0 a0, t1 a1, t2 a2, t3 a3, t4 a4);

public threaded function extern "pxcrt::funcptr6___call"
{tr, t0, t1, t2, t3, t4, t5} tr
funcptr6___call(funcptr6{tr, t0, t1, t2, t3, t4, t5} f,
  t0 a0, t1 a1, t2 a2, t3 a3, t4 a4, t5 a5);

public threaded function extern "pxcrt::funcptr7___call"
{tr, t0, t1, t2, t3, t4, t5, t6} tr
funcptr7___call(funcptr7{tr, t0, t1, t2, t3, t4, t5, t6} f,
  t0 a0, t1 a1, t2 a2, t3 a3, t4 a4, t5 a5, t6 a6);

public threaded function extern "pxcrt::funcptr8___call"
{tr, t0, t1, t2, t3, t4, t5, t6, t7} tr
funcptr8___call(funcptr8{tr, t0, t1, t2, t3, t4, t5, t6, t7} f,
  t0 a0, t1 a1, t2 a2, t3 a3, t4 a4, t5 a5, t6 a6, t7 a7);

public threaded function extern "pxcrt::funcptr9___call"
{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8} tr
funcptr9___call(funcptr9{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8} f,
  t0 a0, t1 a1, t2 a2, t3 a3, t4 a4, t5 a5, t6 a6, t7 a7, t8 a8);

public threaded function extern "pxcrt::funcptr10___call"
{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9} tr
funcptr10___call(funcptr10{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9} f,
  t0 a0, t1 a1, t2 a2, t3 a3, t4 a4, t5 a5, t6 a6, t7 a7, t8 a8, t9 a9);

extern "types" inline
namespace pxcrt {

template <typename Tr>
struct funcptr0 {
  typedef Tr (*type)();
};

template <typename Tr, typename T0>
struct funcptr1 {
  typedef Tr (*type)(T0);
};

template <typename Tr, typename T0, typename T1>
struct funcptr2 {
  typedef Tr (*type)(T0, T1);
};

template <typename Tr, typename T0, typename T1, typename T2>
struct funcptr3 {
  typedef Tr (*type)(T0, T1, T2);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3>
struct funcptr4 {
  typedef Tr (*type)(T0, T1, T2, T3);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4>
struct funcptr5 {
  typedef Tr (*type)(T0, T1, T2, T3, T4);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5>
struct funcptr6 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6>
struct funcptr7 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5, T6);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7>
struct funcptr8 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5, T6, T7);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7, typename T8>
struct funcptr9 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5, T6, T7, T8);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct funcptr10 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9);
};

};
;

extern "functions" inline
namespace pxcrt {

template <typename Tr>
static inline Tr
funcptr0___call(
  typename funcptr0<Tr>::type f)
{
  return f();
}

template <typename Tr, typename T0>
static inline Tr
funcptr1___call(
  typename funcptr1<Tr, T0>::type f,
  T0 a0)
{
  return f(a0);
}

template <typename Tr, typename T0, typename T1>
static inline Tr
funcptr2___call(
  typename funcptr2<Tr, T0, T1>::type f,
  T0 a0, T1 a1)
{
  return f(a0, a1);
}

template <typename Tr, typename T0, typename T1, typename T2>
static inline Tr
funcptr3___call(
  typename funcptr3<Tr, T0, T1, T2>::type f,
  T0 a0, T1 a1, T2 a2)
{
  return f(a0, a1, a2);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3>
static inline Tr
funcptr4___call(
  typename funcptr4<Tr, T0, T1, T2, T3>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3)
{
  return f(a0, a1, a2, a3);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4>
static inline Tr
funcptr5___call(
  typename funcptr5<Tr, T0, T1, T2, T3, T4>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4)
{
  return f(a0, a1, a2, a3, a4);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5>
static inline Tr
funcptr6___call(
  typename funcptr6<Tr, T0, T1, T2, T3, T4, T5>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)
{
  return f(a0, a1, a2, a3, a4, a5);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6>
static inline Tr
funcptr7___call(
  typename funcptr7<Tr, T0, T1, T2, T3, T4, T5, T6>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6)
{
  return f(a0, a1, a2, a3, a4, a5, a6);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7>
static inline Tr
funcptr8___call(
  typename funcptr8<Tr, T0, T1, T2, T3, T4, T5, T6, T7>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7)
{
  return f(a0, a1, a2, a3, a4, a5, a6, a7);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7, typename T8>
static inline Tr
funcptr9___call(
  typename funcptr9<Tr, T0, T1, T2, T3, T4, T5, T6, T7, T8>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8)
{
  return f(a0, a1, a2, a3, a4, a5, a6, a7, a8);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
static inline Tr
funcptr10___call(
  typename funcptr10<Tr, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9)
{
  return f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

};
;

