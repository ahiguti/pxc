public threaded namespace pointer::tfuncptr "use-unsafe";
public import numeric::integral -;
public import meta m;
public import meta::vararg va;

/* tfuncptr{rettype, {{argtype, byref, mutable}, ...}} */
public metafunction tfuncptr{t, ts}
  tfuncptr_ctype{t, m::map{ts, to_ctype}};

public metafunction tfuncptr_matching_function{f}
  tfuncptr{m::ret_type{f}, m::map{m::args{f}, metafunction{ai}
    m::slice{ai, 1, 4}}};

public threaded function {f} tfuncptr_matching_function{f} make_tfuncptr()
{
  if (m::eq{m::characteristic{f, "threaded"}, 0}) {
    m::error{m::concat{"function ", f, " is not threaded"}};
  }
  mutable r = tfuncptr_null{tfuncptr_matching_function{f}}();
  metafunction expr m::concat{"r$ = &(", m::csymbol{f}, ")"};
  extern "emit" expr;
  return r;
}

public threaded function {tilist} call_check{tilist}
tfuncptr0___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr0___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr1___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr1___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr2___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr2___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr3___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr3___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr4___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr4___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr5___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr5___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr6___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr6___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr7___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr7___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr8___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr8___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr9___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr9___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

public threaded function {tilist} call_check{tilist}
tfuncptr10___call(expand(va::arg_decls_byref{tilist}))
{
  return tfuncptr10___call_impl(expand(a: va::arg_names{m::size{tilist}}; a));
}

/* private */

private threaded function extern "pxcrt::tfuncptr_null" {t} t tfuncptr_null();

private metafunction call_check{tilist}
  m::cond{
    call_check_args{tilist},
    call_rettype{tilist},
    call_rettype{tilist}};
private metafunction call_rettype{tilist}
  m::at0{m::at0{m::at0{tilist}}};
private metafunction call_fptype{tilist}
  m::at0{m::at0{tilist}};
private metafunction call_fpargtypes{tilist}
  m::slice{call_fptype{tilist}, 1};
private metafunction call_argtypes{tilist}
  m::slice{tilist, 1};
private metafunction call_check_args{tilist}
  m::apply{metafunction{fpargtypes, argtypes}
    m::map{m::seq{m::sub{m::size{tilist}, 1}}, metafunction{i}
      call_check_arg{i, m::at{fpargtypes, i}, m::at{argtypes, i}}},
    call_fpargtypes{tilist}, call_argtypes{tilist}};
private metafunction call_check_arg{i, fparg, arg}
  m::cond{
    m::and{is_cxxmutableref{fparg}, m::not{m::at1{arg}}},
    m::error{m::concat{"argument ", i, " must have lvalue"}},
    1};
private metafunction is_cxxmutableref{t}
  m::and{
    m::eq{m::nameof{t}, "pointer::tfuncptr::cxxref"},
    m::ne{m::nameof{m::at0{t}}, "pointer::tfuncptr::cxxconst"}};

private tsvaluetype struct extern "pxcrt::tfuncptr0<>::type" "nocascade"
{tr}
tfuncptr0 { }

private tsvaluetype struct extern "pxcrt::tfuncptr1<>::type" "nocascade"
{tr, t0}
tfuncptr1 { }

private tsvaluetype struct extern "pxcrt::tfuncptr2<>::type" "nocascade"
{tr, t0, t1}
tfuncptr2 { }

private tsvaluetype struct extern "pxcrt::tfuncptr3<>::type" "nocascade"
{tr, t0, t1, t2}
tfuncptr3 { }

private tsvaluetype struct extern "pxcrt::tfuncptr4<>::type" "nocascade"
{tr, t0, t1, t2, t3}
tfuncptr4 { }

private tsvaluetype struct extern "pxcrt::tfuncptr5<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4}
tfuncptr5 { }

private tsvaluetype struct extern "pxcrt::tfuncptr6<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5}
tfuncptr6 { }

private tsvaluetype struct extern "pxcrt::tfuncptr7<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5, t6}
tfuncptr7 { }

private tsvaluetype struct extern "pxcrt::tfuncptr8<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5, t6, t7}
tfuncptr8 { }

private tsvaluetype struct extern "pxcrt::tfuncptr9<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8}
tfuncptr9 { }

private tsvaluetype struct extern "pxcrt::tfuncptr10<>::type" "nocascade"
{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9}
tfuncptr10 { }

private metafunction tfuncptr_ctype{t, ts}
  m::cond{
    m::eq{m::size{ts}, 0}, tfuncptr0{t},
    m::eq{m::size{ts}, 1}, tfuncptr1{t, m::at0{ts}},
    m::eq{m::size{ts}, 2}, tfuncptr2{t, m::at0{ts}, m::at1{ts}},
    m::eq{m::size{ts}, 3}, tfuncptr3{t, m::at0{ts}, m::at1{ts}, m::at2{ts}},
    m::eq{m::size{ts}, 4}, tfuncptr4{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}},
    m::eq{m::size{ts}, 5}, tfuncptr5{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}},
    m::eq{m::size{ts}, 6}, tfuncptr6{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}},
    m::eq{m::size{ts}, 7}, tfuncptr7{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}, m::at6{ts}},
    m::eq{m::size{ts}, 8}, tfuncptr8{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}, m::at6{ts}, m::at7{ts}},
    m::eq{m::size{ts}, 9}, tfuncptr9{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}, m::at6{ts}, m::at7{ts}, m::at8{ts}},
    m::eq{m::size{ts}, 10}, tfuncptr10{t, m::at0{ts}, m::at1{ts}, m::at2{ts},
      m::at3{ts}, m::at4{ts}, m::at5{ts}, m::at6{ts}, m::at7{ts}, m::at8{ts},
      m::at9{ts}},
    m::error{"too many arguments"}};

private metafunction to_ctype{t}
  /* t is just a type or {type, byref, mutable} */
  m::cond{m::is_list{t},
    m::cond{m::at1{t},
      m::cond{m::at2{t},
	cxxref{m::at0{t}},
	cxxref{cxxconst{m::at0{t}}}},
      m::cond{m::at2{t},
	m::at0{t},
	cxxconst{m::at0{t}}}},
    t};

private tsvaluetype struct extern "pxcrt::cxxref<>::type" "nocascade" {t}
cxxref{ }

private tsvaluetype struct extern "pxcrt::cxxconst<>::type" "nocascade" {t}
cxxconst{ }

private threaded function extern "pxcrt::tfuncptr0___call"
{tr} tr
tfuncptr0___call_impl(tfuncptr0{tr} f);

private threaded function extern "pxcrt::tfuncptr1___call"
{tr, t0, ta0} tr
tfuncptr1___call_impl(tfuncptr1{tr, t0} f, ta0 a0);

private threaded function extern "pxcrt::tfuncptr2___call"
{tr, t0, t1, ta0, ta1} tr
tfuncptr2___call_impl(tfuncptr2{tr, t0, t1} f,
  ta0 a0, ta1 a1);

private threaded function extern "pxcrt::tfuncptr3___call"
{tr, t0, t1, t2, ta0, ta1, ta2} tr
tfuncptr3___call_impl(tfuncptr3{tr, t0, t1, t2} f,
  ta0 a0, ta1 a1, ta2 a2);

private threaded function extern "pxcrt::tfuncptr4___call"
{tr, t0, t1, t2, t3, ta0, ta1, ta2, ta3} tr
tfuncptr4___call_impl(tfuncptr4{tr, t0, t1, t2, t3} f,
  ta0 a0, ta1 a1, ta2 a2, ta3 a3);

private threaded function extern "pxcrt::tfuncptr5___call"
{tr, t0, t1, t2, t3, t4, ta0, ta1, ta2, ta3, ta4} tr
tfuncptr5___call_impl(tfuncptr5{tr, t0, t1, t2, t3, t4} f,
  ta0 a0, ta1 a1, ta2 a2, ta3 a3, ta4 a4);

private threaded function extern "pxcrt::tfuncptr6___call"
{tr, t0, t1, t2, t3, t4, t5, ta0, ta1, ta2, ta3, ta4, ta5} tr
tfuncptr6___call_impl(tfuncptr6{tr, t0, t1, t2, t3, t4, t5} f,
  ta0 a0, ta1 a1, ta2 a2, ta3 a3, ta4 a4, ta5 a5);

private threaded function extern "pxcrt::tfuncptr7___call"
{tr, t0, t1, t2, t3, t4, t5, t6, ta0, ta1, ta2, ta3, ta4, ta5, ta6} tr
tfuncptr7___call_impl(tfuncptr7{tr, t0, t1, t2, t3, t4, t5, t6} f,
  ta0 a0, ta1 a1, ta2 a2, ta3 a3, ta4 a4, ta5 a5, ta6 a6);

private threaded function extern "pxcrt::tfuncptr8___call"
{tr, t0, t1, t2, t3, t4, t5, t6, t7, ta0, ta1, ta2, ta3, ta4, ta5, ta6, ta7} tr
tfuncptr8___call_impl(tfuncptr8{tr, t0, t1, t2, t3, t4, t5, t6, t7} f,
  ta0 a0, ta1 a1, ta2 a2, ta3 a3, ta4 a4, ta5 a5, ta6 a6, ta7 a7);

private threaded function extern "pxcrt::tfuncptr9___call"
{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8, ta0, ta1, ta2, ta3, ta4, ta5, ta6,
  ta7, ta8} tr
tfuncptr9___call_impl(tfuncptr9{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8} f,
  ta0 a0, ta1 a1, ta2 a2, ta3 a3, ta4 a4, ta5 a5, ta6 a6, ta7 a7, ta8 a8);

private threaded function extern "pxcrt::tfuncptr10___call"
{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, ta0, ta1, ta2, ta3, ta4, ta5, ta6,
  ta7, ta8, ta9} tr
tfuncptr10___call_impl(tfuncptr10{tr, t0, t1, t2, t3, t4, t5, t6, t7, t8, t9} f,
  ta0 a0, ta1 a1, ta2 a2, ta3 a3, ta4 a4, ta5 a5, ta6 a6, ta7 a7, ta8 a8,
  ta9 a9);

extern "types" inline
namespace pxcrt {

template <typename T>
struct cxxref {
  typedef T& type;
};

template <typename T>
struct cxxconst {
  typedef T const type;
};

template <typename Tr>
struct tfuncptr0 {
  typedef Tr (*type)();
};

template <typename Tr, typename T0>
struct tfuncptr1 {
  typedef Tr (*type)(T0);
};

template <typename Tr, typename T0, typename T1>
struct tfuncptr2 {
  typedef Tr (*type)(T0, T1);
};

template <typename Tr, typename T0, typename T1, typename T2>
struct tfuncptr3 {
  typedef Tr (*type)(T0, T1, T2);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3>
struct tfuncptr4 {
  typedef Tr (*type)(T0, T1, T2, T3);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4>
struct tfuncptr5 {
  typedef Tr (*type)(T0, T1, T2, T3, T4);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5>
struct tfuncptr6 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6>
struct tfuncptr7 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5, T6);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7>
struct tfuncptr8 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5, T6, T7);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7, typename T8>
struct tfuncptr9 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5, T6, T7, T8);
};

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
struct tfuncptr10 {
  typedef Tr (*type)(T0, T1, T2, T3, T4, T5, T6, T7, T8, T9);
};

};
;

extern "functions" inline
namespace pxcrt {

template <typename T> static inline T tfuncptr_null() { return T(); }

template <typename Tr>
static inline Tr
tfuncptr0___call(
  typename tfuncptr0<Tr>::type f)
{
  return f();
}

template <typename Tr, typename T0, typename Ta0>
static inline Tr
tfuncptr1___call(
  typename tfuncptr1<Tr, T0>::type f,
  T0 a0)
{
  return f(a0);
}

template <typename Tr, typename T0, typename T1, typename Ta0, typename Ta1>
static inline Tr
tfuncptr2___call(
  typename tfuncptr2<Tr, T0, T1>::type f,
  T0 a0, T1 a1)
{
  return f(a0, a1);
}

template <typename Tr, typename T0, typename T1, typename T2, typename Ta0,
  typename Ta1, typename Ta2>
static inline Tr
tfuncptr3___call(
  typename tfuncptr3<Tr, T0, T1, T2>::type f,
  T0 a0, T1 a1, T2 a2)
{
  return f(a0, a1, a2);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename Ta0, typename Ta1, typename Ta2, typename Ta3>
static inline Tr
tfuncptr4___call(
  typename tfuncptr4<Tr, T0, T1, T2, T3>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3)
{
  return f(a0, a1, a2, a3);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename Ta0, typename Ta1, typename Ta2, typename Ta3,
  typename Ta4>
static inline Tr
tfuncptr5___call(
  typename tfuncptr5<Tr, T0, T1, T2, T3, T4>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4)
{
  return f(a0, a1, a2, a3, a4);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename Ta0, typename Ta1, typename Ta2,
  typename Ta3, typename Ta4, typename Ta5>
static inline Tr
tfuncptr6___call(
  typename tfuncptr6<Tr, T0, T1, T2, T3, T4, T5>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5)
{
  return f(a0, a1, a2, a3, a4, a5);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename Ta0, typename Ta1,
  typename Ta2, typename Ta3, typename Ta4, typename Ta5, typename Ta6>
static inline Tr
tfuncptr7___call(
  typename tfuncptr7<Tr, T0, T1, T2, T3, T4, T5, T6>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6)
{
  return f(a0, a1, a2, a3, a4, a5, a6);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7, typename Ta0,
  typename Ta1, typename Ta2, typename Ta3, typename Ta4, typename Ta5,
  typename Ta6, typename Ta7>
static inline Tr
tfuncptr8___call(
  typename tfuncptr8<Tr, T0, T1, T2, T3, T4, T5, T6, T7>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7)
{
  return f(a0, a1, a2, a3, a4, a5, a6, a7);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7, typename T8,
  typename Ta0, typename Ta1, typename Ta2, typename Ta3, typename Ta4,
  typename Ta5, typename Ta6, typename Ta7, typename Ta8>
static inline Tr
tfuncptr9___call(
  typename tfuncptr9<Tr, T0, T1, T2, T3, T4, T5, T6, T7, T8>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8)
{
  return f(a0, a1, a2, a3, a4, a5, a6, a7, a8);
}

template <typename Tr, typename T0, typename T1, typename T2, typename T3,
  typename T4, typename T5, typename T6, typename T7, typename T8, typename T9,
  typename Ta0, typename Ta1, typename Ta2, typename Ta3, typename Ta4,
  typename Ta5, typename Ta6, typename Ta7, typename Ta8, typename Ta9>
static inline Tr
tfuncptr10___call(
  typename tfuncptr10<Tr, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>::type f,
  T0 a0, T1 a1, T2 a2, T3 a3, T4 a4, T5 a5, T6 a6, T7 a7, T8 a8, T9 a9)
{
  return f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

};
;

