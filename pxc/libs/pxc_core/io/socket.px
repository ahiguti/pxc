public threaded namespace io::socket "use-unsafe";
public import numeric::integral -;
public import container::array -;
public import algebraic -;
public import pointer -;
public import io::errno -;
public import io::addrinfo -;
public import exception -;
public import io +;
public import io::file +;
public import text::string::split -;
public import meta m;

public threaded function open_mt
io_socket(io const& sys, family_t family, socktype_t socktype,
  protocol_t protocol)
{
  open_mt r;
  int fd = io_socket_fd(sys, family, socktype, protocol);
  if (fd >= 0) {
    r.value = sys.make_file_mt(fd);
  } else {
    r.errno = sys.get_errno();
  }
  return r;
}

public threaded function extern "pxcio::file_bind" errno_t
file_bind(file_mt const& f, sockaddr_storage const& addr);

public threaded function extern "pxcio::file_listen" errno_t
file_listen(file_mt const& f, int backlog);

public threaded function extern "pxcio::file_connect" errno_t
file_connect(file_mt const& f, sockaddr_storage const& addr);

public threaded function open_mt
file_accept(file_mt const& f, sockaddr_storage mutable& addr_r)
{
  open_mt r;
  errno_t err = EOK;
  const nf = file_accept_internal(f, err, addr_r);
  if (err != EOK) {
    r.errno = err;
  } else {
    r.value = nf;
  }
  return r;
}

public tsvaluetype struct extern "int" "extenum" socklevel_t { }
public extern "SOL_SOCKET" socklevel_t SOL_SOCKET;
public extern "SOL_IP" socklevel_t SOL_IP;
public extern "SOL_TCP" socklevel_t SOL_TCP;

public tsvaluetype struct extern "int" "extenum" sockopt_t { }
expand (sym: {
  /* SOL_SOCKET */
  "SO_REUSEADDR", "SO_KEEPALIVE", "SO_RCVBUF", "SO_SNDBUF",
  "SO_RCVTIMEO", "SO_SNDTIMEO",
  /* SOL_TCP */
  "TCP_NODELAY"
}) {
public extern "%" sockopt_t sym;
}

public threaded function extern "pxcio::file_setsockopt" {t}
check_sockopt_argtype{t}
file_setsockopt(file const& f, socklevel_t level, sockopt_t opt, t const& v);

public threaded function extern "pxcio::file_getsockopt" {t}
check_sockopt_argtype{t}
file_getsockopt(file const& f, socklevel_t level, sockopt_t opt, t mutable& v);

public metafunction socketpair_t errno_or_value{pair{file_mt, file_mt}};

public threaded function socketpair_t
io_socketpair(io const& sys, family_t family, socktype_t socktype,
  protocol_t protocol)
{
  socketpair_t r;
  errno_t err = EOK;
  vector{file_mt} v = io_socketpair_internal(sys, err, family, socktype,
    protocol);
  if (err != EOK) {
    r.errno = err;
  } else {
    r.value = pair{file_mt, file_mt}(v[0], v[1]);
  }
  return r;
}

public threaded function file_mt
io_listen(io const& sys, cstrref const& node, cstrref const& service,
  family_t family, socktype_t socktype, protocol_t protocol, int backlog,
  bool reuseaddr)
{
  metafunction error runtime_error_template{"io_listen"};
  addrinfo addr;
  const eai = sys.getaddrinfo(node, service, family, socktype, protocol, 0,
    addr);
  if (eai != EAI_OK) {
    throw error(string_join{" "}(node, service, eai));
  }
  const osock = sys.socket(family, socktype, protocol);
  if (case osock.errno) {
    throw error(string_join{" "}("socket", osock.errno));
  }
  const sock = osock.value;
  errno_t mutable err;
  if (reuseaddr) {
    err = sock.setsockopt(SOL_SOCKET, io::socket::SO_REUSEADDR, 1);
    if (err != EOK) {
      throw error(string_join{" "}("REUSEADDR", err));
    }
  }
  err = sock.bind(addr.sockaddr());
  if (err != EOK) {
    throw error(string_join{" "}("bind", node, service, err));
  }
  err = sock.listen(backlog);
  if (err != EOK) {
    throw error(string_join{" "}("listen", err));
  }
  return sock;
}

public threaded function file_mt
io_connect(io const& sys, cstrref const& node, cstrref const& service,
  family_t family, socktype_t socktype, protocol_t protocol)
{
  metafunction error runtime_error_template{"io_connect"};
  addrinfo addr;
  const eai = sys.getaddrinfo(node, service, family, socktype, protocol, 0,
    addr);
  if (eai != EAI_OK) {
    throw error(string_join{" "}(node, service, eai));
  }
  const osock = sys.socket(family, socktype, protocol);
  if (case osock.errno) {
    throw error(string_join{" "}("socket", osock.errno));
  }
  const sock = osock.value;
  errno_t err;
  err = sock.connect(addr.sockaddr());
  if (err != EOK) {
    throw error(string_join{" "}("connect", err));
  }
  return sock;
}

/* private */

private threaded function extern "pxcio::io_socket_fd" int
io_socket_fd(io const& sys, family_t family, socktype_t socktype,
  protocol_t protocol);

private threaded function extern "pxcio::io_make_file_mt"
file_mt io_make_file_mt(io const& sys, int fd); /* defined in io::file */

private threaded function extern "pxcio::file_accept_internal" file_mt
file_accept_internal(file_mt const& lsn, errno_t mutable& err_r,
  sockaddr_storage mutable& addr_r);

private threaded function extern "pxcio::io_socketpair_internal"
vector{file_mt}
io_socketpair_internal(io const& sys, errno_t mutable& err_r,
  family_t family, socktype_t socktype, protocol_t protocol);

private metafunction check_sockopt_argtype{t}
  m::cond{
    m::eq{t, int}, errno_t,
    m::error{"invalid type"}};

extern "functions" inline
namespace pxcio {

template <typename T> static inline int
file_setsockopt(file_mt const& f, int level, int opt, T const& v)
{
  socklen_t sz = sizeof(T);
  int r = ::setsockopt(f.get(), level, opt, &v, sz);
  return r != 0 ? errno : 0;
}

template <typename T> static inline int
file_getsockopt(file_mt const& f, int level, int opt, T& v)
{
  socklen_t sz = sizeof(T);
  int r = ::getsockopt(f.get(), level, opt, &v, &sz);
  return r != 0 ? errno : 0;
}

};
;

extern "implementation" inline
namespace pxcio {

bt_int io_socket_fd(io const& sys, int family, int socktype, int protocol)
{
  return ::socket(family, socktype, protocol);
}

file_mt file_accept_internal(file_mt const& lsn, int& err_r,
  sockaddr_storage& addr_r)
{
  socklen_t len = addr_r.get_maxlen();
  int fd = ::accept(lsn.get(), addr_r.get_sockaddr(), &len);
  if (fd < 0) {
    err_r = errno;
    fd = -1;
  }
  return make_file_mt(fd);
}

int file_bind(file_mt const& f, sockaddr_storage const& addr)
{
  int r = ::bind(f.get(), addr.get_sockaddr(), addr.get_len());
  return r != 0 ? errno : 0;
}

int file_listen(file_mt const& f, int backlog)
{
  int r = ::listen(f.get(), backlog);
  return r != 0 ? errno : 0;
}

int file_connect(file_mt const& f, sockaddr_storage const& addr)
{
  int r = ::connect(f.get(), addr.get_sockaddr(), addr.get_len());
  return r != 0 ? errno : 0;
}

::pxcrt::pxcvector<file_mt> io_socketpair_internal(::pxcio::io const& sys,
  int& err_r, int family, int typ, int protocol)
{
  int fds[2];
  const int e = ::socketpair(family, typ, protocol, fds);
  if (e != 0) {
    err_r = errno;
    fds[0] = fds[1] = -1;
  }
  ::pxcrt::pxcvector<file_mt> r;
  if (e == 0) {
    r.push_back(make_file_mt(fds[0]));
    r.push_back(make_file_mt(fds[1]));
  }
  return r;
}

};
;

