public namespace io::environ "use-unsafe";
public import numeric::integral -;
public import numeric::cast -;
public import container::array -;
public import meta -;
public import io -;
public import io::errno -;
public import io::signal -;
public import exception;

public extern "pxcio::pxc_argv" vector{string} argv;
public extern "pxcio::pxc_environ" vector{string} environ;

public function string getenv(cstrref const& name)
{
  string x = name;
  x.push_back('=');
  const len = x.size();
  for (const i, const s : environ) {
    if (s[0 .. len] == x) {
      return s[len .. s.size()];
    }
  }
  return string();
}

private function extern "pxcio::io_environ_init" void io_environ_init();

io_environ_init();

extern "functions" inline
namespace pxcio {

extern pxcrt::pxcvector<pxcrt::bt_string> pxc_argv;
extern pxcrt::pxcvector<pxcrt::bt_string> pxc_environ;

};
;

extern "implementation" inline
extern "C" {
extern char **environ;
}
namespace pxcio {

#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

pxcrt::pxcvector<pxcrt::bt_string> pxc_argv;
pxcrt::pxcvector<pxcrt::bt_string> pxc_environ;

using namespace pxcrt;

void io_environ_init()
{
  pxc_argv.clear();
  char buf[32];
  int c = 0;
  while (true) {
    snprintf(buf, sizeof(buf), "PXC_ARG%d", c++);
    const char *ent = getenv(buf);
    if (ent == 0) {
      break;
    }
    const unsigned char *uent = reinterpret_cast<const unsigned char *>(ent);
    const pxcrt::bt_string s(uent, strlen(ent));
    pxc_argv.push_back(s);
    unsetenv(buf);
  }
  char **p = ::environ;
  while (*p != 0) {
    const unsigned char *uent = reinterpret_cast<const unsigned char *>(*p);
    const pxcrt::bt_string s(uent, strlen(*p));
    pxc_environ.push_back(s);
    ++p;
  }
}

};
;

