public threaded namespace io::standard "use-unsafe";
public import numeric::integral -;
public import container::array -;
public import io +;
public import io::file +;
public import io::errno -;
public import text::string::serialize -;
public import text::string::split -;
public import algebraic -;
public import meta::vararg v;
public import meta m;
public import meta::family -;

public threaded function extern "pxcrt::io_stdin"
  file_st io_stdin(io const& iop);
public threaded function extern "pxcrt::io_stdout"
  file_st io_stdout(io const& iop);
public threaded function extern "pxcrt::io_stderr"
  file_st io_stderr(io const& iop);

public threaded function {tlist} void
file_print(expand(v::arg_decls_bycref{tlist}))
{
  string s = string_join{" "}(
    expand(a: m::slice{v::arg_names{m::size{tlist}}, 1}; a));
  a0.write_all(s);
}

public threaded function {tlist} void
file_println(expand(v::arg_decls_bycref{tlist}))
{
  string s = string_join{" "}(
    expand(a: m::slice{v::arg_names{m::size{tlist}}, 1}; a));
  s.append("\n");
  a0.write_all(s);
}

public function {tlist} void print(expand(v::arg_decls_bycref{tlist}))
{
  string s = string_join{" "}(expand(a: v::arg_names{m::size{tlist}}; a));
  system.stdout().write_all(s);
}

public function {tlist} void println(expand(v::arg_decls_bycref{tlist}))
{
  string s = string_join{" "}(expand(a: v::arg_names{m::size{tlist}}; a));
  s.append("\n");
  system.stdout().write_all(s);
}

/* debug_log does not require an io handle */
public threaded function {tlist} void
debug_log(expand(v::arg_decls_bycref{tlist}))
{
  string s = string_join{"\t"}(expand(a: v::arg_names{m::size{tlist}}; a));
  s.push_back('\n');
  debug_log_internal(s);
}

private extern "pxcrt::dummy" option{file_st} dummy;
  /* instantiate option{file} */
private metafunction dummy_type_csymbol m::csymbol{option{file_st}};

private threaded function extern "pxcrt::debug_log_internal"
  void debug_log_internal(cstrref const& s);

extern "implementation" inline
namespace pxcrt {

typedef %{dummy_type_csymbol}% optfile;

/* TODO: slow */
file_st io_stdin(io const& iop)  {
  optfile pxc_stdin;
  pxc_stdin.some$$l(make_file_st(0));
  return pxc_stdin.some$$r();
}
file_st io_stdout(io const& iop) {
  optfile pxc_stdout;
  pxc_stdout.some$$l(make_file_st(1));
  return pxc_stdout.some$$r();
}
file_st io_stderr(io const& iop) {
  optfile pxc_stderr;
  pxc_stderr.some$$l(make_file_st(2));
  return pxc_stderr.some$$r();
}
void debug_log_internal(cstrref const& s)
{
  write(2, s.rawarr(), s.size());
}

};
;

