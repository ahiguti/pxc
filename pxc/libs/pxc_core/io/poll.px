public threaded namespace io::poll "use-unsafe";
public import numeric::integral -;
public import container::array -;
public import io::file +;
public import io::errno -;
public import meta m;
public import pointer -;

public multithreaded struct extern "pxcio::poll" "nodefault"
poll(io::io const& iop) { }

public tsvaluetype struct extern "short" "extbitmask"
poll_eventmask_t { }

public extern "pxcio::poll_eventmask_in" poll_eventmask_t POLLIN;
public extern "pxcio::poll_eventmask_out" poll_eventmask_t POLLOUT;

public threaded function extern "pxcio::poll_add" errno_t
poll_add(poll mutable& p, file_mt const& f, poll_eventmask_t ev);

public threaded function extern "pxcio::poll_modify" errno_t
poll_modify(poll mutable& p, file_mt const& f, poll_eventmask_t ev);

public threaded function extern "pxcio::poll_remove" errno_t
poll_remove(poll mutable& p, file_mt const& f);

public tsvaluetype struct extern "pxcio::poll_event"
poll_event { }

public threaded function extern "pxcio::poll_event_fileno" int
poll_event_fileno(poll_event const& ev);

public threaded function extern "pxcio::poll_event_events" poll_eventmask_t
poll_event_events(poll_event const& ev);

public threaded function extern "pxcio::poll_wait" errno_t
poll_wait(poll mutable& p, size_t maxevents, uint timeo_ms,
  varray{poll_event} mutable& events_r);

extern "types" inline

#include <sys/poll.h>
#include <vector>

namespace pxcio {

struct poll {
  poll(io const& iop);
  std::vector< ::pollfd > fds;
  std::vector<short> fd_events;
};

typedef ::pollfd poll_event;

enum { poll_eventmask_in = POLLIN };
enum { poll_eventmask_out = POLLOUT };

};

;

extern "implementation" inline

namespace pxcio {

poll::poll(io const& iop)
{
  fds.resize(1);
}

int poll_add(poll& p, file_mt const& f, short ev)
{
  const int fd = f.get();
  if (fd < 0) {
    return EINVAL;
  }
  if (p.fd_events.size() <= static_cast<size_t>(fd)) {
    p.fd_events.resize(fd + 1);
  }
  p.fd_events[fd] = ev;
  return 0;
}

int poll_modify(poll& p, file_mt const& f, short ev)
{
  return poll_add(p, f, ev);
}

int poll_remove(poll& p, file_mt const& f)
{
  return poll_add(p, f, 0);
}

pxcrt::bt_int poll_event_fileno(::pollfd const& e)
{
  return e.fd;
}

short poll_event_events(::pollfd const& e)
{
  return e.revents;
}

int
poll_wait(poll& p, pxcrt::bt_size_t maxevents, pxcrt::bt_uint timeo_ms,
  pxcrt::pxcvarray<poll_event>& events_r)
{
  size_t nfds = 0;
  for (size_t i = 0; i < p.fd_events.size(); ++i) {
    const short ev = p.fd_events[i];
    if (ev == 0) {
      continue;
    }
    if (nfds <= p.fds.size()) {
      p.fds.resize(nfds + 1);
    }
    ::pollfd& pfd = p.fds[nfds];
    pfd.fd = i;
    pfd.events = ev;
    ++nfds;
  }
  int n = ::poll(&p.fds[0], nfds, timeo_ms);
  for (size_t i = 0; i < nfds; ++i) {
    const ::pollfd& pfd = p.fds[i];
    if (pfd.revents == 0) {
      continue;
    }
    events_r.push_back(pfd);
  }
  return 0;
}

};

;

