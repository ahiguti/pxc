public threaded namespace regex::posix "use-unsafe";
public import numeric::integral -;
public import container::array -;
public import container::array::util;

public tsvaluetype struct extern "int" "extbitmask" cflags_t { }
public tsvaluetype struct extern "int" "extbitmask" eflags_t { }
public tsvaluetype struct extern "int" "extenum"    regerror_t { }
public tsvaluetype struct extern "::regoff_t" "extint" regoff_t { }
public tsvaluetype struct extern "::regmatch_t" regmatch_t {
  public regoff_t rm_so;
  public regoff_t rm_eo;
}

public extern "REG_EXTENDED"      cflags_t REG_EXTENDED;
public extern "REG_ICASE"         cflags_t REG_ICASE;
public extern "REG_NOSUB"         cflags_t REG_NOSUB;
public extern "REG_NEWLINE"       cflags_t REG_NEWLINE;
public extern "REG_NOTBOL"        eflags_t REG_NOTBOL;
public extern "REG_NOTEOL"        eflags_t REG_NOTEOL;

public extern "0"                 regerror_t REG_OK;
public extern "REG_NOMATCH"       regerror_t REG_NOMATCH;

public tsvaluetype struct extern "pregex::posix_re" "nonmovable"
  regex(cstrref const& s, cflags_t cflags, regerror_t mutable& err_r) { }
public threaded function extern "pregex::regex_exec"
  regerror_t regex_exec(regex const& re, cstrref const& s,
    slice{regmatch_t} const& ma, eflags_t eflags);
public threaded function extern "pregex::regex_error_string"
  string regex_error_string(regex const& re, regerror_t err);

extern "types" inline
#include <sys/types.h>
#include <regex.h>
namespace pregex {

using namespace pxcrt;

struct posix_re {
  posix_re(cstrref const& s, int cflags, int& err_r);
  ~posix_re();
public:
  ::regex_t value;
private:
  posix_re(const posix_re&);
  posix_re& operator =(const posix_re&);
};

}; // namespace pregex
;

extern "implementation" inline
namespace pregex {

posix_re::posix_re(cstrref const& s, int cflags, int& err_r)
{
  PXCRT_ALLOCA_NTSTRING(s_nt, s);
  const int r = ::regcomp(&value, s_nt.get(), cflags);
  err_r = r;
}

posix_re::~posix_re()
{
  ::regfree(&value);
}

int regex_exec(posix_re const& re, cstrref const& s,
  bt_slice<regmatch_t> const& ma, int eflags)
{
  PXCRT_ALLOCA_NTSTRING(s_nt, s);
  const int r = ::regexec(&re.value, s_nt.get(), ma.size(), ma.rawarr(),
    eflags);
  return r;
}

bt_string regex_error_string(posix_re const& re, int err)
{
  size_t sz = ::regerror(err, &re.value, 0, 0);
  bt_string s;
  s.reserve(sz);
  ::regerror(err, &re.value, reinterpret_cast<char *>(s.rawarr()), sz);
  if (sz > 0) {
    s.rawarr_set_valid_len(sz - 1);
  }
  return s;
}

}; // namespace pregex
;

