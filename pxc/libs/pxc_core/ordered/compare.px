threaded namespace ordered::compare "use-unsafe";
public import numeric::integral -;
public import numeric::fp -;
public import numeric::union_tag -;
public import container::array -;
public import meta m;
public import meta::family mf;
public import text::conversion -;

public threaded function {t} t min(t const& x, t const& y)
{
  return compare(x, y) < 0 ? x : y;
}

public threaded function {t} t max(t const& x, t const& y)
{
  return compare(x, y) > 0 ? x : y;
}

public threaded function {t} int compare(t const& x, t const& y)
{
  /* this function must be a 'Strict Weak Ordering' because tree_map
   * uses this as Compare for std::map */
  metafunction fam m::family{t};
  if (m::eq{t, unit}) {
    return 0;
  } else if (mf::is_string_or_slice_type{t}) {
    return memcmp_string(x, y);
  } else if (mf::is_numeric_type{t}) {
    return x < y ? -1 : x > y ? 1 : 0;
  } else if (m::eq{fam, "farray"}) {
    size_t const sz = m::at{t, 1};
    size_t i = 0;
    for (i = 0; i < n; ++i) {
      int const c = compare(x[i], y[i]);
      if (c != 0) {
	return c;
      }
    }
    return 0;
  } else if (m::or{m::eq{fam, "varray"}, m::eq{fam, "darray"}}) {
    size_t const xsz = x.size();
    size_t const ysz = y.size();
    size_t const sz = xsz < ysz ? xsz : ysz;
    size_t i = 0;
    for (i = 0; i < n; ++i) {
      int const c = compare(x[i], y[i]);
      if (c != 0) {
	return c;
      }
    }
    if (xsz > sz) {
      return -1;
    } else if (ysz > sz) {
      return 1;
    }
    return 0;
  } else if (m::eq{fam, "map"}) {
    return m::error{"not implemented for _map"};
  } else if (m::eq{fam, "struct"}) {
    expand (fld, idx : m::field_names{t}) {
      {
	int const c = compare(x.fld, y.fld);
	if (c != 0) {
	  return c;
	}
      }
    }
    return 0;
  } else if (m::eq{fam, "union"}) {
    int const tc = compare(union_tag(x), union_tag(y));
    if (tc != 0) {
      return tc;
    }
    expand (fld, idex : m::field_names{t}) {
      {
	if (case x.fld) {
	  int const c = compare(x.fld, y.fld);
	  if (c != 0) {
	    return c;
	  }
	}
      }
    }
    return 0;
  } else {
    return m::error{m::concat{"not implemented for type '", t, "'"}};
  }
}

public threaded function extern "pxcrt::sort_lt" {tarr}
void sort_lt(tarr mutable& x);

public threaded function extern "pxcrt::stable_sort_lt" {tarr}
void stable_sort_lt(tarr mutable& x);

public threaded function extern "pxcrt::sort" {tcmp, tarr}
void sort(tarr mutable& x);

public threaded function extern "pxcrt::stable_sort" {tcmp, tarr}
void stable_sort(tarr mutable& x);

extern "functions" inline

#include <algorithm>

namespace pxcrt {

template <typename Tcmp, typename Tarr> inline
void sort_lt(Tarr& x, Tcmp const& cmp)
{
  std::sort(x.rawarr(), x.rawarr() + x.size());
}

template <typename Tcmp, typename Tarr> inline
void stable_sort_lt(Tarr& x, Tcmp const& cmp)
{
  std::stable_sort(x.rawarr(), x.rawarr() + x.size());
}

template <typename Tcmp, typename Tarr> inline
void sort(Tarr& x, Tcmp const& cmp)
{
  std::sort(x.rawarr(), x.rawarr() + x.size(), cmp);
}

template <typename Tcmp, typename Tarr> inline
void stable_sort(Tarr& x, Tcmp const& cmp)
{
  std::stable_sort(x.rawarr(), x.rawarr() + x.size(), cmp);
}

};
;

