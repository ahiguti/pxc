private threaded namespace numeric::integral::impl "use-unsafe";

extern "types" inline

#if PXC_PROFILE_noexceptions
#define PXC_NOEXCEPTIONS 1
#define PXC_THROW(x) ::abort();
#define PXC_TRY
#define PXC_CATCH(x) if(0)
#define PXC_NOTHROW throw()
#define PXC_RETHROW
#define BOOST_NO_EXCEPTIONS
#else
#define PXC_THROW(x) throw x;
#define PXC_TRY try
#define PXC_CATCH(x) catch(x)
#define PXC_NOTHROW throw()
#define PXC_RETHROW throw
#endif

#include <stdint.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cassert>
#include <climits>
#include <alloca.h>
#include <stdexcept>

#ifdef BOOST_NO_EXCEPTIONS
namespace boost {
template <typename T> void throw_exception(T const& x) { ::abort(); }
};
#endif

#include <boost/type_traits/is_pod.hpp>
#include <boost/static_assert.hpp>

namespace pxcrt {

struct bt_unit { };
extern bt_unit unit_value; /* used when a reference is required */
typedef bool bt_bool;
typedef ::uint8_t bt_uchar;
typedef ::int8_t bt_char;
typedef ::uint16_t bt_ushort;
typedef ::int16_t bt_short;
typedef ::uint32_t bt_uint;
typedef ::int32_t bt_int;
typedef ::uint64_t bt_ulong;
typedef ::int64_t bt_long;
typedef ::size_t bt_size_t;
typedef ::ssize_t bt_ssize_t;
typedef float bt_float;
typedef double bt_double;
struct bt_tpdummy;

struct noncopyable {
  noncopyable() { }
private:
  noncopyable(const noncopyable&);
  noncopyable& operator =(const noncopyable&);
};

}; // namespace pxcrt

;

extern "functions" inline

;

extern "implementation" inline
namespace pxcrt {
bt_unit unit_value;
}; // namespace pxcrt
;
