public threaded namespace equality "use-unsafe";
public import numeric::integral -;
public import numeric::fp -;
public import numeric::fpmath -;
public import numeric::union_tag  -;
public import container::array -;
public import ordered;
public import meta m;

public threaded function {t} bool
equal_compare(t const& x, t const& y)
{
  return ordered::compare_swo(x, y) == 0;
}

public threaded function extern "::pxcrt::hash_c" {t} size_t
hash_c(t const& x);

public threaded function void
hash_combine(size_t mutable& x, size_t v)
{
  x ^= v +  0x9e3779b9 + (x << 6) + (x >> 2);
}

extern "functions" inline
#include <boost/functional/hash.hpp>
namespace pxcrt {

template <typename T> static inline size_t hash_c(T const& x)
{
  ::boost::hash<T> fobj;
  return fobj(x);
};

}; // namespace pxcrt
;

