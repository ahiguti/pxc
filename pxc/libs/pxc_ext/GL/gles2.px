public threaded namespace GL::gles2 "export-unsafe";
public import common -;
public import GL::base *;
public import GL::api_gles2 -;
public import meta m;

extern "types" inline

#ifdef ANDROID
#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>
#endif

;

expand(sym : gl_bfval) {
public extern "%" GLbitfield sym;
}

expand(sym : gl_enumval) {
public extern "%" GLenum sym;
}

expand(sym0, i : m::map{gl_cmds, m::at0}) {
expand(sym1 : {m::concat{sym0, "_nocheck"}}) {
expand(sym_c : {m::concat{"::", sym0}}) {
private function extern "sym_c" ent_to_ret_type{m::at{gl_cmds, i}}
  sym1(expand(ent_to_argdefs{m::at{gl_cmds, i}}));
public function ent_to_ret_type{m::at{gl_cmds, i}}
  sym0(expand(ent_to_argdefs{m::at{gl_cmds, i}}))
{
  metafunction cmd m::at{gl_cmds, i};
  metafunction rt ent_to_ret_type{cmd};
  if (m::ne{rt, void}) {
    const r = sym1(expand(a: ent_to_argnames{cmd}; a));
    if (m::ne{sym0, "glGetError"}) {
      gl_check_error_if(m::to_string{sym0});
    }
    return r;
  } else {
    sym1(expand(a: ent_to_argnames{cmd}; a));
    gl_check_error_if(m::to_string{sym0});
  }
}
}
}
}

private metafunction gl_enumval GL_ES_VERSION_2_0_ENUMVAL;
private metafunction gl_bfval GL_ES_VERSION_2_0_BFVAL;
private metafunction gl_cmds GL_ES_VERSION_2_0_CMD;

