public threaded namespace GL::glm "use-unsafe";
public import common -;
public import meta m;

public metafunction vec2 tvec2{float};
public metafunction vec3 tvec3{float};
public metafunction vec4 tvec4{float};
public metafunction mat2 tmat2{float};
public metafunction mat3 tmat3{float};
public metafunction mat4 tmat4{float};

public tsvaluetype struct extern "glm::detail::tvec2" {t} tvec2 { }
public tsvaluetype struct extern "glm::detail::tvec3" {t} tvec3 { }
public tsvaluetype struct extern "glm::detail::tvec4" {t} tvec4 { }
public tsvaluetype struct extern "glm::detail::tmat2x2" {t} tmat2 { }
public tsvaluetype struct extern "glm::detail::tmat3x3" {t} tmat3 { }
public tsvaluetype struct extern "glm::detail::tmat4x4" {t} tmat4 { }

public metafunction make_vec2 make_tvec2{float};
public metafunction make_vec3 make_tvec3{float};
public metafunction make_vec4 make_tvec4{float};
public metafunction make_mat2 make_tmat2{float};
public metafunction make_mat3 make_tmat3{float};
public metafunction make_mat4 make_tmat4{float};

public threaded function extern "pxcglm::make_tvec2" {t}
tvec2{t} make_tvec2(t x, t y);
public threaded function extern "pxcglm::make_tvec3" {t}
tvec3{t} make_tvec3(t x, t y, t z);
public threaded function extern "pxcglm::make_tvec4" {t}
tvec4{t} make_tvec4(t x, t y, t z, t w);
public threaded function extern "pxcglm::make_tmat2" {t}
tmat2{t} make_tmat2(t x);
public threaded function extern "pxcglm::make_tmat3" {t}
tmat3{t} make_tmat3(t x);
public threaded function extern "pxcglm::make_tmat4" {t}
tmat4{t} make_tmat4(t x);

public threaded function extern "pxcglm::tvec2_to_cslice" {t}
cslice{t} tvec2_to_cslice(tvec2{t} const& x);
public threaded function extern "pxcglm::tvec3_to_cslice" {t}
cslice{t} tvec3_to_cslice(tvec3{t} const& x);
public threaded function extern "pxcglm::tvec4_to_cslice" {t}
cslice{t} tvec4_to_cslice(tvec4{t} const& x);
public threaded function extern "pxcglm::tmat2_to_cslice" {t}
cslice{t} tmat2_to_cslice(tmat2{t} const& x);
public threaded function extern "pxcglm::tmat3_to_cslice" {t}
cslice{t} tmat3_to_cslice(tmat3{t} const& x);
public threaded function extern "pxcglm::tmat4_to_cslice" {t}
cslice{t} tmat4_to_cslice(tmat4{t} const& x);
public threaded function extern "pxcglm::tvec2_to_slice" {t}
slice{t} tvec2_to_slice(tvec2{t} mutable& x);
public threaded function extern "pxcglm::tvec3_to_slice" {t}
slice{t} tvec3_to_slice(tvec3{t} mutable& x);
public threaded function extern "pxcglm::tvec4_to_slice" {t}
slice{t} tvec4_to_slice(tvec4{t} mutable& x);
public threaded function extern "pxcglm::tmat2_to_slice" {t}
slice{t} tmat2_to_slice(tmat2{t} mutable& x);
public threaded function extern "pxcglm::tmat3_to_slice" {t}
slice{t} tmat3_to_slice(tmat3{t} mutable& x);
public threaded function extern "pxcglm::tmat4_to_slice" {t}
slice{t} tmat4_to_slice(tmat4{t} mutable& x);

public threaded function extern "pxcglm::tvec2_to_crawptr" {t}
crawptr{t} tvec2_to_crawptr(tvec2{t} const& x);
public threaded function extern "pxcglm::tvec3_to_crawptr" {t}
crawptr{t} tvec3_to_crawptr(tvec3{t} const& x);
public threaded function extern "pxcglm::tvec4_to_crawptr" {t}
crawptr{t} tvec4_to_crawptr(tvec4{t} const& x);
public threaded function extern "pxcglm::tmat3_to_crawptr" {t}
crawptr{t} tmat3_to_crawptr(tmat3{t} const& x);
public threaded function extern "pxcglm::tmat4_to_crawptr" {t}
crawptr{t} tmat4_to_crawptr(tmat4{t} const& x);
public threaded function extern "pxcglm::tvec2_to_rawptr" {t}
rawptr{t} tvec2_to_rawptr(tvec2{t} mutable& x);
public threaded function extern "pxcglm::tvec3_to_rawptr" {t}
rawptr{t} tvec3_to_rawptr(tvec3{t} mutable& x);
public threaded function extern "pxcglm::tvec4_to_rawptr" {t}
rawptr{t} tvec4_to_rawptr(tvec4{t} mutable& x);
public threaded function extern "pxcglm::tmat2_to_rawptr" {t}
rawptr{t} tmat2_to_rawptr(tmat2{t} mutable& x);
public threaded function extern "pxcglm::tmat3_to_rawptr" {t}
rawptr{t} tmat3_to_rawptr(tmat3{t} mutable& x);
public threaded function extern "pxcglm::tmat4_to_rawptr" {t}
rawptr{t} tmat4_to_rawptr(tmat4{t} mutable& x);

public function extern "pxcglm::tvec2_to_farray" {t}
farray{t, 2} tvec2_to_farray(tvec2{t} const& x);
public function extern "pxcglm::tvec3_to_farray" {t}
farray{t, 3} tvec3_to_farray(tvec3{t} const& x);
public function extern "pxcglm::tvec4_to_farray" {t}
farray{t, 4} tvec4_to_farray(tvec4{t} const& x);
public function extern "pxcglm::tmat2_to_farray" {t}
farray{t, 4} tmat2_to_farray(tmat2{t} const& x);
public function extern "pxcglm::tmat3_to_farray" {t}
farray{t, 9} tmat3_to_farray(tmat3{t} const& x);
public function extern "pxcglm::tmat4_to_farray" {t}
farray{t, 16} tmat4_to_farray(tmat4{t} const& x);

public function extern "pxcglm::tmat2_to_3" {t}
tmat3{t} tmat2_to_3(tmat2{t} const& x);
public function extern "pxcglm::tmat3_to_2" {t}
tmat2{t} tmat3_to_2(tmat3{t} const& x);
public function extern "pxcglm::tmat3_to_4" {t}
tmat4{t} tmat3_to_4(tmat3{t} const& x);
public function extern "pxcglm::tmat4_to_3" {t}
tmat3{t} tmat4_to_3(tmat4{t} const& x);

public function extern "glm::rotate" {t}
tmat2{t} tmat2_rotate(tmat2{t} const& m, t angle, tvec2{t} const& axis);
public function extern "glm::transpose" {t}
tmat2{t} tmat2_transpose(tmat2{t} const& m);
public function extern "glm::inverse" {t}
tmat2{t} tmat2_inverse(tmat2{t} const& m);
public function extern "pxcglm::tmat2_multiply" {t}
tmat2{t} tmat2_multiply(tmat2{t} const& x, tmat2{t} const& y);

public function extern "glm::rotate" {t}
tmat3{t} tmat3_rotate(tmat3{t} const& m, t angle, tvec3{t} const& axis);
public function extern "glm::transpose" {t}
tmat3{t} tmat3_transpose(tmat3{t} const& m);
public function extern "glm::inverse" {t}
tmat3{t} tmat3_inverse(tmat3{t} const& m);
public function extern "pxcglm::tmat3_multiply" {t}
tmat3{t} tmat3_multiply(tmat3{t} const& x, tmat3{t} const& y);

public function extern "glm::rotate" {t}
tmat4{t} tmat4_rotate(tmat4{t} const& m, t angle, tvec3{t} const& axis);
public function extern "glm::transpose" {t}
tmat4{t} tmat4_transpose(tmat4{t} const& m);
public function extern "glm::inverse" {t}
tmat4{t} tmat4_inverse(tmat4{t} const& m);
public function extern "pxcglm::tmat4_multiply" {t}
tmat4{t} tmat4_multiply(tmat4{t} const& x, tmat4{t} const& y);
public function extern "pxcglm::tmat4_multiply_vec" {t}
tvec4{t} tmat4_multiply_vec(tmat4{t} const& x, tvec4{t} const& y);

public function extern "glm::scale" {t}
tmat4{t} tmat4_scale(tmat4{t} const& m, tvec3{t} const& fa);
public function extern "glm::translate" {t}
tmat4{t} tmat4_translate(tmat4{t} const& m, tvec3{t} const& tr);
public function extern "glm::frustum" {t}
tmat4{t} frustum(t left, t right, t bottom, t top, t near, t far);
public function extern "glm::ortho" {t}
tmat4{t} ortho(t left, t right, t bottom, t top, t near, t far);
public function extern "glm::lookAt" {t}
tmat4{t} lookAt(tvec3{t} const& e, tvec3{t} const& c, tvec3{t} const& u);
public function extern "glm::ortho" {t}
tmat4{t} ortho2D(t left, t right, t bottom, t top);
public function extern "glm::perspective" {t}
tmat4{t} perspective(t fovy, t aspect, t zNear, t zFar);

extern "types" inline
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
;

extern "functions" inline
namespace pxcglm {

template <typename T> static inline glm::detail::tvec2<T>
make_tvec2(T x, T y)
{ return glm::detail::tvec2<T>(x, y); }
template <typename T> static inline glm::detail::tvec3<T>
make_tvec3(T x, T y, T z)
{ return glm::detail::tvec3<T>(x, y, z); }
template <typename T> static inline glm::detail::tvec4<T>
make_tvec4(T x, T y, T z, T w)
{ return glm::detail::tvec4<T>(x, y, z, w); }
template <typename T> static inline glm::detail::tmat2x2<T>
make_tmat2(T x)
{ return glm::detail::tmat2x2<T>(x); }
template <typename T> static inline glm::detail::tmat3x3<T>
make_tmat3(T x)
{ return glm::detail::tmat3x3<T>(x); }
template <typename T> static inline glm::detail::tmat4x4<T>
make_tmat4(T x)
{ return glm::detail::tmat4x4<T>(x); }

template <typename T> static inline pxcrt::bt_cslice<T>
tvec2_to_cslice(glm::detail::tvec2<T> const& x)
{ return pxcrt::bt_cslice<T>(glm::value_ptr(x), 2); }
template <typename T> static inline pxcrt::bt_cslice<T>
tvec3_to_cslice(glm::detail::tvec3<T> const& x)
{ return pxcrt::bt_cslice<T>(glm::value_ptr(x), 3); }
template <typename T> static inline pxcrt::bt_cslice<T>
tvec4_to_cslice(glm::detail::tvec4<T> const& x)
{ return pxcrt::bt_cslice<T>(glm::value_ptr(x), 4); }
template <typename T> static inline pxcrt::bt_cslice<T>
tmat2_to_cslice(glm::detail::tmat2x2<T> const& x)
{ return pxcrt::bt_cslice<T>(glm::value_ptr(x), 4); }
template <typename T> static inline pxcrt::bt_cslice<T>
tmat3_to_cslice(glm::detail::tmat3x3<T> const& x)
{ return pxcrt::bt_cslice<T>(glm::value_ptr(x), 9); }
template <typename T> static inline pxcrt::bt_cslice<T>
tmat4_to_cslice(glm::detail::tmat4x4<T> const& x)
{ return pxcrt::bt_cslice<T>(glm::value_ptr(x), 16); }

template <typename T> static inline pxcrt::bt_slice<T>
tvec2_to_slice(glm::detail::tvec2<T>& x)
{ return pxcrt::bt_slice<T>(glm::value_ptr(x), 2); }
template <typename T> static inline pxcrt::bt_slice<T>
tvec3_to_slice(glm::detail::tvec3<T>& x)
{ return pxcrt::bt_slice<T>(glm::value_ptr(x), 3); }
template <typename T> static inline pxcrt::bt_slice<T>
tvec4_to_slice(glm::detail::tvec4<T>& x)
{ return pxcrt::bt_slice<T>(glm::value_ptr(x), 4); }
template <typename T> static inline pxcrt::bt_slice<T>
tmat2_to_slice(glm::detail::tmat2x2<T>& x)
{ return pxcrt::bt_slice<T>(glm::value_ptr(x), 4); }
template <typename T> static inline pxcrt::bt_slice<T>
tmat3_to_slice(glm::detail::tmat3x3<T>& x)
{ return pxcrt::bt_slice<T>(glm::value_ptr(x), 9); }
template <typename T> static inline pxcrt::bt_slice<T>
tmat4_to_slice(glm::detail::tmat4x4<T>& x)
{ return pxcrt::bt_slice<T>(glm::value_ptr(x), 16); }

template <typename T> static inline T const *
tvec2_to_crawptr(glm::detail::tvec2<T> const& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T const *
tvec3_to_crawptr(glm::detail::tvec3<T> const& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T const *
tvec4_to_crawptr(glm::detail::tvec4<T> const& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T const *
tmat2_to_crawptr(glm::detail::tmat2x2<T> const& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T const *
tmat3_to_crawptr(glm::detail::tmat3x3<T> const& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T const *
tmat4_to_crawptr(glm::detail::tmat4x4<T> const& x)
{ return glm::value_ptr(x); }

template <typename T> static inline T *
tvec2_to_rawptr(glm::detail::tvec2<T>& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T *
tvec3_to_rawptr(glm::detail::tvec3<T>& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T *
tvec4_to_rawptr(glm::detail::tvec4<T>& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T *
tmat2_to_rawptr(glm::detail::tmat2x2<T>& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T *
tmat3_to_rawptr(glm::detail::tmat3x3<T>& x)
{ return glm::value_ptr(x); }
template <typename T> static inline T *
tmat4_to_rawptr(glm::detail::tmat4x4<T>& x)
{ return glm::value_ptr(x); }

template <typename T> static inline pxcrt::farray<T, 2>
tvec2_to_farray(glm::detail::tvec2<T> const& x)
{
  pxcrt::farray<T, 2> r;
  std::memcpy(r.rawarr(), glm::value_ptr(x), 2 * sizeof(T));
  return r;
}
template <typename T> static inline pxcrt::farray<T, 3>
tvec3_to_farray(glm::detail::tvec3<T> const& x)
{
  pxcrt::farray<T, 3> r;
  std::memcpy(r.rawarr(), glm::value_ptr(x), 3 * sizeof(T));
  return r;
}
template <typename T> static inline pxcrt::farray<T, 4>
tvec4_to_farray(glm::detail::tvec4<T> const& x)
{
  pxcrt::farray<T, 4> r;
  std::memcpy(r.rawarr(), glm::value_ptr(x), 4 * sizeof(T));
  return r;
}
template <typename T> static inline pxcrt::farray<T, 4>
tmat2_to_farray(glm::detail::tmat2x2<T> const& x)
{
  pxcrt::farray<T, 4> r;
  std::memcpy(r.rawarr(), glm::value_ptr(x), 4 * sizeof(T));
  return r;
}
template <typename T> static inline pxcrt::farray<T, 9>
tmat3_to_farray(glm::detail::tmat3x3<T> const& x)
{
  pxcrt::farray<T, 9> r;
  std::memcpy(r.rawarr(), glm::value_ptr(x), 9 * sizeof(T));
  return r;
}
template <typename T> static inline pxcrt::farray<T, 16>
tmat4_to_farray(glm::detail::tmat4x4<T> const& x)
{
  pxcrt::farray<T, 16> r;
  std::memcpy(r.rawarr(), glm::value_ptr(x), 16 * sizeof(T));
  return r;
}

template <typename T> static inline glm::detail::tmat3x3<T>
tmat2_to_3(glm::detail::tmat2x2<T> const& x)
{ return glm::detail::tmat3x3<T>(x); }

template <typename T> static inline glm::detail::tmat2x2<T>
tmat3_to_2(glm::detail::tmat3x3<T> const& x)
{ return glm::detail::tmat2x2<T>(x); }

template <typename T> static inline glm::detail::tmat4x4<T>
tmat3_to_4(glm::detail::tmat3x3<T> const& x)
{ return glm::detail::tmat4x4<T>(x); }

template <typename T> static inline glm::detail::tmat3x3<T>
tmat4_to_3(glm::detail::tmat4x4<T> const& x)
{ return glm::detail::tmat3x3<T>(x); }

template <typename T> static inline glm::detail::tmat2x2<T>
tmat2_multiply(glm::detail::tmat2x2<T> const& x,
  glm::detail::tmat2x2<T> const& y)
{ return x * y; }

template <typename T> static inline glm::detail::tmat3x3<T>
tmat3_multiply(glm::detail::tmat3x3<T> const& x,
  glm::detail::tmat3x3<T> const& y)
{ return x * y; }

template <typename T> static inline glm::detail::tmat4x4<T>
tmat4_multiply(glm::detail::tmat4x4<T> const& x,
  glm::detail::tmat4x4<T> const& y)
{ return x * y; }

template <typename T> static inline glm::detail::tvec4<T>
tmat4_multiply_vec(glm::detail::tmat4x4<T> const& x,
  glm::detail::tvec4<T> const& y)
{ return x * y; }

};
;
