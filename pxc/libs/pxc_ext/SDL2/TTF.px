public threaded namespace SDL2::TTF "use-unsafe";
public import common -;
public import SDL2 -;

extern "ldflags" "-lSDL2_ttf";
/* extern "cflags" "`pkg-config --cflags SDL_ttf`"; */
/* extern "ldflags" "`pkg-config --libs SDL_ttf`"; */

/* TTF_Font */

public function option{ptr{TTF_Font}}
TTF_OpenFont(cstrref const& filename, int ptsize)
{
  ptr{TTF_Font} p = make_ptr{TTF_Font}();
  option{ptr{TTF_Font}} r;
  if (OpenFont(*p, filename, ptsize) == 0) {
    r.some = p;
  }
  return r;
}

public function option{ptr{SDL_Surface}}
TTF_RenderUTF8_Blended(ptr{TTF_Font} const& font, cstrref const& text,
  SDL_Color fg)
{
  ptr{SDL_Surface} p = make_ptr{SDL_Surface}();
  option{ptr{SDL_Surface}} r;
  if (RenderUTF8_Blended(*p, font, text, fg) == 0) {
    r.some = p;
  }
  return r;
}

public struct extern "SDL2::TTF_Font" "noncopyable"
TTF_Font private() { }

/* private */

private function extern "SDL2::OpenFont" int
OpenFont(TTF_Font mutable& font, cstrref const& filename, int ptsize);

private function extern "SDL2::RenderUTF8_Blended" int
RenderUTF8_Blended(SDL_Surface mutable& sur, ptr{TTF_Font} const& font,
  cstrref const& text, SDL_Color fg);

extern "types" inline

#include <SDL2/SDL_ttf.h>

namespace SDL2 {

using namespace pxcrt;

struct TTF_InitObj : private noncopyable {
  TTF_InitObj();
  ~TTF_InitObj();
private:
  static int init_count;
};

struct TTF_Font {
  TTF_Font();
  ~TTF_Font();
  ::TTF_Font *ptr;
private:
  TTF_InitObj ini;
};

}; // namespace SDL2

;

extern "implementation" inline

namespace SDL2 {

int TTF_InitObj::init_count = 0;

TTF_InitObj::TTF_InitObj()
{
  if (++init_count == 1) {
    TTF_Init();
  }
}

TTF_InitObj::~TTF_InitObj()
{
  if (--init_count == 0) {
    TTF_Quit();
  }
}

TTF_Font::TTF_Font() : ptr(0) { }

TTF_Font::~TTF_Font()
{
  if (ptr != 0) {
    ::TTF_CloseFont(ptr);
  }
}

int
OpenFont(TTF_Font& font, cstrref const& filename, bt_int ptsize)
{
  PXCRT_ALLOCA_NTSTRING(filename_nt, filename);
  font.ptr = ::TTF_OpenFont(filename_nt.get(), ptsize);
  return (font.ptr != 0) ? 0 : -1;
}

int
RenderUTF8_Blended( ::SDL2::Surface& sur, rcptr< rcval<TTF_Font> > const& font,
  cstrref const& text, SDL_Color fg)
{
  PXCRT_ALLOCA_NTSTRING(text_nt, text);
  sur.ptr = ::TTF_RenderUTF8_Blended(font->value.ptr, text_nt.get(), fg);
  return (sur.ptr != 0) ? 0 : -1;
}

}; // namespace SDL2

;

