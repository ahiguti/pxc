public threaded namespace SDL2::misc "export-unsafe";
public import common -;
public import pointer::raw -;
public import container::raw -;
public import SDL2::api_base -;
public import SDL2::api_types -;
public import SDL2::api_functions -;
public import SDL2::api_wrappers -;
public import meta m;

public threaded function extern "SDL2::Log" void SDL_Log(
  cstrref const& mess);
public threaded function extern "SDL2::LogInfo" void SDL_LogInfo(
  int cat, cstrref const& mess);
public threaded function extern "SDL2::LogWarn" void SDL_LogWarn(
  int cat, cstrref const& mess);
public threaded function extern "SDL2::LogError" void SDL_LogError(
  int cat, cstrref const& mess);

extern "implementation" inline

namespace SDL2 {
using namespace pxcrt;

void Log(cstrref const& mess)
{
  PXCRT_ALLOCA_NTSTRING(mess_nt, mess);
  SDL_Log("%s", mess_nt.get());
}

void LogInfo(bt_int cat, cstrref const& mess)
{
  PXCRT_ALLOCA_NTSTRING(mess_nt, mess);
  SDL_LogInfo(cat, "%s", mess_nt.get());
}

void LogWarn(bt_int cat, cstrref const& mess)
{
  PXCRT_ALLOCA_NTSTRING(mess_nt, mess);
  SDL_LogWarn(cat, "%s", mess_nt.get());
}

void LogError(bt_int cat, cstrref const& mess)
{
  PXCRT_ALLOCA_NTSTRING(mess_nt, mess);
  SDL_LogError(cat, "%s", mess_nt.get());
}

};
;

