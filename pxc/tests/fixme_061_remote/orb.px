public namespace orb;
public import ordered::compare -;
public import common -;
public import string::conversion -;
public import meta -;
public import downcast -;
public import meta m;
public import meta::family mf;

public threaded struct orb {
  ns_functions funcs;
  vector{methods} mets;
  string rbuf;
  string wbuf;
  tree_map{rawptr_type, skeleton_mapped} skeletons;
    /* local realobject rawptr to realobject pointer */
  tree_map{size_t, rawptr_type} stubs;
    /* remote realobject id to local stub rawptr */
}

public threaded union skeleton_mapped {
  unit nothing;
  ptr{remote} real_object;
}

public threaded interface remote { }

public threaded function void execute(orb& o)
{
  try {
    uchar req = o.rbuf[0];
    if (req == 'F') {
      call_ns_function(o, 2, o.rbuf.size());
    } else {
      o.wbuf.append("T\tunknown_request\n");
    }
  } catch (runtime_error e) {
    o.wbuf.clear();
    o.wbuf.append("T\t");
    string s = exception_what(e);
    string tr = exception_stack_trace(e);
    if (!tr.empty()) {
      s.append("\n");
      s.append(tr);
    }
    serialize_to_string{string}(s, o.wbuf);
    o.wbuf.append("\n");
  }
}

private threaded function void call_function_notfound(orb& o,
  size_t const tpos, size_t const tepos, size_t const apos, size_t const aepos)
{
  o.wbuf.append("T\tfunction_not_found\n");
}

private threaded function {ns, i0, i1} void call_ns_function_bs(orb& o,
  size_t const tpos, size_t const tepos, size_t const apos, size_t const aepos)
{
  if (m::eq{i0, i1}) {
    call_function_notfound(o, tpos, tepos, apos, aepos);
  } else {
    metafunction fns m::sort{m::map{m::functions{ns}, m::to_string}};
    metafunction cidx m::add{i0, m::div{m::sub{i1, i0}, 2}};
    /*
    debug_log("tpos", tpos);
    debug_log("tepos", tepos);
    debug_log("name", o.rbuf[tpos .. tepos]);
    */
    int const c = compare{cstrref}(o.rbuf[tpos .. tepos], m::at{fns, cidx});
    if (c == 0) {
      function_call{m::symbol{ns, m::at{fns, cidx}}}(o, apos, aepos);
    } else if (c < 0) {
      call_ns_function_bs{ns, i0, cidx}(o, tpos, tepos, apos, aepos);
    } else {
      call_ns_function_bs{ns, cidx, i1}(o, tpos, tepos, apos, aepos);
    }
  }
}

public threaded function {ns} void call_ns_function_ni(orb& o,
  size_t const pos, size_t const epos)
{
  size_t args_pos = pos;
  size_t const delim_pos = skip_token(o.rbuf, args_pos, epos);
  metafunction fns m::sort{m::map{m::functions{ns}, m::to_string}};
  call_ns_function_bs{ns, 0, m::size{fns}}(o, pos, delim_pos, args_pos, epos);
}

private threaded function void call_method_notfound(orb& o, remote& obj,
  size_t const tpos, size_t const tepos, size_t const apos, size_t const aepos)
{
  o.wbuf.append("T\tmethod_not_found\n");
}

private threaded function {t, i0, i1} void call_method_bs(
  orb& o, remote& obj, size_t const tpos, size_t const tepos,
  size_t const apos, size_t const aepos)
{
  if (m::eq{i0, i1}) {
    call_method_notfound(o, obj, tpos, tepos, apos, aepos);
  } else {
    metafunction mf member_functions_sorted{t};
    metafunction cidx m::add{i0, m::div{m::sub{i1, i0}, 2}};
    /*
    debug_log("tpos", tpos);
    debug_log("tepos", tepos);
    debug_log("name", o.rbuf[tpos .. tepos]);
    */
    int const c = compare{cstrref}(
      o.rbuf[tpos .. tepos], m::to_string{m::at{mf, cidx}});
    if (c == 0) {
      method_call{t, cidx}(o, apos, aepos, obj);
    } else if (c < 0) {
      call_method_bs{t, i0, cidx}(o, obj, tpos, tepos, apos, aepos);
    } else {
      call_method_bs{t, cidx, i1}(o, obj, tpos, tepos, apos, aepos);
    }
  }
}

public threaded function {t} void call_method_ni(orb& o, size_t const pos,
  size_t const epos, remote& obj)
{
  size_t args_pos = pos;
  size_t const delim_pos = skip_token(o.rbuf, args_pos, epos);
  metafunction mf member_functions_sorted{t};
  call_method_bs{t, 0, m::size{mf}}(o, obj, pos, delim_pos, args_pos, epos);
}

private threaded function {f} void function_call(orb& o, size_t pos,
  size_t epos)
{
  expand (asym, idx : func_argexp_list{f}) {
    func_arg_type_ne{f, idx} asym =
      unmarshal_value{func_arg_type_ne{f, idx}}(o.rbuf, pos, epos);
  }
  if (m::ne{m::ret_type{f}, void}) {
    m::ret_type{f} r = f(expand(a : func_arg_names{f}; a));
    o.wbuf.append("R\t");
    marshal_value(o.wbuf, r);
    o.wbuf.append("\n");
  } else {
    o.wbuf.append("R\t");
    f(expand(a : func_arg_names{f}; a));
    o.wbuf.append("\n");
  }
}

private threaded function {t, mi} void method_call(orb& o, size_t pos,
  size_t epos, remote& obj)
{
  t mutable& objt = downcast_mutable{t, remote}(obj);
  metafunction f m::at{member_functions_sorted{t}, mi};
  expand (asym, idx : func_argexp_list{f}) {
    func_arg_type_ne{f, idx} asym =
      unmarshal_value{func_arg_type_ne{f, idx}}(o.rbuf, pos, epos);
  }
  expand (fsym : m::list{m::list{m::to_string{f}, 0}}) {
    if (m::ne{m::ret_type{f}, void}) {
      m::ret_type{f} r = objt.fsym(expand(a : func_arg_names{f}; a));
      o.wbuf.append("R\t");
      marshal_value(o.wbuf, r);
      o.wbuf.append("\n");
    } else {
      o.wbuf.append("R\t");
      obj.fsym(expand(a : func_arg_names{f}; a));
      o.wbuf.append("\n");
    }
  }
}

private threaded function {t} t unmarshal_value(string const& buf, size_t& pos,
  size_t epos)
{
  size_t npos = pos;
  size_t const delim_pos = skip_token(buf, npos, epos);
  cstrref tok = buf[pos .. delim_pos];
  pos = npos;
  return deserialize_from_string{t}(tok);
}

private threaded function {t} void marshal_value(string& buf, t const& x)
{
  serialize_to_string{t}(x, buf);
}

private tsvaluetype struct extern "orb::rawptr_type" rawptr_type { }
private threaded function extern "orb::ptr_to_rawptr" rawptr_type
ptr_to_rawptr(ptr{remote} const& p);
private threaded function extern "orb::rawptr_to_ptr" ptr{remote}
rawptr_to_ptr(rawptr_type rawptr);
private threaded function extern "orb::size_t_to_rawptr" rawptr_type
size_t_to_rawptr(size_t v);
private threaded function extern "orb::rawptr_to_size_t" size_t
rawptr_to_size_t(rawptr_type rawptr);

extern "types" inline
namespace orb {
typedef void *rawptr_type;
}; // namespace orb
;

extern "implementation" inline
namespace orb {
using namespace pxcrt;
typedef ::orb$n::remote$i remote_type;
rawptr_type ptr_to_rawptr(const rcptr<remote_type>& p)
{
  rawptr_type const rp = p.get();
  return rp;
}
rcptr<remote_type> rawptr_to_ptr(rawptr_type rawptr)
{
  remote_type *const p = static_cast<remote_type *>(rawptr);
  p->incref$z();
  rcptr<remote_type> ptr(p);
  return ptr;
}
rawptr_type size_t_to_rawptr(const bt_size_t v)
{
  return reinterpret_cast<rawptr_type>(v);
}
bt_size_t rawptr_to_size_t(rawptr_type rawptr)
{
  return reinterpret_cast<bt_size_t>(rawptr);
}
}; // namespace orb
;

private threaded function {t} void marshal_reference(orb& o, t const& x)
{
  rawptr_type const rawptr = ptr_to_rawptr(x);
  /*
  if (size_t remote_objid : o.stubs[???]) {
    o.wbuf.push_back(cstub);
    serialize_to_string{size_t}(remote_objid, o.wbuf);
  } else
  */
  {
    skeleton_mapped mutable m = o.skeletons[rawptr];
    if (case m.nothing) {
      m.real_object = x;
    }
    o.wbuf.push_back('!');
    serialize_to_string{size_t}(rawptr_to_size_t(rawptr), o.wbuf);
  }
}

private threaded function {t} t unmarshal_reference(orb& o, size_t& pos,
  size_t epos)
{
  cstrref buf = o.rbuf[pos .. epos];
  if (buf.empty()) {
    throw runtime_error_template{"parse_error"}();
  }
  uchar const ch = buf[0];
  buf.pop_front(1);
  size_t const val = deserialize_from_string{size_t}(buf);
  if (ch == '!') {
    if (skeleton_mapped m : o.skeletons[size_t_to_rawptr(val)]) {
      debug_log("unm", val);
      return pointer_downcast{t, ptr{remote}}(m.real_object);
    }
    throw runtime_error_template{"skeleton_notfound"}();
  /*
  } else if (ch == cstub) {
    if (size_t rawptr : o.stubs[val]) {
      ptr{remote} r = rawptr_to_ptr(rawptr);
    } else {
      // FIXME: create stub
    }
  */
  } else {
    throw runtime_error_template{"parse_error"}();
  }
}

private threaded function size_t skip_token(string const& buf, size_t& pos,
  size_t epos)
{
  size_t delim_pos = buf.find(pos, '\t');
  if (delim_pos < epos) {
    pos = delim_pos + 1;
    return delim_pos;
  } else {
    pos = epos;
    return epos;
  }
}

private metafunction member_functions_sorted{t}
  sort_by_string{m::member_functions{t}};
private metafunction sort_by_string{lst}
  m::map{m::sort{m::map{lst, string_and_value}}, m::at1};
private metafunction string_and_value{v} m::list{m::to_string{v}, v};

private metafunction func_argexp_list{f}
  m::map{m::seq{m::size{m::args{f}}}, argexp};
private metafunction argexp{idx}
  m::list{m::concat{"a", idx}, 0};
private metafunction func_arg_names{f}
  m::map{m::seq{m::size{m::args{f}}}, arg_name};
private metafunction arg_name{idx}
  m::concat{"a", idx};
private metafunction func_arg_type_ne{f, idx}
 mf::to_non_ephemeral_type{m::at{m::arg_types{f}, idx}};

/* using function/method table */

public threaded function void call_ns_function(orb& o, size_t const pos,
  size_t const epos)
{
  ns_functions_slice fs = o.funcs;
  size_t args_pos = pos;
  size_t const delim_pos = skip_token(o.rbuf, args_pos, epos);
  size_t const p = binary_search{func_entry, cstrref, compare_func_entry}(
    fs, o.rbuf[pos .. delim_pos]);
  if (p < fs.size()) {
    fs[p].func->call(o, args_pos, epos);
  } else {
    o.wbuf.append("T\tfunction_not_found\n");
  }
}

public threaded function void call_method(orb& o, size_t const pos,
  size_t const epos, size_t tid, remote& obj)
{
  methods_slice ms = o.mets[tid];
  size_t args_pos = pos;
  size_t const delim_pos = skip_token(o.rbuf, args_pos, epos);
  size_t const p = binary_search{method_entry, cstrref, compare_method_entry}(
    ms, o.rbuf[pos .. delim_pos]);
  if (p < ms.size()) {
    ms[p].method->call(o, args_pos, epos, obj);
  } else {
    o.wbuf.append("T\tmethod_not_found\n");
  }
}

public threaded struct func_entry (strlit const& k,
  ptr{i_marshal_fcall} const& f)
{
  strlit name = k;
  ptr{i_marshal_fcall} func = f;
}

public threaded struct method_entry (strlit const& k,
  ptr{i_marshal_method} const& f)
{
  strlit name = k;
  ptr{i_marshal_method} method = f;
}

public metafunction ns_functions vector{func_entry};
public metafunction ns_functions_slice cslice{func_entry};

public metafunction methods vector{method_entry};
public metafunction methods_slice cslice{method_entry};

public threaded function {ns} ns_functions create_ns_functions()
{
  ns_functions fs;
  expand (fsym, idx : m::sort{m::map{m::functions{ns}, m::to_string}}) {
    {
      strlit k = m::to_string{fsym};
      metafunction fc marshal_fcall{m::symbol{ns, fsym}};
      ptr{i_marshal_fcall} p = ptr{fc}(fc());
      func_entry e = func_entry(k, p);
      fs.push_back(e);
    }
  }
  return fs;
}

public threaded function {t} methods create_methods()
{
  methods ms;
  expand (fsym, idx : m::map{member_functions_sorted{t}, m::to_string}) {
    {
      strlit k = m::to_string{fsym};
      metafunction mt marshal_method{t, idx};
      ptr{i_marshal_method} p = ptr{mt}(mt());
      method_entry e = method_entry(k, p);
      ms.push_back(e);
    }
  }
  return ms;
}

private threaded interface i_marshal_fcall
{
  function void call(orb& o, size_t pos, size_t epos) const;
}

private threaded struct {f} marshal_fcall <i_marshal_fcall>
{
  function void call(orb& o, size_t pos, size_t epos) const {
    function_call{f}(o, pos, epos);
  }
}

private threaded interface i_marshal_method
{
  function void call(orb& o, size_t pos, size_t epos, remote& obj) const;
}

private threaded struct {t, mi} marshal_method <i_marshal_method>
{
  function void call(orb& o, size_t pos, size_t epos, remote& obj) const {
    method_call{t, mi}(o, pos, epos, obj);
  }
}

private threaded function {t, tk, cmp} size_t binary_search(cslice{t} const& s,
  tk const& k)
{
  size_t first = 0;
  size_t last = s.size();
  while (last - first > 0) {
    extern "disable-bounds-checking" 1; /* s[middle] is always safe */
    size_t const middle = first + ((last - first) >> 1);
    int const c = cmp(s[middle], k);
    if (c < 0) {
      first = middle + 1;
    } else if (c > 0) {
      last = middle;
    } else {
      return middle;
    }
  }
  return s.size();
}

private threaded function int compare_func_entry(func_entry const& ent,
  cstrref const& k)
{
  return compare{cstrref}(ent.name, k);
}

private threaded function int compare_method_entry(method_entry const& ent,
  cstrref const& k)
{
  return compare{cstrref}(ent.name, k);
}

