namespace vtest3;
import variant -;
import common -;
import meta::common m;
import numeric::cast n;
import exception::common -;
import string::positional -;
import downcast -;

multithreaded struct foo(int x) {
  int val = x;
  function void add(int x) { val += x; }
  function int get() const { return val; }
  function int func1(int& x, long const& y) {
    x = val;
    val += n::static_cast{int, long}(y);
    return val;
  }
}

function void test1() {

  var v = to_variant(foo(99));
  v.invoke("add", 9);
  println(v.invoke("get"));
  int x = 123;
  long y = 1000;
  var z = v.invoke("func1", x, y);
  println(z);
}

test1();

