namespace variant;
import common -;
import meta::common m;
import numeric::cast n;
import exception::common -;
import string::positional -;
import downcast -;

public union variant {
  unit unitval;
  long longval;
  ulong ulongval;
  double doubleval;
  string stringval;
  ptr{idynamic} ptrval;
}

public interface idynamic {
  function variant invoke(cstrref const& name, cslice{variant} const& args);
}

public function {t} variant to_variant(t const& x)
{
  variant r;
  if (m::eq{t, unit}) {
    r.unitval = unit();
  } else if (n::is_signed_integral{t}) {
    r.longval = n::static_cast{long, t}(x);
  } else if (n::is_unsigned_integral{t}) {
    r.ulongval = n::static_cast{ulong, t}(x);
  } else if (n::is_fp{t}) {
    r.doubleval = x;
  } else if (is_string_family_type{t}) {
    r.stringval = x;
  } else if (m::eq{t, variant}) {
    r = x;
  } else if (m::eq{t, ptr{idynamic}}) {
    r.ptrval = x;
  } else {
    metafunction ts to_non_ephemeral{t};
    r.ptrval = ptr{stub_object{ts}}(stub_object{ts}(x));
  }
  return r;
}

public function {t} t from_variant(variant const& x)
{
  if (m::eq{t, unit}) {
    return unit();
  } else if (n::is_integral_enum_bitmask{t}) {
    if (case x.longval) {
      return n::static_cast{t, long}(x.longval);
    } else if (case x.ulongval) {
      return n::static_cast{t, ulong}(x.ulongval);
    } else if (case x.doubleval) {
      return n::static_cast{t, double}(x.doubleval);
    } else if (case x.stringval) {
      return decimal_to_integral_nocheck{t}(x.stringval);
    } else if (case x.unitval) {
      return 0;
    }
  } else if (n::is_fp{t}) {
    if (case x.doubleval) {
      return n::static_cast{t, double}(x.doubleval);
    } else if (case x.longval) {
      return n::static_cast{t, long}(x.longval);
    } else if (case x.ulongval) {
      return n::static_cast{t, ulong}(x.ulongval);
    } else if (case x.stringval) {
      return decimal_to_fp_nocheck{t}(x.stringval);
    } else if (case x.unitval) {
      return 0.0;
    }
  } else if (m::eq{t, string}) {
    if (case x.stringval) {
      return x.stringval;
    } else if (case x.longval) {
      return to_string(x.longval);
    } else if (case x.ulongval) {
      return to_string(x.ulongval);
    } else if (case x.doubleval) {
      return to_string(x.doubleval);
    } else if (case x.unitval) {
      return to_string(x.unitval);
    }
  } else if (m::eq{t, variant}) {
    return x;
  } else if (m::eq{t, ptr{idynamic}}) {
    return x.ptrval;
  } else {
    return downcast_mutable{stub_object{t}, idynamic}(*(x.ptrval)).value;
  }
  throw invalid_field();
}

/* wraps an object of type t */
public struct {t}
stub_object(expand(stub_object_args{t})) < idynamic >
  /* if t is noncopyable, stub_object{t} requires same constr args as t.
   * if copyable, stub_object{t} requires t as constr arg. */
{
  expand(dummy : m::list{m::list{"dummy", m::is_copyable_type{t}}}) {
    /* noncopyable */
    t value = t(expand(a : m::argnames{t}; a));
    /* copyable */
    t value = x;
  }
  function variant invoke(cstrref const& name, cslice{variant} const& args) {
    expand(fsym, idx : member_functions_str{t}) {
      if (name == m::to_string{fsym}) {
	return variant_invoke_impl{t, idx, 0}(args, value);
      }
    }
    return variant(); // TODO: throw
  }
}

/* wraps a non-member function */
public struct {f} stub_function < idynamic >
{
  function variant invoke(cstrref const& name, cslice{variant} const& args) {
    if (!name.empty()) {
      return variant(); // TODO: throw
    }
    return variant_invoke_impl{0, 0, f}(args);
  }
} 

/* wraps a global variable */
public struct {varname, ns, mutable_flag} stub_variable < idynamic >
{
  function variant invoke(cstrref const& name, cslice{variant} const& args) {
    if (!name.empty()) {
      return variant(); // TODO: throw
    }
    if (args.empty()) {
      return to_variant{m::typeof{m::symbol{varname, ns}}}
	(m::symbol{varname, ns});
    } else {
      if (m::eq{mutable_flag, 1}) {
	m::symbol{varname, ns} =
	  from_variant{m::typeof{m::symbol{varname, ns}}}(args[0]);
	return variant();
      } else {
	return variant(); // TODO: throw
      }
    }
  }
}

private metafunction is_concrete{t}
  m::and{m::eq{m::num_tparams{t}, m::num_targs{t}}, m::not{m::eq{t, void}},
      m::not{m::attribute{t, "ephemeral"}}};
private metafunction filter_concrete{fs} m::filter{fs, is_concrete};
private metafunction is_constructible{t}
  m::not{m::and{
    m::or{m::eq{m::family{t}, "linear"}, m::eq{m::family{t}, "nodefault"}},
    m::eq{m::size{m::args{t}}, 0}}};
private metafunction filter_constructible{ts} m::filter{ts, is_constructible};

private function {ns} void
prepare_namespace_map(tree_map{string, variant}& elems)
{
  metafunction funcs filter_concrete{m::functions{ns}};
  expand (name, idx : funcs) {
    {
      metafunction f m::at{funcs, idx};
      variant x;
      x.ptrval = ptr{stub_function{f}}(stub_function{f}());
      elems[m::to_string{f}] = x;
      // println(m::concat{"func (", ns, "): ", m::to_string{f}});
    }
  }
  metafunction types filter_constructible{filter_concrete{m::types{ns}}};
  expand (name, idx : types) {
    {
      metafunction t m::at{types, idx};
      variant x;
      x.ptrval = ptr{stub_function{t}}(stub_function{t}());
      elems[m::to_string{t}] = x;
      // println(m::to_string{t});
    }
  }
  metafunction vars m::global_variables{ns};
  expand (name, idx : m::map{vars, m::at0}) {
    {
      variant x;
      x.ptrval = ptr{stub_variable{name, ns, m::at1{m::at{vars, idx}}}}(
	stub_variable{name, ns, m::at1{m::at{vars, idx}}}());
      elems[m::to_string{name}] = x;
      // println(m::to_string{name});
    }
  }
}

/* wraps a namespace */
public struct {ns} stub_namespace () < idynamic >
{
  tree_map{string, variant} elems;
  prepare_namespace_map{ns}(elems);
  function variant invoke(cstrref const& name, cslice{variant} const& args) {
    if (variant e : elems[name]) {
      return e.ptrval->invoke("", args);
    }
    return variant(); // TODO: throw
  }
}

public function {tlist} variant
variant_invoke(expand(m::map{m::seq{m::size{tlist}}, vi_arginfo, tlist}))
{
  farray{variant, m::sub{m::size{tlist}, 2}} args;
  expand(arg, idx : m::map{m::seq{2, m::size{tlist}}, idx_argname}) {
    args[idx] = to_variant{m::at{tlist, m::add{idx, 2}}}(arg);
  }
  return a0.ptrval->invoke(a1, args);
}

/* variant_invoke_impl{tobj, methodidx, 0}    --- member function */
/* variant_invoke_impl{0, 0, fsym}            --- non-member function */
private function {tobj, methodidx, fsym} variant variant_invoke_impl(
  cslice{variant} const& args,
  expand(m::cond{
    m::is_type{tobj},
    m::list{m::list{"obj", tobj, 1, 1}},
    m::list}))
{
  metafunction f m::cond{
    m::is_type{tobj},
    m::at{m::member_functions{tobj}, methodidx},
    fsym};
  expand(ae, idx : func_argexp_list{f}) {
    /* pattern #0: const value */
    func_argtype_noneph{f, idx} const& ae =
      downcast_const{
	stub_object{func_argtype_noneph{f, idx}}, idynamic
      }(*(args[idx].ptrval)).value;
    /* pattern #1: mutable value */
    func_argtype_noneph{f, idx} const& ae = /* need not to be mutable ref */
      downcast_const{
	stub_object{func_argtype_noneph{f, idx}}, idynamic
      }(*(args[idx].ptrval)).value;
    /* pattern #2: const reference */
    func_argtype_noneph{f, idx} const& ae =
      downcast_const{
	stub_object{func_argtype_noneph{f, idx}}, idynamic
      }(*(args[idx].ptrval)).value;
    /* pattern #3: mutable reference */
    func_argtype_noneph{f, idx} mutable& ae =
      downcast_mutable{
	stub_object{func_argtype_noneph{f, idx}}, idynamic
      }(*(args[idx].ptrval)).value;
    /* pattern #4: variant-valuetype, pass by const value */
    func_argtype_noneph{f, idx} ae =
      from_variant{func_argtype_noneph{f, idx}}(args[idx]);
    /* pattern #5: variant-valuetype, pass by mutable value */
    func_argtype_noneph{f, idx} ae =
      from_variant{func_argtype_noneph{f, idx}}(args[idx]);
    /* pattern #6: variant-valuetype, pass by const reference */
    func_argtype_noneph{f, idx} ae =
      from_variant{func_argtype_noneph{f, idx}}(args[idx]);
    /* pattern #7: variant-valuetype, pass by mutable reference */
    func_argtype_noneph{f, idx} ae =
      from_variant{func_argtype_noneph{f, idx}}(args[idx]);
  }
  if (m::is_type{tobj}) {
    expand (sym : m::list{m::list{m::to_string{f}, 0}}) {
      if (m::eq{m::rettype{f}, void}) {
	obj.sym(expand(a : func_argnames{f}; a));
	return variant();
      } else {
	return to_variant{m::rettype{f}}(
	  obj.sym(expand(a : func_argnames{f}; a)));
      }
    }
  } else {
    if (m::eq{m::rettype{f}, void}) {
      f(expand(a : func_argnames{f}; a));
      return variant();
    } else if (m::or{m::is_function{f}, m::is_copyable_type{f}}) {
      return to_variant{m::rettype{f}}(f(expand(a : func_argnames{f}; a)));
    } else {
      ptr{stub_object{f}} p = ptr{stub_object{f}}(
	stub_object{f}(expand(a : func_argnames{f}; a)));
      variant r;
      r.ptrval = p;
      return r;
    }
  }
}

private metafunction is_string_family_type{t}
  m::or{
    m::eq{t, string},
    m::eq{t, strlit},
    m::eq{t, strref},
    m::eq{t, cstrref}};
private metafunction is_range_type{t}
  m::or{
    m::eq{m::family{t}, "slice"},
    m::eq{m::family{t}, "cslice"},
    m::eq{m::family{t}, "tree_map_range"},
    m::eq{m::family{t}, "tree_map_crange"}};
private metafunction to_non_ephemeral{t}
  m::cond{is_string_family_type{t}, string,
  m::cond{is_range_type{t}, m::local{t, "non_ephemeral_type"},
  t}};

private metafunction stub_object_args{t}
  m::cond{
    m::is_copyable_type{t},
    m::list{m::list{"x", t, 0, 1}},
    m::args{t}};
private metafunction arg_with_index{idx, arginfo}
  m::joinv{m::list{idx}, arginfo};
private metafunction args_with_index{f}
  m::map{
    m::seq{m::size{m::args{f}}},
    m::args{f},
    arg_with_index};
private metafunction is_variant_valuetype{t}
  m::or{
    m::eq{t, unit},
    n::is_signed_integral{t},
    n::is_unsigned_integral{t},
    n::is_fp{t},
    is_string_family_type{t},
    m::eq{t, variant}};
private metafunction epnd_pattern_num{arg}
  m::add{
    m::mul{is_variant_valuetype{m::at2{arg}}, 4},
    m::mul{m::at3{arg}, 2},
    m::at4{arg}}; /* is_variant_valuetype * 4 + byref * 2 + mutable */
private metafunction argexp{arg}
  m::list{
    generate_argname{arg}, /* a0, a1, a2, ... */
    epnd_pattern_num{arg}}; /* pattern #? */
private metafunction idx_argname{i} m::concat{"a", i};
private metafunction generate_argname{arg} idx_argname{m::at{arg, 0}};
private metafunction member_functions_str{t}
  m::map{m::member_functions{t}, m::to_string};
private metafunction func_argnames{f}
  m::map{args_with_index{f}, generate_argname};
private metafunction func_argexp_list{f}
  m::map{args_with_index{f}, argexp};
private metafunction func_argtype_noneph{f, idx}
  to_non_ephemeral{m::at{m::at{args_with_index{f}, idx}, 2}};
private metafunction vi_arginfo{tlist, i}
  m::list{idx_argname{i}, m::at{tlist, i}, 1, 0};

