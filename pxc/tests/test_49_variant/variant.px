namespace variant;
import common -;
import meta::builtin m;
import numeric::cast n;
import exception::builtin -;
import serialization::positional -;
import downcast -;

public multithreaded union variant {
  unit unitval;
  long longval;
  ulong ulongval;
  double doubleval;
  string stringval;
  tptr{iinvoke} tptrval;
}

public multithreaded interface iinvoke {
  function variant invoke(cstrref const& name, cslice{variant} const& args);
}

private macro is_string_family_type{t}
  m::or{
    m::eq{t, string},
    m::eq{t, strlit},
    m::eq{t, strref},
    m::eq{t, cstrref}};

private macro is_range_type{t}
  m::or{
    m::eq{m::family{t}, "slice"},
    m::eq{m::family{t}, "cslice"},
    m::eq{m::family{t}, "tree_map_range"},
    m::eq{m::family{t}, "tree_map_crange"}};

private macro to_non_ephemeral{t}
  m::metaif{is_string_family_type{t}, string,
  m::metaif{is_range_type{t}, m::local{t, "non_ephemeral_type"},
  t}};

public threaded function {t} variant to_variant(t const& x)
{
  variant r;
  if (m::eq{t, unit}) {
    r.unitval = unit();
  } else if (n::is_signed_integral{t}) {
    r.longval = n::static_cast{long, t}(x);
  } else if (n::is_unsigned_integral{t}) {
    r.ulongval = n::static_cast{ulong, t}(x);
  } else if (n::is_fp{t}) {
    r.doubleval = x;
  } else if (is_string_family_type{t}) {
    r.stringval = x;
  } else if (m::eq{t, variant}) {
    r = x;
  } else if (m::eq{t, tptr{iinvoke}}) {
    r.tptrval = x;
  } else {
    r.tptrval = tptr{stub_iinvoke{t}}(stub_iinvoke{t}(x));
  }
  return r;
}

public threaded function {t} t from_variant(variant const& x)
{
  if (m::eq{t, unit}) {
    return unit();
  } else if (n::is_integral_enum_bitmask{t}) {
    if (case x.longval) {
      return n::static_cast{t, long}(x.longval);
    } else if (case x.ulongval) {
      return n::static_cast{t, ulong}(x.ulongval);
    } else if (case x.doubleval) {
      return n::static_cast{t, double}(x.doubleval);
    } else if (case x.stringval) {
      return decimal_to_integral_nocheck{t}(x.stringval);
    } else if (case x.unitval) {
      return 0;
    }
  } else if (n::is_fp{t}) {
    if (case x.doubleval) {
      return n::static_cast{t, double}(x.doubleval);
    } else if (case x.longval) {
      return n::static_cast{t, long}(x.longval);
    } else if (case x.ulongval) {
      return n::static_cast{t, ulong}(x.ulongval);
    } else if (case x.stringval) {
      return decimal_to_fp_nocheck{t}(x.stringval);
    } else if (case x.unitval) {
      return 0.0;
    }
  } else if (m::eq{t, string}) {
    if (case x.stringval) {
      return x.stringval;
    } else if (case x.longval) {
      return to_string(x.longval);
    } else if (case x.ulongval) {
      return to_string(x.ulongval);
    } else if (case x.doubleval) {
      return to_string(x.doubleval);
    } else if (case x.unitval) {
      return to_string(x.unitval);
    }
  } else if (m::eq{t, variant}) {
    return x;
  } else if (m::eq{t, tptr{iinvoke}}) {
    return x.tptrval;
  } else {
    return downcast_mutable{stub_iinvoke{t}, iinvoke}(*(x.tptrval)).value;
  }
  throw invalid_field();
}

private macro stub_iinvoke_args{t}
  m::metaif{
    m::is_copyable_type{t},
    m::list{m::list{0, "x", t, 0, 1}},
    m::args{t}};

public multithreaded struct {t}
stub_iinvoke(expand(a : stub_iinvoke_args{t})) : iinvoke :
{
  expand(dummy : m::list{m::list{"dummy", m::is_copyable_type{t}}}) {
    t value = t(expand(a : m::argnames{t}; a));
    t value = x;
  }
  macro mfuncstr{t} m::metamap{m::member_functions{t}, m::to_string};
  macro seqstr{n} m::metamap{m::seq{n}, m::to_string};
  macro argname{arg} m::concat{"a", m::at{arg, 0}};
  macro argnames{fsym}
    m::metamap{m::args{m::local{t, m::to_string{fsym}}}, argname};
  macro argexp{arg}
    m::list{
      argname{arg}, // a0, a1, a2, ...
      m::add{m::mul{m::at{arg, 3}, 2}, m::at{arg, 4}}}; // byref * 2 + mutable
  macro argexp_list{fsym}
    m::metamap{m::args{m::local{t, m::to_string{fsym}}}, argexp};
  macro args_ae{fsym, ae}
    m::at{m::args{m::local{t, fsym}}, m::to_int{m::substring{ae, 1}}};
  macro argtype_ae{fsym, ae} m::at{args_ae{fsym, ae}, 2};
  macro argtype_noneph{fsym, ae} to_non_ephemeral{argtype_ae{fsym, ae}};
  function variant invoke(cstrref const& name, cslice{variant} const& args) {
    expand(fsym : mfuncstr{t}) {
      if (m::to_string{fsym} == name) {
	expand(ae : argexp_list{fsym}) {
	  /* const value */
	  argtype_noneph{fsym, ae} ae = from_variant{argtype_noneph{fsym, ae}}(
	    args[m::to_int{m::substring{ae, 1}}]);
	  /* mutable value */
	  argtype_noneph{fsym, ae} ae = from_variant{argtype_noneph{fsym, ae}}(
	    args[m::to_int{m::substring{ae, 1}}]);
	  /* const reference */
	  argtype_noneph{fsym, ae} const& ae =
	    downcast_const{stub_iinvoke{argtype_noneph{fsym, ae}}, iinvoke}(
	      *(args[m::to_int{m::substring{ae, 1}}].tptrval)).value;
	  /* mutable reference */
	  argtype_noneph{fsym, ae} mutable& ae =
	    downcast_mutable{stub_iinvoke{argtype_noneph{fsym, ae}}, iinvoke}(
	      *(args[m::to_int{m::substring{ae, 1}}].tptrval)).value;
	}
	if (m::eq{m::rettype{m::local{t, m::to_string{fsym}}}, void}) {
	  value.fsym(expand(a : argnames{fsym}; a));
	  return variant();
	} else {
	  return to_variant{m::rettype{m::local{t, m::to_string{fsym}}}}(
	    value.fsym(expand(a : argnames{fsym}; a)));
	}
      }
    }
    return variant();
  }
}

