public namespace direct1;
import common -;
import orb -;

public threaded interface ifoo <remote> {
  public function int hoge(int x, int y) const;
  public function string fuga(cstrref const& x, cstrref const& y) const;
}

public threaded struct foo <ifoo> {
  int intval;
  string strval;
  public function int hoge(int x, int y) const {
    return intval + x + y;
  }
  public function string fuga(cstrref const& x, cstrref const& y) const {
    string s = strval;
    s.append(x);
    s.append(y);
    return s;
  }
}

private threaded struct transport_empty <orb_transport> {
  function void send_receive(string mutable& rbuf, string mutable& wbuf) { }
}

private threaded struct transport_direct(ptr{orb} const& p) <orb_transport> {
  ptr{orb} svr = p;
  function void send_receive(string mutable& rbuf, string mutable& wbuf) {
    svr->rbuf = wbuf;
    wbuf.clear();
    execute_request(svr);
    rbuf = svr->wbuf;
    svr->wbuf.clear();
  }
}

private function ptr{ifoo} create_wrapped()
{
  ptr{orb} svr = make_ptr{orb}(make_ptr{transport_empty}());
  ptr{transport_direct} dt = make_ptr(transport_direct(svr));
  ptr{orb} cli = make_ptr(orb(dt));
  /* create foo object */
  ptr{ifoo} obj = make_ptr(foo());
  push_return_value(svr, obj);
  // println(svr->wbuf);
  /* send to client */
  cli->rbuf = svr->wbuf;
  svr->wbuf.clear();
  ptr{ifoo} st = pop_return_value{ptr{ifoo}}(cli);
  return st;
}

private function void t1()
{
  ptr{ifoo} st = create_wrapped();
  int z = st->hoge(5, 33);
  string s = st->fuga("abc", "xyz");
  println("z");
  println(z);
  println("s");
  println(s);
}

t1();

