namespace direct2;
import common -;
import orb -;

public threaded interface ifoo <remote> {
  function int hoge(int x, int y) const;
  function string fuga(cstrref const& x, cstrref const& y) const;
  function ptr{ibar} create_bar(int x) const;
}

public threaded interface ibar <remote> {
  function int m1(int y);
}

public threaded struct bar(int x0) <ibar> {
  int x = x0;
  function int m1(int y) {
    return x * y;
  }
}

public threaded struct foo <ifoo> {
  int intval;
  string strval;
  function int hoge(int x, int y) const {
    return intval + x + y;
  }
  function string fuga(cstrref const& x, cstrref const& y) const {
    string s = strval;
    s.append(x);
    s.append(y);
    return s;
  }
  function ptr{ibar} create_bar(int x) const {
    ptr{bar} p = ptr{bar}(bar(x));
    return p;
  }
}

private threaded struct transport_empty <orb_transport> {
  function void send_receive(string mutable& rbuf, string mutable& wbuf) {
    wbuf.clear();
    rbuf = "T\tempty_transport\n";
  }
}

private threaded struct transport_direct(ptr{orb} const& p) <orb_transport> {
  ptr{orb} svr = p;
  function void send_receive(string mutable& rbuf, string mutable& wbuf) {
    svr->rbuf = wbuf;
    wbuf.clear();
    execute_request(svr);
    rbuf = svr->wbuf;
    svr->wbuf.clear();
  }
}

private function ptr{ifoo} create_wrapped()
{
  ptr{orb} svr = box{orb}(box{transport_empty}());
  ptr{transport_direct} dt = ptr(transport_direct(svr));
  ptr{orb} cli = ptr(orb(dt));
  /* create foo object */
  ptr{ifoo} obj = ptr(foo());
  push_return_value(svr, obj);
  /* send to client */
  cli->rbuf = svr->wbuf;
  svr->wbuf.clear();
  ptr{ifoo} st = pop_return_value{ptr{ifoo}}(cli);
  return st;
}

private function void t1()
{
  ptr{ifoo} st = create_wrapped();
  int z = st->hoge(5, 33);
  string s = st->fuga("abc", "xyz");
  ptr{ibar} bp = st->create_bar(55);
  int w = bp->m1(100);
  println("z");
  println(z);
  println("s");
  println(s);
  println("w");
  println(w);
}

t1();

