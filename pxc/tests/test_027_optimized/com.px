public namespace com;
import common -;

function bool less_int_simple(int x, int y)
{
  return x < y;
}

// expected to generate the same object code as less_int_simple
// when c++ optimization is enabled
function bool less_int_generic(int x, int y)
{
  return generic::ordered::compare_strict_weak{int}(x, y) < 0;
}

// 0000000000000000 <com$n::less_int_simple$f(int, int)>:
//    0:   39 f7                   cmp    %esi,%edi
//    2:   0f 9c c0                setl   %al
//    5:   c3                      retq   
//    6:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
//    d:   00 00 00 

// 0000000000000010 <com$n::less_int_generic$f(int, int)>:
//   10:   39 f7                   cmp    %esi,%edi
//   12:   0f 9c c0                setl   %al
//   15:   c3                      retq   
//   16:   66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)
//   1d:   00 00 00 

// 00000000 <$n::less_int_simple$f(int, int)>:
//    0:   55                      push   %ebp
//    1:   89 e5                   mov    %esp,%ebp
//    3:   8b 45 0c                mov    0xc(%ebp),%eax
//    6:   39 45 08                cmp    %eax,0x8(%ebp)
//    9:   5d                      pop    %ebp
//    a:   0f 9c c0                setl   %al
//    d:   c3                      ret
//    e:   66 90                   xchg   %ax,%ax

// 00000010 <$n::less_int_generic$f(int, int)>:
//   10:   55                      push   %ebp
//   11:   89 e5                   mov    %esp,%ebp
//   13:   8b 45 0c                mov    0xc(%ebp),%eax
//   16:   39 45 08                cmp    %eax,0x8(%ebp)
//   19:   5d                      pop    %ebp
//   1a:   0f 9c c0                setl   %al
//   1d:   c3                      ret
//   1e:   66 90                   xchg   %ax,%ax

println(less_int_generic(1, 2));
