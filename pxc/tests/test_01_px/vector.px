
private import io;

namespace vector;

extern "vector::push_back" function {t} void push_back(vector{t} vec, t val);
extern "vector::pop_back" function {t} t pop_back(vector{t} vec);

extern "fdecl" inline
namespace vector {
template <typename T> void
push_back(T& v, const typename T::value_type& x)
{
  v.push_back(x);
}
template <typename T> typename T::value_type
pop_back(T& v)
{
  typedef typename T::value_type vt;
  if (v.empty()) {
    vt rv = vt();
    return rv;
  } else {
    vt rv = v.back();
    v.pop_back();
    return rv;
  }
}
}; // namespace vector

