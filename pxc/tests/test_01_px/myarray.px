
namespace myarray;
import test_common "";

extern "myarray::length" function {t} ulong length(vector{t} const& a);
extern "myarray::empty" function {t} bool empty(vector{t} const& a);
extern "myarray::resize" function {t} void
  resize(vector{t}& a, ulong len, t v);
extern "myarray::clear" function {t} void clear(vector{t}& a);
extern "myarray::push" function {t} void push(vector{t}& a, t v);
extern "myarray::pop" function {t} t pop(vector{t}& a);

extern "fdecl" inline
namespace myarray {
template <typename T> unsigned long long length(const array::vector<T>& a)
  { return a.size(); };
template <typename T> bool empty(const array::vector<T>& a)
  { return a.empty(); };
template <typename T> void resize(array::vector<T>& a,
  unsigned long long len, T v)
  { a.resize(len, v); }
template <typename T> void clear(array::vector<T>& a)
  { a.clear(); }
template <typename T> void push(array::vector<T>& a, T v)
  { a.push_back(v); }
template <typename T> T pop(const array::vector<T>& a)
  { T r = a.at(a.size() - 1); a.pop_back(); return r; }
};

