
private import io;
private import container "";

namespace array;

// extern "array::push_back" function void push_back(vector{0} vec, 0 val);
// extern "array::pop_back" function 0 pop_back(vector{0} vec);
extern "array::push_back" function {t} void push_back(vector{t} vec, t val);
extern "array::pop_back" function {t} t pop_back(vector{t} vec);

extern "fdef" inline
namespace array {
template <typename T> void
push_back(container::vector<T>& v, const T& x)
{
  v.push_back(x);
}
template <typename T> T
pop_back(container::vector<T>& v)
{
  if (v.empty()) {
    T rv = T();
    return rv;
  } else {
    T rv = v[v.size() - 1];
    v.pop_back();
    return rv;
  }
}
}; // namespace array

function void t1()
{
  vector{int} v;
  push_back(v, 3);
  push_back(v, 5);
  push_back(v, 30);
  int x = pop_back(v);
  io::println(x);
  io::println(pop_back(v));
  io::println(pop_back(v));
  io::println(pop_back(v));
  io::println(pop_back(v));
}

t1();

