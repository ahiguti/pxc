
namespace array;
import test_common "";

extern "array::length" function {t} ulong length(vector{t} const& a);
extern "array::empty" function {t} bool empty(vector{t} const& a);
extern "array::resize" function {t} void resize(vector{t}& a, ulong len, t v);
extern "array::clear" function {t} void clear(vector{t}& a);
extern "array::push" function {t} void push(vector{t}& a, t v);
extern "array::pop" function {t} t pop(vector{t}& a);

extern "fdecl" inline
namespace array {
template <typename T> unsigned long long length(const container::vector<T>& a)
{ return a.size(); };
template <typename T> bool empty(const container::vector<T>& a)
{ return a.empty(); };
template <typename T> void resize(container::vector<T>& a,
  unsigned long long len, T v)
{ a.resize(len, v); }
template <typename T> void clear(container::vector<T>& a)
{ a.clear(); }
template <typename T> void push(container::vector<T>& a, T v)
{ a.push_back(v); }
template <typename T> T pop(const container::vector<T>& a)
{ T r = a.at(a.size() - 1); a.pop_back(); return r; }
};

