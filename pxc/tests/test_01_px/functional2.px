
namespace functional2;
import common "";
import meta::builtin m;
import numeric::cast "";

function {tdst, f} void array_construct(tdst& dst, size_t sz)
{
  dst.resize(sz, m::rettype{f}());
  size_t i;
  for (i = 0; i < sz; ++i) {
    dst[i] = f(numeric_cast{m::argtype{f, 0}, size_t}(i));
  }
}

function {tsrc, tdst, f} void array_apply(tsrc src, tdst& dst)
{
  size_t sz = src.size();
  dst.resize(sz, m::rettype{f}());
  size_t i;
  for (i = 0; i < sz; ++i) {
    dst[i] = f(src[i]);
  }
}

function {tsrc, tv, f} tv array_foldl(tsrc src, tv v)
{
  size_t sz = src.size();
  tv r = v;
  size_t i;
  for (i = 0; i < sz; ++i) {
    r = f(r, src[i]);
  }
  return r;
}

function {tsrc, tv, f} tv array_foldr(tsrc src, tv v)
{
  size_t sz = src.size();
  tv r = v;
  size_t i;
  for (i = sz; i > 0; --i) {
    r = f(src[i - 1], r);
  }
  return r;
}

function {t} void test1()
{
  macro arrtype vector{t};
  arrtype x;
  array_construct{arrtype,
    function t(t v) { return v; }
  }(x, 11);
  arrtype y;
  array_apply{arrtype, arrtype,
    function t(t v) { return v * v; }
  }(x, y);
  t r1 = array_foldl{arrtype, t,
    function t(t x, t y) { return x + y; }
  }(y, 0);
  t r2 = array_foldr{arrtype, t,
    function t(t x, t y) { return x + y; }
  }(y, 0);
  println(r1);
  println(r2);
}
test1{int}();

