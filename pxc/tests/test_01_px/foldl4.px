
namespace foldl4;
import test_common "";

function {zt, ct, op, get, it} zt foldl(zt z, ct c, it begin, it end) {
  zt v = z;
  it i;
  for (i = begin; i != end; ++i) {
    v = op(v, get(c, i));
  }
  return v;
}

function {t} t op_plus(t x, t y) {
  return x + y;
}

function {at, it, et} et op_get_elem(at a, it i) {
  return a[i];
}

vector{int} a;
a.resize(100, 0);
uint i;
for (i = 0; i < a.size(); ++i) {
  a[i] = i + 1;
}

macro foldl_vec foldl{
  int,
  vector{int},
  op_plus{int},
  op_get_elem{vector{int}, uint, int},
  uint
};
int z = foldl_vec(0, a, 0, 100);
io::println(z);

