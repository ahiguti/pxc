public namespace timing1_affinity;
import common -;
import meta -;
import io -;
import io::file -;
import io::errno -;
import io::standard -;
import io::addrinfo -;
import io::socket -;
import io::signal -;
import io::time -;
import io::scheduler;
import orb -;
import transport_file -;

public threaded interface ibinop <remote> {
  public function int op(int x, int y);
}

public threaded struct binop_add <ibinop> {
  public function int op(int x, int y) {
    return x + y;
  }
}

private function void client_test_main(file_mt const& f)
{
  {
    io::scheduler::cpu_set_t cs;
    cs.set(3);
    io::scheduler::sched_setaffinity(io::system, 0, cs);
  }
  const op = make_ptr(orb_handle{ibinop}(make_ptr{transport_file}(f)));
  const st = op->create_stub();
  double const t0 = io::system.gettimeofday_double();
  int z = 0;
  for (int i : 0 .. 1000) {
    for (int j : 0 .. 1000) {
      z += st->op(i, j);
    }
  }
  double const t1 = io::system.gettimeofday_double();
  println(z);
  debug_log("time", t1 - t0);
}

private threaded function void
server_thread(io const& sys, file_mt const& sock)
{
  {
    {
      io::scheduler::cpu_set_t cs;
      cs.set(0);
      io::scheduler::sched_setaffinity(sys, 0, cs);
    }
    const op = make_ptr{orb_handle{ibinop}}(make_ptr{transport_file}(sock));
    const obj = make_ptr(binop_add());
    op->start_server(obj);
  }
}

private function void main()
{
  io::system.signal(SIGPIPE, SIG_IGN);
  mutable sp = io::system.socketpair(AF_UNIX, SOCK_STREAM, PROTO_UNSPEC);
  const sthr = make_thread_ptr{server_thread}(io::system, sp.value.first);
  client_test_main(sp.value.second);
  sp.errno = errno_t(); /* closes fds */
}

main();

