public namespace sock4;
import core::common -;
import core::meta -;
import core::io -;
import core::io::file -;
import core::io::errno -;
import core::io::standard -;
import core::io::addrinfo -;
import core::io::socket -;
import core::io::signal -;
import orb -;
import transport_file -;

public pure interface ifoo <remote> {
  public function int fold(cslice{int} const& x, int v0, ptr{ibinop} const& o);
}

public pure struct foo <ifoo> {
  public function int fold(cslice{int} const& x, int v0, ptr{ibinop} const& o) {
    mutable r = v0;
    for (size_t i, int v : x) {
      r = o->op(r, v);
    }
    return r;
  }
}

public pure interface ibinop <remote> {
  public function int op(int x, int y);
}

public pure struct binop_add <ibinop> {
  public function int op(int x, int y) {
    return x + y;
  }
}

private function void client_test_main(file_mt const& f)
{
  const op = make_ptr{orb_handle{ifoo}}(make_ptr{transport_file}(f));
  const st = op->create_stub();
  farray{int, 10} arr;
  for (int i : 0 .. 10) { arr[static_cast{size_t}(i)] = i + 1; }
  const o = make_ptr(binop_add());
  const z = st->fold(arr, 0, o); /* o is called back from the server */
  println(z);
}

private pure function void
server_thread(io const& sys, file_mt const& sock)
{
  const op = make_ptr{orb_handle{ifoo}}(make_ptr{transport_file}(sock));
  const obj = make_ptr(foo());
  op->start_server(obj);
}

private function void main()
{
  thread_io().signal(SIGPIPE, SIG_IGN);
  mutable sp = thread_io().socketpair(AF_UNIX, SOCK_STREAM,
    PROTO_UNSPEC);
  const sthr = make_thread_ptr{server_thread}(thread_io(),
    sp.value.first);
  client_test_main(sp.value.second);
  sp.errno = errno_t(); /* closes fds */
}

main();

