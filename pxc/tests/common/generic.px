
namespace generic;
public import meta "";

public threaded function {t} string to_string(t x)
{
  macro symstr concat{t, "_to_string"};
  macro sym symbol{t, symstr};
  macro cat category{t};
  if (eq{meta::to_string{t}, "string"}) {
    return x;
  } else if (eq{meta::to_string{sym}, symstr}) {
    return sym(x);
  } else if (or{eq{cat, "varray"}, eq{cat, "farray"}}) {
    string s = "{";
    foreach (size_t i, at{t, 0} v : x) {
      if (i != 0) {
	s.append(",");
      }
      s.append(to_string(v));
    }
    s.append("}");
    return s;
  } else if (eq{cat, "map"}) {
    string s = "{";
    bool first = true;
    foreach (at{t, 0} k, at{t, 1} v : x) {
      if (first) {
	first = false;
      } else {
	s.append(",");
      }
      s.append(to_string(k));
      s.append(":");
      s.append(to_string(v));
      s.append(")");
    }
    s.append("}");
    return s;
  } else if (or{eq{cat, "ref"}, eq{cat, "cref"}, eq{cat, "tref"},
    eq{cat, "tcref"}}) {
    string s = "{";
    s.append(to_string(*x));
    s = "}";
    return s;
  } else if (eq{cat, "struct"}) {
    string s = "{";
    bool first = true;
    foreach (name, fld : t) {
      if (first) {
	first = false;
      } else {
	s.append(",");
      }
      s.append(name);
      s.append(":");
      s.append(to_string(x.fld));
    }
    s.append("}");
    return s;
  } else if (eq{cat, "union"}) {
    string s = "{";
    foreach (name, fld : t) {
      if (case x.fld) {
	s.append(name);
	s.append(":");
	s.append(to_string(x.fld));
      }
    }
    s.append("}");
    return s;
  } else {
    return "-";
  }
  // int r;
}

