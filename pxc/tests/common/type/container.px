
namespace type::container;
public import type::builtin "";
public import generic;

public mtvaluetype extern "container::vector" "varray"
struct {t} vector {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type slice{t};
  public macro crange_type cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
  public extern "resize" function void resize(size_t i, t const& v);
  public extern "clear" function void clear();
  public extern "push_back" function void push_back(t const& v);
  public extern "pop_back" function t pop_back();
  public extern "reserve" function void reserve(size_t i);
}

public tsvaluetype extern "container::farray" "farray"
struct {t, n} farray {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type slice{t};
  public macro crange_type cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
}

public tsvaluetype extern "container::slice" "slice"
struct {t} slice {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type slice{t};
  public macro crange_type cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
  public extern "next" function void next();
}

public tsvaluetype extern "container::cslice" "cslice"
struct {t} cslice {
  public macro key_type size_t;
  public macro mapped_type t;
  public macro range_type cslice{t};
  public macro crange_type cslice{t};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
  public extern "next" function void next();
}

public macro tree_map{t, s}
  tree_map_compare{t, s, compare_function_object{t}};
public macro tree_map_range{t, s}
  tree_map_compare_range{t, s, compare_function_object{t}};
public macro tree_map_crange{t, s}
  tree_map_compare_crange{t, s, compare_function_object{t}};

private tsvaluetype struct {t} compare_function_object {
  public function int call(t const& x, t const& y) const
    { return generic::compare(x, y); }
}

private mtvaluetype extern "container::tree_map_compare" "tree_map"
struct {t, s, f} tree_map_compare {
  public macro key_type t;
  public macro mapped_type s;
  public macro range_type tree_map_range{t, s};
  public macro crange_type tree_map_crange{t, s};
  public extern "empty" function bool empty() const;
  public extern "size" function size_t size() const;
  public extern "clear" function void clear();
  public extern "equal_crange"
    function crange_type equal_crange(t const& k) const;
  public extern "equal_range"
    function range_type equal_range(t const& k);
}

private mtvaluetype extern "container::tree_map_range" "tree_map_range"
struct {t, s, f} tree_map_compare_range {
  public macro key_type t;
  public macro mapped_type s;
  public macro range_type tree_map_compare_range{t, s, f};
  public macro crange_type tree_map_compare_crange{t, s, f};
  public extern "empty" function bool empty() const;
  public extern "next" function void next();
}

private mtvaluetype extern "container::tree_map_crange" "tree_map_crange"
struct {t, s, f} tree_map_compare_crange {
  public macro key_type t;
  public macro mapped_type s;
  public macro range_type tree_map_compare_crange{t, s, f};
  public macro crange_type tree_map_compare_crange{t, s, f};
  public extern "empty" function bool empty() const;
  public extern "next" function void next();
}

extern "type" inline
#include <vector>
#include <map>
#include <stdint.h>
#include <stdio.h>
namespace container {
template <typename T> struct slice;
template <typename T> struct cslice;
template <typename T>
struct vector {
  template <typename Tc> friend struct pxcrt::refvar_igrd_nn;
  template <typename Tc> friend struct pxcrt::refvar_igrd;
  template <typename Tc> friend struct pxcrt::valvar_igrd_nn;
  template <typename Tc> friend struct pxcrt::valvar_igrd;
  typedef typename std::vector<T>::size_type size_type;
  typedef typename std::vector<T>::iterator iterator;
  typedef typename std::vector<T>::const_iterator const_iterator;
  typedef slice<T> range_type;
  typedef cslice<T> crange_type;
  vector() : invalidate_guard_count(0) { }
  vector(size_t len) : v(len), invalidate_guard_count(0) { }
  vector(const vector& x) : v(x.v), invalidate_guard_count(0) { }
  vector& operator =(const vector& x) {
    check_resize();
    v = x.v;
    return *this;
  }
  bool empty() const { return v.empty(); }
  size_type size() const { return v.size(); }
  T& operator [](size_type idx) {
    if (idx >= v.size()) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  const T& operator [](size_type idx) const {
    if (idx >= v.size()) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  void resize(size_type sz, T const& x) {
    check_resize();
    v.resize(sz, x);
  }
  void clear() {
    check_resize();
    v.clear();
  }
  void push_back(T const& x) {
    check_resize();
    v.push_back(x);
  }
  T pop_back() {
    check_resize();
    if (v.empty()) { pxcrt::throw_invalid_index(); }
    const T r = v.back();
    v.pop_back();
    return r;
  }
  void reserve(size_type sz) {
    check_resize();
    v.reserve(sz);
  }
  iterator begin() { return v.begin(); }
  const_iterator begin() const { return v.begin(); }
  iterator end() { return v.end(); }
  const_iterator end() const { return v.end(); }
  T *rawarr() { return &v[0]; }
  const T *rawarr() const { return &v[0]; }
private:
  void check_resize() {
    if (invalidate_guard_count != 0) { pxcrt::throw_would_invalidate(); }
  }
  void inc_invalidate_guard() const {
    ++invalidate_guard_count;
  }
  void dec_invalidate_guard() const {
    --invalidate_guard_count;
  }
private:
  std::vector<T> v;
  mutable size_t invalidate_guard_count;
};
template <typename T, size_t len>
struct farray {
  typedef size_t size_type;
  farray() : v() { }
  bool empty() const { return len == 0; }
  size_t size() const { return len; }
  T& operator [](size_type idx) {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  const T& operator [](size_type idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  T *rawarr() { return v; }
  const T *rawarr() const { return v; }
private:
  T v[len];
};
template <typename T>
struct slice {
  template <typename Tc> friend struct pxcrt::refvar_igrd_nn;
  template <typename Tc> friend struct pxcrt::refvar_igrd;
  template <typename Tc> friend struct pxcrt::valvar_igrd_nn;
  template <typename Tc> friend struct pxcrt::valvar_igrd;
  typedef size_t size_type;
  slice() : v(0), len(0) { }
  explicit slice(vector<T>& x) : v(x.rawarr()), len(x.size()) { }
  template <typename Tc> slice(Tc& c, size_t o1, size_t o2) {
    if (o2 > c.size()) { o2 = c.size(); }
    if (o1 > o2) { o1 = o2; }
    v = c.rawarr() + o1;
    len = o2 - o1;
  }
  size_type size() const { return len; }
  void next() {
    if (len == 0) { pxcrt::throw_invalid_index(); }
    ++v;
    --len;
  }
  T& operator [](size_type idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  T& operator *() const {
    if (len == 0) { pxcrt::throw_invalid_index(); }
    return *v;
  }
  T *rawarr() const { return v; }
private:
  T *v;
  size_t len;
};
template <typename T>
struct cslice {
  template <typename Tc> friend struct pxcrt::refvar_igrd_nn;
  template <typename Tc> friend struct pxcrt::refvar_igrd;
  template <typename Tc> friend struct pxcrt::valvar_igrd_nn;
  template <typename Tc> friend struct pxcrt::valvar_igrd;
  typedef size_t size_type;
  cslice() : v(0), len(0) { }
  cslice(const slice<T>& x) : v(x.rawarr()), len(x.size()){ }
  explicit cslice(const vector<T>& x) : v(x.rawarr()), len(x.size()) { }
  template <typename Tc> cslice(const Tc& c, size_t o1, size_t o2) {
    if (o2 > c.size()) { o2 = c.size(); }
    if (o1 > o2) { o1 = o2; }
    v = c.rawarr() + o1;
    len = o2 - o1;
  }
  size_type size() const { return len; }
  const T& operator [](size_type idx) const {
    if (idx >= len) { pxcrt::throw_invalid_index(); }
    return v[idx];
  }
  const T& operator *() const {
    if (len == 0) { pxcrt::throw_invalid_index(); }
    return *v;
  }
  const T *rawarr() const { return v; }
private:
  const T *v;
  size_t len;
};
template <typename Tf>
struct compare_less {
  Tf f;
  template <typename Tk>
  inline bool operator () (const Tk& x, const Tk& y) const {
    return f.call$f(x, y) < 0;
  }
};
template <typename Tk, typename Tm, typename Tf> struct tree_map_range;
template <typename Tk, typename Tm, typename Tf> struct tree_map_crange;
template <typename Tk, typename Tm, typename Tf>
struct tree_map_compare {
  template <typename Tc> friend struct pxcrt::refvar_igrd_nn;
  template <typename Tc> friend struct pxcrt::refvar_igrd;
  template <typename Tc> friend struct pxcrt::valvar_igrd_nn;
  template <typename Tc> friend struct pxcrt::valvar_igrd;
  typedef std::map< Tk, Tm, compare_less<Tf> > map_type;
  typedef typename map_type::size_type size_type;
  typedef typename map_type::iterator iterator;
  typedef typename map_type::const_iterator const_iterator;
  typedef tree_map_range<Tk, Tm, Tf > range_type;
  typedef tree_map_crange<Tk, Tm, Tf > crange_type;
  tree_map_compare() : invalidate_guard_count(0) { }
  tree_map_compare(const tree_map_compare& x)
    : v(x.v), invalidate_guard_count(0) { }
  tree_map_compare& operator =(const tree_map_compare& x) {
    check_resize();
    v = x.v;
    return *this;
  }
  Tm& operator [](const Tk& k) { return v[k]; }
  iterator find(const Tk& k) { return v.find(k); }
  const_iterator find(const Tk& k) const { return v.find(k); }
  crange_type equal_range(const Tk& k) const {
    const std::pair<const_iterator, const_iterator> r = v.equal_range(k);
    return crange_type(r.first, r.second);
  }
  range_type equal_range(const Tk& k) {
    const std::pair<iterator, iterator> r = v.equal_range(k);
    return range_type(r.first, r.second);
  }
  size_type size() const { return v.size(); }
  void erase(const Tk& k) {
    check_resize();
    v.erase(k);
  }
  void clear() {
    check_resize();
    v.clear();
  }
  iterator begin() { return v.begin(); }
  const_iterator begin() const { return v.begin(); }
  iterator end() { return v.end(); }
  const_iterator end() const { return v.end(); }
private:
  void check_resize() {
    if (invalidate_guard_count != 0) { pxcrt::throw_would_invalidate(); }
  }
  void inc_invalidate_guard() const { ++invalidate_guard_count; }
  void dec_invalidate_guard() const { --invalidate_guard_count; }
private:
  map_type v;
  mutable size_t invalidate_guard_count;
};
template <typename Tk, typename Tm, typename Tf>
struct tree_map_range {
  typedef tree_map_compare<Tk, Tm, Tf> tree_map_type;
  typedef typename tree_map_type::iterator iterator;
  tree_map_range() : start(), finish() { }
  explicit tree_map_range(tree_map_type& c)
    : start(c.begin()), finish(c.end()) { }
  tree_map_range(const iterator& i0, const iterator& i1)
    : start(i0), finish(i1) { }
  template <typename Tc> tree_map_range(Tc& c, const Tk& k0,
    const Tk& k1) : start(c.find(k0)), finish(c.find(k1)) {
  }
  bool empty() const { return start == finish; }
  Tm& operator *() const {
    if (start == finish) { pxcrt::throw_invalid_index(); }
    return start->second;
  }
  void next() {
    if (start == finish) { pxcrt::throw_invalid_index(); }
    ++start;
  }
  iterator begin() const { return start; }
  iterator end() const { return finish; }
private:
  iterator start;
  iterator finish;
};
template <typename Tk, typename Tm, typename Tf>
struct tree_map_crange {
  typedef tree_map_compare<Tk, Tm, Tf> tree_map_type;
  typedef typename tree_map_type::const_iterator iterator;
  tree_map_crange() : start(), finish() { }
  explicit tree_map_crange(const tree_map_type& c)
    : start(c.begin()), finish(c.end()) { }
  tree_map_crange(const iterator& i0, const iterator& i1)
    : start(i0), finish(i1) { }
  tree_map_crange(const tree_map_range<Tk, Tm, Tf>& r)
    : start(r.begin()), finish(r.end()) { }
  template <typename Tc> tree_map_crange(const Tc& c, const Tk& k0,
    const Tk& k1) : start(c.find(k0)), finish(c.find(k1)) {
  }
  bool empty() const { return start == finish; }
  const Tm& operator *() const {
    if (start == finish) { pxcrt::throw_invalid_index(); }
    return start->second;
  }
  void next() {
    if (start == finish) { pxcrt::throw_invalid_index(); }
    ++start;
  }
  iterator begin() const { return start; }
  iterator end() const { return finish; }
private:
  iterator start;
  iterator finish;
};
}; // namespace container

