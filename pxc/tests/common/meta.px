
namespace meta;

// builtin metafunctions

public extern "@is_type" "@is_type" struct {x} is_type { }
public extern "@is_function" "@is_function" struct {x} is_function { }
public extern "@is_macro" "@is_macro" struct {x} is_macro { }
public extern "@is_int" "@is_int" struct {x} is_int { }
public extern "@is_string" "@is_string" struct {x} is_string { }
public extern "@eq" "@eq" struct {x, y} eq { }
public extern "@not" "@not" struct {x} not { }

public extern "@imports" "@imports" struct {ns} imports { }
public extern "@imports_tr" "@imports_tr" struct {ns} imports_tr { }
public extern "@functions" "@functions" struct {ns} functions { }
public extern "@types" "@types" struct {ns} types { }
public extern "@macros" "@macros" struct {ns} macros { } // TODO

public extern "@local" "@local" struct {t, n, args} local { }

public extern "@symbol" "@symbol" struct {t, n} symbol { }
public extern "@category" "@category" struct {t} category { }
public extern "@nsname" "@nsname" struct {x} nsname { }
public extern "@num_tparams" "@num_tparams" struct {x} num_tparams { }
public extern "@num_targs" "@num_targs" struct {x} num_targs { }
public extern "@targs" "@targs" struct {x} targs { }

public extern "@rettype" "@rettype" struct {f} rettype { }
public extern "@argnum" "@argnum" struct {f, i} argnum { }
public extern "@argtype" "@argtype" struct {f, i} argtype { }
public extern "@argbyref" "@argbyref" struct {f, i} argbyref { }
public extern "@argtypes" "@argtypes" struct {f} argtypes { }
public extern "@argnames" "@argnames" struct {f} argnames { }

public extern "@field_types" "@field_types" struct {t} field_types { }
public extern "@field_names" "@field_names" struct {t} field_names { }
public extern "@member_functions" "@member_functions"
  struct {t} member_functions { }
public extern "@member_macros" "@member_macros"
  struct {t} member_macros { } // TODO

public extern "@apply" "@apply" struct {mf, lst} apply { }

public extern "@to_int" "@to_int" struct {x} to_int { }
public extern "@to_string" "@to_string" struct {x} to_string { }
public extern "@full_string" "@full_string" struct {x} full_string { }

public extern "@concat" "@concat" struct {x} concat { }
public extern "@index" "@index" struct {x, y} index { }

public extern "@@metaif" "@@metaif" struct {c, x, y} metaif { }
public extern "@@or" "@@or" struct {x, y} or { }
public extern "@@and" "@@and" struct {x, y} and { }

public extern "@list" "@list" struct {x, y} list { }
public extern "@size" "@size" struct {x} size { }
public extern "@at" "@at" struct {lst, idx} at { }
public extern "@seq" "@seq" struct {x, y} seq { }
public extern "@map" "@map" struct {lst, mf} metamap { }
public extern "@filter" "@filter" struct {lst, f} filter { }
public extern "@join" "@join" struct {lstlst} join { }
public extern "@join_all" "@join_all" struct {lstlst} join_all { }
public extern "@join_tail" "@join_tail" struct {lisplist} join_tail { }
public extern "@uniq" "@uniq" struct {lst} uniq { }
public extern "@foldl" "@foldl" struct {lst, mf, zero} foldl { } // TODO

public extern "@add" "@add" struct {x, y} add { }
public extern "@sub" "@sub" struct {x, y} sub { }
public extern "@mul" "@mul" struct {x, y} mul { }
public extern "@div" "@div" struct {x, y} div { }
public extern "@mod" "@mod" struct {x, y} mod { }
public extern "@gt" "@gt" struct {x, y} gt { }
public extern "@lt" "@lt" struct {x, y} lt { }
public extern "@ge" "@ge" struct {x, y} ge { }
public extern "@le" "@le" struct {x, y} le { }

