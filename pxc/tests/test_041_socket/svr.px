namespace svr;
import common -;
import io -;
import io::file -;
import io::errno -;
import io::standard -;
import io::addrinfo -;
import io::socket -;
import io::signal -;
import thread -;

private metafunction svr_host "127.0.0.1";
private metafunction svr_port "5001";

multithreaded struct server_thread(io const& i, tptr{bool} const& rp,
  tptr{string} const& s)
{
  io const iop = i;
  tptr{bool} readyp = rp;
  tptr{string} str_r = s;
  function void notify()
  {
    mutable lck = lock_guard{bool}(readyp);
    *lck = true;
    lck.notify_one();
  }
  function void main()
  {
    try {
      file_println(get_stderr(iop), "svr");
      const sf = make_acceptor(iop, svr_host, svr_port, AF_INET,
	SOCK_STREAM, 1024, 0); // TODO: fix EADDRINUSE
      file_println(get_stderr(iop), "accepted");
      notify();
      mutable peer_addr = sockaddr_storage();
      const sock = accept(sf.value, peer_addr);
      string s;
      size_t len = 10;
      sock.value.read(s, len);
      *str_r = s;
    } catch (exception::c_exception e) {
      file_println(get_stderr(iop), "thrown");
      notify();
    } catch (io::errno::errno_t e) {
      file_println(get_stderr(iop), "thrown errno");
      notify();
    }
  }
}

multithreaded struct client_thread(io const& i, tptr{bool} const& rp)
{
  io const iop = i;
  tptr{bool} readyp = rp;
  function void main()
  {
    {
      mutable lck = lock_cguard{bool}(readyp);
      while (true) {
	if (*lck) { break; }
	lck.wait();
      }
    }
    file_println(get_stderr(iop), "got notification");
    const sf = make_connector(iop, svr_host, svr_port, AF_INET,
      SOCK_STREAM, 10);
    const sock = connect(sf.value);
    size_t wlen = 0;
    sock.value.write("hoge", wlen);
  }
}

function void t1()
{
  signal(io::system, SIGPIPE, SIG_IGN);
  const readyp = to_tptr(bool(false));
  const strp = to_tptr(string());
  const sthr = make_thread(server_thread(io::system, readyp, strp));
  const cthr = make_thread(client_thread(io::system, readyp));
  sthr.join();
  cthr.join();
  println(*strp);
}

t1();

