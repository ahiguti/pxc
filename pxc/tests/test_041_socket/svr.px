public namespace svr;
import common -;
import io -;
import io::file -;
import io::errno -;
import io::standard -;
import io::addrinfo -;
import io::socket -;
import io::signal -;
import thread -;
import exception -;

private metafunction svr_host "127.0.0.1";
private metafunction svr_port "5001";

threaded function void
server_main(io const& iop, tptr{bool} const& readyp, tptr{string} const& str_r)
{
  threaded function void notify()
  {
    mutable lck = lock_guard{bool}(readyp);
    *lck = true;
    lck.notify_one();
  }
  try {
    iop.stderr().println("svr");
    const lsn = iop.listen(svr_host, svr_port, AF_INET, SOCK_STREAM,
      IPPROTO_TCP, 1024, true);
    iop.stderr().println("accepted");
    notify();
    mutable peer_addr = sockaddr_storage();
    const sock = lsn.accept(peer_addr);
    string s;
    size_t len = 10;
    sock.value.read(s, len);
    *str_r = s;
  } catch (exception::c_exception e) {
    iop.stderr().println("thrown");
    notify();
  } catch (io::errno::errno_t e) {
    iop.stderr().println("thrown errno");
    notify();
  }
}

threaded function void
client_main(io const& iop, tptr{bool} const& readyp)
{
  {
    mutable lck = lock_cguard{bool}(readyp);
    while (true) {
      if (*lck) { break; }
      lck.wait();
    }
  }
  iop.stderr().println("got notification");
  const sock = iop.connect(svr_host, svr_port, AF_INET, SOCK_STREAM,
    IPPROTO_TCP);
  sock.write("hoge");
}

function void t1()
{
  io::system.signal(SIGPIPE, SIG_IGN);
  const readyp = make_tptr(bool(false));
  const strp = make_tptr(string());
  const sthr = make_thread_func{server_main}(io::system, readyp, strp);
  const cthr = make_thread_func{client_main}(io::system, readyp);
  sthr();
  cthr();
  println(*strp);
}

t1();

