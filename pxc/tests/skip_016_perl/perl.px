public namespace perl;
public import core::common -;
public import core::meta m;
public import core::meta::family mf;
public import core::meta::symbol;
public import perl::impl;
private import core::numeric::integral -;

public metafunction sv perl::impl::sv;
public metafunction av perl::impl::av;
public metafunction hv perl::impl::hv;
public metafunction xs_make_function{f} perl::impl::xs_make_function{f};
public metafunction xs_make_field{t, i} perl::impl::xs_make_field{t, i};
public metafunction xs_make_type{t} perl::impl::xs_make_type{t};
public metafunction xs_make_variable{n, i}
  perl::impl::xs_make_variable{n, i};
public metafunction sv_to_int perl::impl::sv_to_int;
public metafunction int_to_sv perl::impl::int_to_sv;
public metafunction convert_to_perlsv{t} perl::impl::convert_to_perlsv{t};

public metafunction functions_for_ns{ns}
  m::filter{
    meta::symbol::functions_for_ns{ns},
    metafunction{f}
      m::and{m::not{meta::family::is_ephemeral_type{m::ret_type{f}}},
        m::not{m::ret_byref{f}}}};
public metafunction is_constructible_non_ephemeral{t}
  m::and{
    m::is_constructible_type{t},
    m::not{meta::family::is_ephemeral_type{t}}};

public function {ns} void export_all()
{
  metafunction allfuncs functions_for_ns{ns};
  metafunction alltypes meta::symbol::dependent_types_for_ns{ns};
  metafunction contypes m::filter{alltypes, is_constructible_non_ephemeral};
  metafunction nslist m::imports_transitive{ns};
  expand (i : m::seq{m::size{alltypes}}) {
    perl::xs_make_type{m::at{alltypes, i}}(
      m::full_string{m::at{alltypes, i}});
  }
  expand (i : m::seq{m::size{contypes}}) {
    {
      metafunction typ m::at{contypes, i};
      metafunction memfuncs m::filter{
        m::member_functions{typ},
        metafunction{f}
          m::and{m::not{meta::family::is_ephemeral_type{m::ret_type{f}}},
            m::not{m::ret_byref{f}}}};
      perl::xs_make_function{typ}(m::concat{m::full_string{typ}, "::new"});
      expand (j : m::seq{m::size{memfuncs}}) {
        {
          metafunction mf m::to_string{m::at{memfuncs, j}};
          perl::xs_make_function{method_as_function{typ, mf}}(
            m::concat{m::full_string{typ}, "::", mf});
        }
      }
      expand (j : m::seq{m::size{m::fields{typ}}}) {
        {
          metafunction fld m::at{m::fields{typ}, j};
          metafunction fn m::at0{fld};
          metafunction ft m::at1{fld};
          perl::xs_make_field{typ, j}(
            m::concat{m::full_string{typ}, "::", fn});
        }
      }
    }
  }
  metafunction extract_pointer{t}
    m::cond{mf::is_pointer_type{t}, m::at0{t}, t};
  metafunction base_type_candidate{fn}
    m::cond{m::ge{m::size{m::arg_types{fn}}, 1},
      m::concat{extract_pointer{m::arg_type{fn, 0}}, "_"},
      "0_"};
  expand (i : m::seq{m::size{allfuncs}}) {
    {
      metafunction fn m::at{allfuncs, i};
      metafunction fnstr m::full_string{fn};
      metafunction btc m::concat{m::nsof{fn}, "::",
        base_type_candidate{fn}};
      /* debug_log(fnstr, btc); */
      if (m::eq{m::substring{fnstr, 0, m::strlen{btc}}, btc}) {
        /* pseudo member function */
        debug_log("pmfnstr", pmfnstr);
        metafunction pmfnstr m::concat{
          m::full_string{m::arg_type{fn, 0}}, "::",
          m::substring{fnstr, m::strlen{btc}}};
        perl::xs_make_function{fn}(pmfnstr);
      } else {
        /* normal function */
        perl::xs_make_function{fn}(fnstr);
      }
    }
  }
  expand (n : nslist) {
    {
      metafunction gvars m::global_variables{n};
      expand (i : m::seq{m::size{gvars}}) {
        perl::xs_make_variable{n, i}(
          m::concat{n, "::", m::at0{m::at{gvars, i}}});
      }
    }
  }
}

public function {ns} void show_exports()
{
  metafunction allfuncs functions_for_ns{ns};
  metafunction alltypes meta::symbol::dependent_types_for_ns{ns};
  expand (i : m::seq{m::size{alltypes}}) {
    println(m::full_string{m::at{alltypes, i}});
  }
  expand (i : m::seq{m::size{allfuncs}}) {
    println(m::full_string{m::at{allfuncs, i}});
  }
}

public function string string_value(cstrref const& x)
{
  return x;
}

