namespace svr;
import common -;
import io -;
import io::file -;
import io::errno -;
import io::standard -;
import io::net::addrinfo -;
import io::net::socket -;
import io::signal -;
import thread -;

multithreaded struct server_thread(io const& i, tptr{bool} const& rp,
  tptr{string} const& s)
{
  io const iop = i;
  tptr{bool} readyp = rp;
  tptr{string} str_r = s;
  function void notify()
  {
    var lck = lockobject{bool}(readyp);
    *lck = true;
    lck.notify_one();
  }
  function void main()
  {
    try {
      file_println(get_stderr(iop), "svr");
      var sf = create_acceptor(iop, "localhost", "9999", AF_INET, SOCK_STREAM,
	1024, 0); // TODO: fix EADDRINUSE
      file_println(get_stderr(iop), "accepted");
      notify();
      var ioeh = errno_handler(error::handle_throw);
      var peer_addr = sockaddr_storage();
      var sock = accept(sf, peer_addr, ioeh);
      string s;
      size_t len = 10;
      sock.read(s, len, ioeh);
      *str_r = s;
    } catch (exception::common::exception e) {
      file_println(get_stderr(iop), "thrown");
      notify();
    } catch (io::errno::errno_t e) {
      file_println(get_stderr(iop), "thrown errno");
      notify();
    }
  }
}

multithreaded struct client_thread(io const& i, tptr{bool} const& rp)
{
  io const iop = i;
  tptr{bool} readyp = rp;
  function void main()
  {
    {
      var lck = clockobject{bool}(readyp);
      while (true) {
	if (*lck) { break; }
	lck.wait();
      }
    }
    file_println(get_stderr(iop), "got notification");
    var ioeh = errno_handler(error::handle_throw);
    var sf = create_connector(iop, "localhost", "9999", AF_INET, SOCK_STREAM,
      10);
    var sock = connect(sf, ioeh);
    sock.write("hoge", ioeh);
  }
}

function void t1()
{
  var ioeh = errno_handler(error::handle_throw);
  signal(io::system, SIGPIPE, SIG_IGN, ioeh);
  var readyp = tptr(bool(false));
  var strp = tptr(string());
  var sthr = thread_create(server_thread(io::system, readyp, strp));
  var cthr = thread_create(client_thread(io::system, readyp));
  sthr.join();
  cthr.join();
  println(*strp);
}

t1();

