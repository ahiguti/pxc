import core::common -;

public namespace inherit;

interface ifoo {
  public function int get_fx() const;
  public function int get_fy() const;
}

struct foo < ifoo > {
  public int fx;
  public int fy;
  public function int get_fx() const { return fx; }
  public function int get_fy() const { return fy; }
}

metafunction pfoo ptr{foo};
metafunction ipfoo ptr{ifoo};

function void f1(pfoo mutable& v)
{
  v->fx += 3;
  v->fy += 3;
}

function int f2(ipfoo v)
{
  return v->get_fx() * v->get_fy();
}

function void test1()
{
  pfoo x1 = make_ptr(foo(3, 4));
  ipfoo x = x1;
  f1(x1);
  int z = f2(x);
  println(x->get_fx());
  println(x->get_fy());
  println(z);
}

test1();
