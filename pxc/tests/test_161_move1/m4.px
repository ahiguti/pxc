public namespace m4 "use-unsafe";
public import common -;

public struct extern "mtest::foo" "noncopyable" foo {
  public int v;
}

public struct bar {
  public foo fv;
  public string sv;
  public function int get() const { return fv.v; }
}

extern "types" inline
namespace mtest {
struct foo {
  foo() : v(-1) { }
  foo(const foo& x) = delete;
  foo& operator =(const foo& x) = delete;
  foo(foo&& x) { v = x.v; x.v = -1; }
  foo(foo& x) : foo(std::move(x)) { }
  foo& operator =(foo&& x) {
    if (&x != this) { v = x.v; x.v = -1; } return *this; }
  foo& operator =(foo& x) { return (*this) = std::move(x); }
  int v;
};
};
;

{
  varray{foo} arr;
  foo y;
  y.v = 100;
  arr.push_back_move(y);
  println(arr.size(), arr[0].v);
}
