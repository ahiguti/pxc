public namespace transport_file;
public import common -;
public import io -;
public import orb -;
public import io::file -;
public import io::errno -;

public threaded struct transport_file(file_mt const& f0) <orb_transport> {
  private file_mt f = f0;
  private bool ok = true;
  function void reset(file_mt const& f0) {
    f = f0;
    ok = true;
  }
  function void send_receive(string mutable& rbuf, string mutable& wbuf) {
    if (ok && !wbuf.empty()) {
      const wr = f.write_all(wbuf);
      if (case wr.errno || wr.value != wbuf.size()) {
	ok = false;
      }
    }
    wbuf.clear();
    rbuf.clear();
    while (ok) {
      const rr = f.read(rbuf, 4096);
      if (rbuf.size() > 0 && rbuf[rbuf.size() - 1] == '\n') {
	break;
      }
      if (case rr.errno || rr.value == 0) {
	ok = false;
      }
    }
    if (!ok) {
      rbuf.clear();
      rbuf = "T\tio_error\n";
    }
  }
}

