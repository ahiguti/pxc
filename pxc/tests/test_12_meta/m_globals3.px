import common -;

namespace m_globals3;
import meta -;

function {t} int foo() {
  return 3;
}

struct {t} bar {
  function int mbar(vector{t} f) {
    return 2;
  }
}

function int baz(bar{ref{vector{int}}} v) {
  return 3;
}

metafunction nslist imports_tr{"m_globals"};
metafunction is_concrete{t} eq{num_tparams{t}, num_targs{t}};
metafunction filter_concrete{fs} filter{fs, is_concrete};
metafunction nsfuncs filter_concrete{join{map{nslist, functions}}};
metafunction nstypes filter_concrete{join{map{nslist, types}}};
metafunction atypes_one{f} joinv{list{rettype{f}}, argtypes{f}};
metafunction atypes{fs} filter_concrete{join{map{fs, atypes_one}}};
metafunction ftypes{ts} filter_concrete{join{map{ts, field_types}}};
metafunction mfatypes{ts} atypes{join{map{ts, member_functions}}};
metafunction tatypes{ts} filter_concrete{join{map{ts, targs}}};
metafunction init_types unique{joinv{nstypes, atypes{nsfuncs}}};
metafunction step_types{ts}
  unique{joinv{ts, ftypes{ts}, mfatypes{ts}, tatypes{ts}}};
metafunction rep_types{ts, tsn}
  cond{eq{ts, tsn}, ts, rep_types{tsn, step_types{tsn}}};
metafunction all_types rep_types{init_types, step_types{init_types}};

// println(concat{"NSFUNCS: ", nsfuncs});
// println(concat{"NSTYPES: ", nstypes});
// println(concat{"ATYPES: ", unique{atypes{nsfuncs}}});
// println(concat{"FTYPES: ", unique{ftypes{nstypes}}});
// println(concat{"MFATYPES: ", mfatypes{nstypes}});
// println(concat{"TATYPES: ", tatypes{nstypes}});

println(concat{"0: ", map{init_types, full_string}});
// println(concat{"1: ", step_types{init_types}});
// println(concat{"2: ", step_types{step_types{init_types}}});
println(concat{"n: ", map{all_types, full_string}});

