namespace m_sym3;
import common -;
import serialization::positional -;
import meta::builtin m;

function {t1, t2, f, c} t1 func0() { return f(); }
function {t1, t2, f, c} t1 func1(t2 a0) { return f(c(a0)); }
function {t1, t2, f, c} t1 func2(t2 a0, t2 a1) { return f(c(a0), c(a1)); }

function int str_to_int(cstrref const& buf)
{
  return decimal_to_integral_nocheck{int}(buf);
}

macro func_n{f}
  m::apply{
    m::symbol{func0, m::concat{"func", m::argnum{f}}},
    int, string, f, str_to_int
  };

function int foo(int x, int y)
{
	return x * y;
}


int r = func_n{foo}("100", "200");
println(r);

