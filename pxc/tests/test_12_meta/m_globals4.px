import common -;

namespace m_globals4;
import meta -;
import container -;

function {t} int foo() {
  return 3;
}

struct {t} bar {
  function int mbar(vector{t} f) {
    return 2;
  }
}

function int baz(bar{ref{vector{int}}} v) {
  return 3;
}

private macro nslist{ns} imports_tr{ns};
private macro is_concrete{t} eq{num_tparams{t}, num_targs{t}};
private macro filter_concrete{fs} filter{fs, is_concrete};
private macro nsfuncs{ns}
  filter_concrete{join{metamap{nslist{ns}, functions}}};
private macro nstypes{ns} filter_concrete{join{metamap{nslist{ns}, types}}};
private macro atypes_one{f} join_all{list{rettype{f}}, argtypes{f}};
private macro atypes{fs} filter_concrete{join{metamap{fs, atypes_one}}};
private macro ftypes{ts} filter_concrete{join{metamap{ts, field_types}}};
private macro mfatypes{ts} atypes{join{metamap{ts, member_functions}}};
private macro tatypes{ts} filter_concrete{join{metamap{ts, targs}}};
private macro init_types{ns} uniq{join_all{nstypes{ns}, atypes{nsfuncs{ns}}}};
private macro step_types{ts}
  uniq{join_all{ts, ftypes{ts}, mfatypes{ts}, tatypes{ts}}};
private macro rep_types{ts, tsn}
  metaif{eq{ts, tsn}, ts, rep_types{tsn, step_types{tsn}}};
public macro all_types{ns} rep_types{init_types, step_types{init_types{ns}}};

// println(concat{"NSFUNCS: ", nsfuncs});
// println(concat{"NSTYPES: ", nstypes});
// println(concat{"ATYPES: ", uniq{atypes{nsfuncs}}});
// println(concat{"FTYPES: ", uniq{ftypes{nstypes}}});
// println(concat{"MFATYPES: ", mfatypes{nstypes}});
// println(concat{"TATYPES: ", tatypes{nstypes}});

println(concat{"0: ", metamap{init_types{"m_globals"}, full_string}});
// println(concat{"1: ", step_types{init_types}});
// println(concat{"2: ", step_types{step_types{init_types}}});
println(concat{"n: ", metamap{all_types{"m_globals"}, full_string}});

