public threaded namespace funcptr "use-unsafe";
public import numeric::integral -;
public import operator -;
public import pointer -;
public import meta m;

public tsvaluetype struct extern "::pxcrt::funcptr<>::type" "nocascade" {t}
funcptr { }

public threaded function {f} funcptr{m::arg_type{f, 0}} to_funcptr()
{
  return to_funcptr_impl{func_wrap{f}, m::arg_type{f, 0}}();
}

public threaded function extern "::pxcrt::funcptr_call" {t} void
funcptr___call(funcptr{t} fp, t mutable& x);

/* private */

private threaded function extern "::pxcrt::to_funcptr_impl" {tw, t} funcptr{t}
to_funcptr_impl();

private tsvaluetype struct {f} func_wrap {
  public function void call(m::arg_type{f, 0} mutable& x) {
    f(x);
  }
}

extern "types" inline
namespace pxcrt {

template <typename T> struct funcptr { typedef void (*type)(T& x); };

template <typename T> static inline void
funcptr_call(typename funcptr<T>::type fp, T& x)
{
  fp(x);
}

template <typename Tw, typename T> static inline void
func_wrap_call(T& x)
{
  Tw().call$f(x);
}

template <typename Tw, typename T> typename funcptr<T>::type
to_funcptr_impl()
{
  return &func_wrap_call<Tw, T>;
}

}
;
