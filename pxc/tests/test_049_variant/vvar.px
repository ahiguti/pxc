public namespace vvar;
import variant -;
import core::common -;
import core::meta m;
import core::numeric::cast n;
import core::meta -;
import core::text::positional -;

pure function string foo(int x, string y)
{
  y.append(to_string(x));
  return y;
}

pure mtvaluetype struct bar(int x, string y)
{
  string value = y;
  value.append(to_string(x));
  function string m1(string z) const {
    string r = value;
    r.append(z);
    return r;
  }
}

function {ns} void test1() {
  metafunction vars m::global_variables{ns};
  expand (name, idx : m::map{vars, m::at0}) {
    println(
      m::concat{
        m::to_string{ns},
        " ",
        m::to_string{name},
        ": ",
        m::to_string{m::at3{m::at{vars, idx}}}});
  }
}

test1{"core::io"}();
test1{"core::io::file"}();
test1{"core::io::process"}();

