public namespace push "use-unsafe";
public import core::common -;
public import core::meta m;
public import test -;

struct extern "std::vector" {t} vector {
  public function extern "reserve" void reserve(size_t len);
  public function extern "push_back" void push_back(t v);
  public function extern "size" size_t size() const;
}

function {t, pushnum, rsv} size_t test_push(int num)
{
  size_t sum = 0;
  for (size_t i : 0 .. static_cast{size_t}(num)) {
    t obj;
    m::at0{t} e;
    if (m::gt{pushnum, 0}) {
      if (m::gt{rsv, 0}) {
        obj.reserve(pushnum);
      }
      for (size_t j : 0 .. pushnum) {
        obj.push_back(e);
      }
    }
    sum += obj.size();
  }
  return sum;
}

{
  test_timing_default{{
    test_push{vector{int}, 0, 0},
    test_push{vector{int}, 1, 0},
    test_push{vector{int}, 10, 0},
    test_push{vector{int}, 100, 0},
    test_push{varray{int}, 0, 0},
    test_push{varray{int}, 1, 0},
    test_push{varray{int}, 10, 0},
    test_push{varray{int}, 100, 0},
    test_push{svarray{int}, 0, 0},
    test_push{svarray{int}, 1, 0},
    test_push{svarray{int}, 10, 0},
    test_push{svarray{int}, 100, 0}}}();
  test_timing_default{{
    test_push{vector{int}, 0, 1},
    test_push{vector{int}, 1, 1},
    test_push{vector{int}, 10, 1},
    test_push{vector{int}, 100, 1},
    test_push{varray{int}, 0, 1},
    test_push{varray{int}, 1, 1},
    test_push{varray{int}, 10, 1},
    test_push{varray{int}, 100, 1},
    test_push{svarray{int}, 0, 1},
    test_push{svarray{int}, 1, 1},
    test_push{svarray{int}, 10, 1},
    test_push{svarray{int}, 100, 1}}}();
}

