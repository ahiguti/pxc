public namespace orb "use-unsafe";
public import core::generic::ordered -;
public import core::common -;
public import core::meta -;
public import core::pointer -;
public import core::meta m;
public import core::meta::family mf;
public import core::exception -;

public pure interface orb_transport {
  public function void send_receive(string mutable& rbuf,
    string mutable& wbuf);
}

public pure struct orb(ptr{orb_transport} const& tr) {
  public ptr{orb_transport} transport = tr;
  public ns_functions funcs; // TODO: remove
  public varray{methods} mets; // TODO: remove
  public string rbuf;
  public string wbuf;
  public tree_map{size_t, skeleton_mapped} skeletons;
    /* local realobject rawptr to realobject strong pointer */
  public tree_map{size_t, size_t} stubs_rtol;
    /* remote realobject id to local stub rawptr */
  public tree_map{size_t, size_t} stubs_ltor;
    /* local stub rawptr to remote realobject id */
}

private pure union skeleton_mapped {
  public unit nothing;
  public ptr{call_method_table} real_object;
}

public pure interface remote { }

public pure function void expect_response(ptr{orb} const& op)
{
  orb mutable& o = *op;
  orb_transport mutable& tr = *o.transport;
  while (true) {
    tr.send_receive(o.rbuf, o.wbuf);
    bool const executed_flag = execute_request(op);
    if (!executed_flag) {
      break;
    }
  }
}

public pure function bool execute_request(ptr{orb} const& op)
{
  /* read one request from rbuf, execute it, and return true. return
   * false if it's not an request. */
  orb mutable& o = *op;
  try {
    uchar req = o.rbuf[0];
    size_t const epos = o.rbuf.size() - 1;
    if (req == 'M') {
      size_t const objpos = 2;
      size_t pos = objpos;
      size_t const delim_pos = skip_token(o.rbuf, pos, epos);
      cstrref objbuf = o.rbuf[objpos + 1 .. delim_pos];
      size_t val = deserialize_from_string{size_t}(objbuf);
      if (skeleton_mapped mutable& m : o.skeletons[val]) {
        m.real_object->call_method(o, pos, epos);
      } else {
        o.wbuf.append("T\tinvalid_object\n");
      }
    } else {
      return false; /* not executed */
    }
  } catch (c_runtime_error e) {
    o.wbuf.append("T\t");
    string s = c_exception_message(e);
    string tr = c_exception_stack_trace(e);
    if (!tr.empty()) {
      s.append("\n");
      s.append(tr);
    }
    serialize_to_string{string}(s, o.wbuf);
    o.wbuf.append("\n");
  }
  return true; /* executed */
}

public pure function void execute(orb mutable& o)
// FIXME: remove
{
  try {
    uchar req = o.rbuf[0];
    if (req == 'F') {
      call_ns_function(o, 2, o.rbuf.size());
    } else {
      o.wbuf.append("T\tunknown_request\n");
    }
  } catch (c_runtime_error e) {
    o.wbuf.clear();
    o.wbuf.append("T\t");
    string s = c_exception_message(e);
    string tr = c_exception_stack_trace(e);
    if (!tr.empty()) {
      s.append("\n");
      s.append(tr);
    }
    serialize_to_string{string}(s, o.wbuf);
    o.wbuf.append("\n");
  }
}

private pure function void call_function_notfound(orb mutable& o,
  size_t const tpos, size_t const tepos, size_t const apos, size_t const aepos)
{
  o.wbuf.append("T\tfunction_not_found\n");
}

private pure function {ns, i0, i1} void call_ns_function_bs(orb mutable& o,
  size_t const tpos, size_t const tepos, size_t const apos, size_t const aepos)
{
  if (m::eq{i0, i1}) {
    call_function_notfound(o, tpos, tepos, apos, aepos);
  } else {
    metafunction fns m::sort{m::map{m::functions{ns}, m::to_string}};
    metafunction cidx m::add{i0, m::div{m::sub{i1, i0}, 2}};
    int const c = compare_weak{cstrref}(
      o.rbuf[tpos .. tepos], m::at{fns, cidx});
    if (c == 0) {
      function_call{m::symbol{ns, m::at{fns, cidx}}}(o, apos, aepos);
    } else if (c < 0) {
      call_ns_function_bs{ns, i0, cidx}(o, tpos, tepos, apos, aepos);
    } else {
      call_ns_function_bs{ns, cidx, i1}(o, tpos, tepos, apos, aepos);
    }
  }
}

public pure function {ns} void call_ns_function_ni(orb mutable& o,
  size_t const pos, size_t const epos)
{
  size_t args_pos = pos;
  size_t const delim_pos = skip_token(o.rbuf, args_pos, epos);
  metafunction fns m::sort{m::map{m::functions{ns}, m::to_string}};
  call_ns_function_bs{ns, 0, m::size{fns}}(o, pos, delim_pos, args_pos, epos);
}

private pure function void call_method_notfound(orb mutable& o,
  remote mutable& obj, size_t const tpos, size_t const tepos,
  size_t const apos, size_t const aepos)
{
  o.wbuf.append("T\tmethod_not_found\n");
}

private pure function {t, i0, i1} void call_method_bs(
  orb mutable& o, remote mutable& obj, size_t const tpos, size_t const tepos,
  size_t const apos, size_t const aepos)
{
  if (m::eq{i0, i1}) {
    call_method_notfound(o, obj, tpos, tepos, apos, aepos);
  } else {
    metafunction mf member_functions_sorted{t};
    metafunction cidx m::add{i0, m::div{m::sub{i1, i0}, 2}};
    int const c = compare_weak{cstrref}(
      o.rbuf[tpos .. tepos], m::to_string{m::at{mf, cidx}});
    if (c == 0) {
      method_call{t, cidx}(o, apos, aepos, obj);
    } else if (c < 0) {
      call_method_bs{t, i0, cidx}(o, obj, tpos, tepos, apos, aepos);
    } else {
      call_method_bs{t, cidx, i1}(o, obj, tpos, tepos, apos, aepos);
    }
  }
}

private pure interface call_method_table {
  public function void call_method(orb mutable& o, size_t pos,
    size_t const epos);
}

private pure struct {t} call_method_instance (ptr{t} const& p)
  <call_method_table> {
  public ptr{t} objptr = p;
  public function void call_method(orb mutable& o, size_t pos,
    size_t const epos) {
    call_method_ni{t}(o, pos, epos, *objptr);
  }
}

public pure function {t} void call_method_ni(orb mutable& o,
  size_t const pos, size_t const epos, remote mutable& obj)
{
  size_t args_pos = pos;
  size_t const delim_pos = skip_token(o.rbuf, args_pos, epos);
  metafunction mf member_functions_sorted{t};
  call_method_bs{t, 0, m::size{mf}}(o, obj, pos, delim_pos, args_pos, epos);
}

private pure function {f} void function_call(orb mutable& o, size_t pos,
  size_t epos)
{
  expand (asym, idx : func_argexp_list{f}) {
    func_arg_type_ne{f, idx} asym =
      unmarshal_value{func_arg_type_ne{f, idx}}(o.rbuf, pos, epos);
  }
  if (m::ne{m::ret_type{f}, void}) {
    m::ret_type{f} r = f(expand(a : func_arg_names{f}; a));
    o.wbuf.append("R\t");
    marshal_value(o.wbuf, r);
    o.wbuf.append("\n");
  } else {
    o.wbuf.append("R\t");
    f(expand(a : func_arg_names{f}; a));
    o.wbuf.append("\n");
  }
}

private pure function {t, mi} void method_call(orb mutable& o, size_t pos,
  size_t epos, remote mutable& obj)
{
  t mutable& objt = downcast_mutable{t, remote}(obj);
  metafunction f m::at{member_functions_sorted{t}, mi};
  expand (asym, idx : func_argexp_list{f}) {
    func_arg_type_ne{f, idx} asym =
      unmarshal_value{func_arg_type_ne{f, idx}}(o.rbuf, pos, epos);
  }
  expand (fsym : m::list{m::list{m::to_string{f}, 0}}) {
    if (m::ne{m::ret_type{f}, void}) {
      m::ret_type{f} r = objt.fsym(expand(a : func_arg_names{f}; a));
      o.wbuf.append("R\t");
      marshal_value(o.wbuf, r);
      o.wbuf.append("\n");
    } else {
      o.wbuf.append("R\t");
      obj.fsym(expand(a : func_arg_names{f}; a));
      o.wbuf.append("\n");
    }
  }
}

private pure function {t} t unmarshal_value(string const& buf,
  size_t mutable& pos, size_t epos)
{
  size_t npos = pos;
  size_t const delim_pos = skip_token(buf, npos, epos);
  cstrref tok = buf[pos .. delim_pos];
  pos = npos;
  return deserialize_from_string{t}(tok);
}

private pure function {t} void marshal_value(string mutable& buf,
  t const& x)
{
  serialize_to_string{t}(x, buf);
}

private pure tsvaluetype struct extern "orb::rawptr_type" "extuint" rawptr_type { }
private pure function extern "orb::ptr_to_rawptr" rawptr_type
ptr_to_rawptr(ptr{remote} const& p);
private pure function extern "orb::rawptr_to_ptr" ptr{remote}
rawptr_to_ptr(rawptr_type rawptr);
private pure function extern "orb::size_t_to_rawptr" rawptr_type
size_t_to_rawptr(size_t v);
private pure function extern "orb::rawptr_to_size_t" size_t
rawptr_to_size_t(rawptr_type rawptr);

extern "types" inline
namespace orb {
typedef void *rawptr_type;
}; // namespace orb
;

extern "implementation" inline
namespace orb {
using namespace pxcrt;
typedef ::orb$n::remote$i remote_type;
rawptr_type ptr_to_rawptr(const rcptr<remote_type>& p)
{
  rawptr_type const rp = p.get();
  return rp;
}
rcptr<remote_type> rawptr_to_ptr(rawptr_type rawptr)
{
  remote_type *const p = static_cast<remote_type *>(rawptr);
  p->incref$z();
  rcptr<remote_type> ptr(p);
  return ptr;
}
rawptr_type size_t_to_rawptr(const bt_size_t v)
{
  return reinterpret_cast<rawptr_type>(v);
}
bt_size_t rawptr_to_size_t(rawptr_type rawptr)
{
  return reinterpret_cast<bt_size_t>(rawptr);
}
}; // namespace orb
;

private pure struct {t} stub (ptr{orb} const& op, size_t robjid) <t> {
  public ptr{orb} shared_orb = op;
  public size_t remote_objid = robjid;
  function ~ {
    orb mutable& o = *shared_orb;
    /* TODO: send remove request */
    if (size_t local_objid : o.stubs_rtol[remote_objid]) {
      o.stubs_ltor.erase(local_objid);
      o.stubs_rtol.erase(remote_objid);
    }
  }
  public metafunction mfuncs m::member_functions{t};
    /* TODO: const member functions */
  public metafunction mfis
    m::map{
      mfuncs,
      metafunction{x}
        m::list{m::to_string{x}, m::is_const_member_function{x}}};
  expand (fsym, fidx: mfis) {
    /* non-const member function */
    public function m::ret_type{m::at{mfuncs, fidx}}
      fsym(expand (replace_arg_names{m::args{m::at{mfuncs, fidx}}}))
    {
      metafunction rtype m::ret_type{m::at{mfuncs, fidx}};
      metafunction args replace_arg_names{m::args{m::at{mfuncs, fidx}}};
      orb mutable& o = *shared_orb;
      o.wbuf.append("M\t~");
      serialize_to_string{size_t}(remote_objid, o.wbuf);
      expand (asym, aidx: m::map{args, m::at0}) {
        {
          o.wbuf.push_back('\t');
          marshal_type{m::at1{m::at{args, aidx}}}(o, asym);
        }
      }
      o.wbuf.push_back('\n');
      rtype const r = execute_expect_response{rtype}(shared_orb);
      return r;
    }
    /* const member function */
    public function m::ret_type{m::at{mfuncs, fidx}}
      fsym(expand (replace_arg_names{m::args{m::at{mfuncs, fidx}}})) const
    {
      metafunction rtype m::ret_type{m::at{mfuncs, fidx}};
      metafunction args replace_arg_names{m::args{m::at{mfuncs, fidx}}};
      orb mutable& o = *shared_orb;
      o.wbuf.append("M\t~");
      serialize_to_string{size_t}(remote_objid, o.wbuf);
      expand (asym, aidx: m::map{args, m::at0}) {
        {
          o.wbuf.push_back('\t');
          marshal_type{m::at1{m::at{args, aidx}}}(o, asym);
        }
      }
      o.wbuf.push_back('\n');
      rtype const r = execute_expect_response{rtype}(shared_orb);
      return r;
    }
  }
}

public pure mtvaluetype struct orb_error(cstrref const& m) <runtime_error>
{
  public string const mess = m;
  public function string message() const { return mess; }
}

private pure function {t} t execute_expect_response(ptr{orb} const& op)
{
  expect_response(op);
  orb mutable& o = *op;
  uchar res = o.rbuf[0];
  size_t pos = 2;
  size_t const epos = o.rbuf.size() - 1;
  if (res == 'R') {
    t r = unmarshal_type{t}(op, pos, epos);
    return r;
  } else if (res == 'T') {
    throw orb_error(o.rbuf[pos .. epos]);
  } else {
    throw orb_error("invalid_respose");
  }
}

private metafunction replace_arg_names{args}
  /* replace arg names to 'a0', 'a1', ... */
  m::map{m::seq{m::size{args}},
    metafunction{i}
      m::join{
        m::list{m::concat{"a", i}},
        m::slice{m::at{args, i}, 1}}};

private pure function {t} ptr{stub{t}} create_stub(ptr{orb} const& op,
  size_t remote_objid)
{
  orb mutable& o = *op;
  ptr{stub{t}} r = make_ptr{stub{t}}(stub{t}(op, remote_objid));
  size_t const local_objid = rawptr_to_size_t(ptr_to_rawptr(r));
  o.stubs_rtol[remote_objid] = local_objid; /* throw */
  o.stubs_ltor[local_objid] = remote_objid; /* throw */
  return r;
}

private pure function {t} void marshal_type(orb mutable& o, t const& x)
{
  if (type_byref{t}) {
    marshal_reference(o, x);
  } else {
    marshal_value(o.wbuf, x);
  }
}

private pure function {t} t unmarshal_type(ptr{orb} const& op,
  size_t mutable& pos, size_t epos)
{
  if (type_byref{t}) {
    return unmarshal_reference{t}(op, pos, epos);
  } else {
    return unmarshal_value{t}(op->rbuf, pos, epos);
  }
}

// TODO: private
public pure function {t} void marshal_reference(orb mutable& o,
  t const& x)
{
  rawptr_type const rawptr = ptr_to_rawptr(x);
  size_t const ra = rawptr_to_size_t(rawptr);
  if (size_t rmt : o.stubs_ltor[ra]) {
    o.wbuf.push_back('~');
    serialize_to_string{size_t}(rmt, o.wbuf);
  } else {
    skeleton_mapped mutable& m = o.skeletons[ra];
    if (case m.nothing) {
      m.real_object = make_ptr{call_method_instance{m::at0{t}}}(x);
    }
    o.wbuf.push_back('!');
    serialize_to_string{size_t}(ra, o.wbuf);
  }
}

// TODO: private
public pure function {t} t unmarshal_reference(ptr{orb} const& op,
  size_t mutable& pos, size_t epos)
{
  orb mutable& o = *op;
  cstrref buf = o.rbuf[pos .. epos];
  if (buf.empty()) {
    throw runtime_error_template{"orb"}("parse_error");
  }
  uchar const ch = buf[0];
  buf.increment_front(1);
  size_t val = deserialize_from_string{size_t}(buf);
  if (ch == '!') {
    if (skeleton_mapped mutable& m : o.skeletons[val]) {
      metafunction cmi_type call_method_instance{m::at0{t}};
      ptr{cmi_type} cmip = pointer_downcast{
        ptr{cmi_type}, ptr{call_method_table}}(m.real_object);
      return cmip->objptr;
    }
    throw runtime_error_template{"orb"}("skeleton_notfound");
  } else if (ch == '~') {
    if (size_t lp : o.stubs_rtol[val]) {
      ptr{remote} r = rawptr_to_ptr(size_t_to_rawptr(lp));
      return pointer_downcast{t, ptr{remote}}(r);
    } else {
      metafunction tgt m::at0{t};
      ptr{tgt} r = create_stub{tgt}(op, val);
      return r;
    }
  } else {
    throw runtime_error_template{"orb"}("parse_error");
  }
}

private pure function size_t skip_token(string const& buf,
  size_t mutable& pos, size_t epos)
{
  size_t delim_pos = find_mapped(buf, pos, '\t');
  if (delim_pos < epos) {
    pos = delim_pos + 1;
    return delim_pos;
  } else {
    pos = epos;
    return epos;
  }
}

private metafunction member_functions_sorted{t}
  sort_by_string{m::member_functions{t}};
private metafunction sort_by_string{lst}
  m::map{
    m::sort{m::map{lst, metafunction{v} m::list{m::to_string{v}, v}}},
    m::at1};

private metafunction func_argexp_list{f}
  m::map{
    m::seq{m::size{m::args{f}}},
    metafunction{i} m::list{m::concat{"a", i},
      m::cond{type_byref{func_arg_type_ne{f, i}}, 1, 0}}};
private metafunction type_byref{t}
  m::and{
    m::eq{m::family{t}, "ptr"},
    m::inherits{m::at0{t}, remote}};
private metafunction func_arg_names{f}
  m::map{
    m::seq{m::size{m::args{f}}},
    metafunction{idx} m::concat{"a", idx}};
private metafunction func_arg_type_ne{f, idx}
  mf::to_non_ephemeral_type{m::at{m::arg_types{f}, idx}};

/* using function/method table */ /* TODO: remove */

public pure function void call_ns_function(orb mutable& o,
  size_t const pos, size_t const epos)
{
  ns_functions_slice fs = o.funcs;
  size_t args_pos = pos;
  size_t const delim_pos = skip_token(o.rbuf, args_pos, epos);
  size_t const p = binary_search{func_entry, cstrref, compare_func_entry}(
    fs, o.rbuf[pos .. delim_pos]);
  if (p < fs.size()) {
    fs[p].func->call(o, args_pos, epos);
  } else {
    o.wbuf.append("T\tfunction_not_found\n");
  }
}

public pure function void call_method(orb mutable& o, size_t const pos,
  size_t const epos, size_t tid, remote mutable& obj)
{
  methods_slice ms = o.mets[tid];
  size_t args_pos = pos;
  size_t const delim_pos = skip_token(o.rbuf, args_pos, epos);
  size_t const p = binary_search{method_entry, cstrref, compare_method_entry}(
    ms, o.rbuf[pos .. delim_pos]);
  if (p < ms.size()) {
    ms[p].method->call(o, args_pos, epos, obj);
  } else {
    o.wbuf.append("T\tmethod_not_found\n");
  }
}

public pure struct func_entry (strlit const& k,
  ptr{i_marshal_fcall} const& f)
{
  public strlit name = k;
  public ptr{i_marshal_fcall} func = f;
}

public pure struct method_entry (strlit const& k,
  ptr{i_marshal_method} const& f)
{
  public strlit name = k;
  public ptr{i_marshal_method} method = f;
}

public metafunction ns_functions varray{func_entry};
public metafunction ns_functions_slice cslice{func_entry};

public metafunction methods varray{method_entry};
public metafunction methods_slice cslice{method_entry};

public pure function {ns} ns_functions create_ns_functions()
{
  ns_functions fs;
  expand (fsym, idx : m::sort{m::map{m::functions{ns}, m::to_string}}) {
    {
      strlit k = m::to_string{fsym};
      metafunction fc marshal_fcall{m::symbol{ns, fsym}};
      ptr{i_marshal_fcall} p = make_ptr{fc}(fc());
      func_entry e = func_entry(k, p);
      fs.push_back(e);
    }
  }
  return fs;
}

public pure function {t} methods create_methods()
{
  methods ms;
  expand (fsym, idx : m::map{member_functions_sorted{t}, m::to_string}) {
    {
      strlit k = m::to_string{fsym};
      metafunction mt marshal_method{t, idx};
      ptr{i_marshal_method} p = make_ptr{mt}(mt());
      method_entry e = method_entry(k, p);
      ms.push_back(e);
    }
  }
  return ms;
}

private pure interface i_marshal_fcall
{
  public function void call(orb mutable& o, size_t pos, size_t epos) const;
}

private pure struct {f} marshal_fcall <i_marshal_fcall>
{
  public function void call(orb mutable& o, size_t pos, size_t epos) const {
    function_call{f}(o, pos, epos);
  }
}

private pure interface i_marshal_method
{
  public function void call(orb mutable& o, size_t pos, size_t epos,
    remote mutable& obj) const;
}

private pure struct {t, mi} marshal_method <i_marshal_method>
{
  public function void call(orb mutable& o, size_t pos, size_t epos,
    remote mutable& obj) const {
    method_call{t, mi}(o, pos, epos, obj);
  }
}

private pure function {t, tk, cmp} size_t binary_search(cslice{t} const& s,
  tk const& k)
{
  size_t first = 0;
  size_t last = s.size();
  while (last - first > 0) {
    extern "disable-bounds-check" 1; /* s[middle] is always safe */
    size_t const middle = first + ((last - first) >> 1);
    int const c = cmp(s[middle], k);
    if (c < 0) {
      first = middle + 1;
    } else if (c > 0) {
      last = middle;
    } else {
      return middle;
    }
  }
  return s.size();
}

private pure function int compare_func_entry(func_entry const& ent,
  cstrref const& k)
{
  return compare_weak{cstrref}(ent.name, k);
}

private pure function int compare_method_entry(method_entry const& ent,
  cstrref const& k)
{
  return compare_weak{cstrref}(ent.name, k);
}

