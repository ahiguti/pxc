namespace bsearch;
import common -;
import meta::common m;

function {lst} void bsinl(int x)
{
  metafunction lsz m::size{lst};
  if (m::gt{lsz, 0}) {
    metafunction cidx m::div{lsz, 2};
    metafunction lst0 m::slice{lst, 0, cidx};
    metafunction lst1 m::slice{lst, m::add{cidx, 1}};
    if (x == m::at{lst, cidx}) {
      string s = "found: ";
      s.append(to_string(x));
      println(s);
    } else if (x < m::at{lst, cidx}) {
      bsinl{lst0}(x);
    } else {
      bsinl{lst1}(x);
    }
  } else {
    string s = "notfound: ";
    s.append(to_string(x));
    println(s);
  }
}

function void test1(int x)
{
  metafunction lst m::sort{m::list{1, 5, 23, 11, 4, 9, 16}};
  bsinl{lst}(x);
}

function void t1()
{
  for (int i : 0 .. 30) {
    test1(i);
  }
}

t1();

