public namespace t8;
import core::common -;
import python py;

struct foo {
  public int x;
  public string y;
}

function ptr{foo} make_foo()
{
  return make_ptr{foo}();
}

function void foo_set_x(ptr{foo} const& obj, int x)
{
  obj->x = x;
}

function int foo_get_x(ptr{foo} const& obj)
{
  return obj->x;
}

{
  try {
    const f0 = py::make_function{make_foo}();
    const f1 = py::make_function{foo_set_x}();
    const f2 = py::make_function{foo_get_x}();
    const obj = f0(); /* error: no type converter */
    f1(obj, 123);
    const v = f2(obj);
    println(v);
  } catch (py::error_already_set e) {
    py::error_print();
  }
}

