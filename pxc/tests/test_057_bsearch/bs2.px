public namespace bs2;
import core::common -;
import core::meta m;

function {lst} int bsinl(int x)
{
  metafunction lsz m::size{lst};
  if (m::gt{lsz, 0}) {
    metafunction cidx m::div{lsz, 2};
    metafunction lst0 m::slice{lst, 0, cidx};
    metafunction lst1 m::slice{lst, m::add{cidx, 1}};
    if (x == m::at{lst, cidx}) {
      return x;
    } else if (x < m::at{lst, cidx}) {
      return bsinl{lst0}(x);
    } else {
      return bsinl{lst1}(x);
    }
  } else {
    return 0;
  }
}

function int test1(int x)
{
  metafunction lst m::sort{m::list{1, 5, 23, 11, 4, 9, 16}};
  return bsinl{lst}(x);
}

function void t1()
{
  for (int i : 0 .. 30) {
    int j = test1(i);
    println(j);
  }
}

t1();

