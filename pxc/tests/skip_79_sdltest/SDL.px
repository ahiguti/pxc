namespace SDL;
import common -;
import exception -;
import meta m;

extern "cflags" "`sdl-config --cflags`";
extern "ldflags" "`sdl-config --libs` -lGL";

public tsvaluetype struct extern "Uint32" "extbitmask" InitFlags { }
public extern "SDL_INIT_AUDIO" InitFlags SDL_INIT_AUDIO;
public extern "SDL_INIT_VIDEO" InitFlags SDL_INIT_VIDEO;
public extern "SDL_INIT_CDROM" InitFlags SDL_INIT_CDROM;
public extern "SDL_INIT_TIMER" InitFlags SDL_INIT_TIMER;
public extern "SDL_INIT_EVERYTHING" InitFlags SDL_INIT_EVERYTHING;

public tsvaluetype struct extern "Uint32" "extbitmask" SurfaceFlags { }
public extern "SDL_SWSURFACE" SurfaceFlags SDL_SWSURFACE;
public extern "SDL_HWSURFACE" SurfaceFlags SDL_HWSURFACE;
public extern "SDL_ANYFORMAT" SurfaceFlags SDL_ANYFORMAT;
public extern "SDL_OPENGL" SurfaceFlags SDL_OPENGL;
public extern "SDL_RESIZABLE" SurfaceFlags SDL_RESIZABLE;

public tsvaluetype struct extern "SDL_Event" Event { }
public function extern "SDL::Event_Type" EventType Event_Type(Event const& ev);
public function extern "SDL::Event_ResizeW" int Event_ResizeW(Event const& ev);
public function extern "SDL::Event_ResizeH" int Event_ResizeH(Event const& ev);

public tsvaluetype struct extern "SDL_EventType" "extenum" EventType { }
public extern "SDL_ACTIVEEVENT" EventType SDL_ACTIVEEVENT;
public extern "SDL_KEYDOWN" EventType SDL_KEYDOWN;
public extern "SDL_KEYUP" EventType SDL_KEYUP;
public extern "SDL_MOUSEMOTION" EventType SDL_MOUSEMOTION;
public extern "SDL_MOUSEBUTTONDOWN" EventType SDL_MOUSEBUTTONDOWN;
public extern "SDL_MOUSEBUTTONUP" EventType SDL_MOUSEBUTTONUP;
public extern "SDL_JOYAXISMOTION" EventType SDL_JOYAXISMOTION;
public extern "SDL_JOYBALLMOTION" EventType SDL_JOYBALLMOTION;
public extern "SDL_JOYHATMOTION" EventType SDL_JOYHATMOTION;
public extern "SDL_JOYBUTTONDOWN" EventType SDL_JOYBUTTONDOWN;
public extern "SDL_JOYBUTTONUP" EventType SDL_JOYBUTTONUP;
public extern "SDL_QUIT" EventType SDL_QUIT;
public extern "SDL_SYSWMEVENT" EventType SDL_SYSWMEVENT;
public extern "SDL_VIDEORESIZE" EventType SDL_VIDEORESIZE;
public extern "SDL_VIDEOEXPOSE" EventType SDL_VIDEOEXPOSE;

public struct extern "SDLKey" "extint" SDLKey { }
public extern "SDLK_RETURN" SDLKey SDLK_RETURN;
public extern "SDLK_ESCAPE" SDLKey SDLK_ESCAPE;
public extern "SDLK_BACKSPACE" SDLKey SDLK_BACKSPACE;
public extern "SDLK_TAB" SDLKey SDLK_TAB;
public extern "SDLK_SPACE" SDLKey SDLK_SPACE;
public extern "SDLK_DELETE" SDLKey SDLK_DELETE;
public extern "SDLK_RIGHT" SDLKey SDLK_RIGHT;
public extern "SDLK_LEFT" SDLKey SDLK_LEFT;
public extern "SDLK_DOWN" SDLKey SDLK_DOWN;
public extern "SDLK_UP" SDLKey SDLK_UP;

public struct extern "SDL_GLattr" "extint" GLattr { }
public extern "SDL_GL_SWAP_CONTROL" GLattr SDL_GL_SWAP_CONTROL;

public function ptr{SDL} Init(io::io const& sys, InitFlags flags)
{
  return to_ptr{SDL}(sys, flags);
}

public function ptr{Surface} SDL_SetVideoMode(ptr{SDL} const& sdl,
  uint width, uint height, uint bpp, SurfaceFlags flags)
{
  const p = to_ptr{Surface}(sdl);
  if (!SetVideoMode(*p, width, height, bpp, flags)) {
    throw runtime_error_template{"SDL_SetVideoMode"}();
  }
  return p;
}

public function KeyState SDL_GetKeyState(ptr{SDL} const& sdl)
{
  return KeyState(sdl);
}
public struct extern "SDL::KeyState" KeyState private (ptr{SDL} const& sdl) { }
public function extern "SDL::KeyState_Key" uint KeyState_Key(
  KeyState const& ks, SDLKey code);

public function extern "SDL::PollEvent" bool SDL_PollEvent(ptr{SDL} const& sdl,
  Event mutable& ev);

public function extern "SDL::GL_SetAttribute" void SDL_GL_SetAttribute(
  ptr{SDL} const& sdl, GLattr attr, int value);
public function extern "SDL::GL_SwapBuffers" void SDL_GL_SwapBuffers(
  ptr{SDL} const& sdl);

public function extern "SDL::WM_SetCaption" void SDL_WM_SetCaption(
  ptr{SDL} const& sdl, cstrref const& title, cstrref const& icon);
public function extern "SDL::GetTicks" uint SDL_GetTicks(ptr{SDL} const& sdl);

private struct extern "SDL::SDLHnd" "noncopyable" SDL(io::io const& sys,
  InitFlags flags) { }
private struct extern "SDL::Surface" "linear" Surface(ptr{SDL} const& sdl) { }
private function extern "SDL::SetVideoMode" bool SetVideoMode(
  Surface mutable& ptr, uint width, uint height, uint bpp, SurfaceFlags flags);

private metafunction sdlptr_csymbol m::csymbol{ptr{SDL}};

extern "types" inline
#include <SDL.h>
namespace SDL {
using namespace pxcrt;

struct SDLHnd {
  SDLHnd(pxcio::io const& sys, Uint32 flags);
  ~SDLHnd();
  SDLHnd(SDLHnd const&);
  SDLHnd& operator =(SDLHnd const&);
};

struct Surface {
  Surface(%{sdlptr_csymbol}% const&);
  ~Surface();
  Surface(Surface const&);
  Surface& operator =(Surface const&);
  ::SDL_Surface *ptr;
};

struct KeyState {
  KeyState(%{sdlptr_csymbol}% const&);
  const Uint8 *keystate;
  int num;
};

}; // namespace SDL
;

extern "implementation" inline
#include <SDL.h>
namespace SDL {
using namespace pxcrt;

static int sdl_init_cnt = 0;

static void sdl_init_addref(Uint32 flags)
{
  if (++sdl_init_cnt == 1) {
    ::SDL_Init(flags);
  }
}

static void sdl_init_decref()
{
  if (--sdl_init_cnt == 0) {
    ::SDL_Quit();
  }
}

SDLHnd::SDLHnd(pxcio::io const& sys, Uint32 flags)
{
  sdl_init_addref(flags);
}

SDLHnd::~SDLHnd()
{
  sdl_init_decref();
}

Surface::Surface(%{sdlptr_csymbol}% const&)
  : ptr(0)
{
  sdl_init_addref(0);
}
Surface::~Surface()
{
  if (ptr != 0) {
    SDL_FreeSurface(ptr);
  }
  sdl_init_decref();
}

KeyState::KeyState(%{sdlptr_csymbol}% const&)
{
  keystate = ::SDL_GetKeyState(&num);
}

bt_bool SetVideoMode(Surface& ptr, bt_uint width, bt_uint height,
  bt_uint bpp, Uint32 flags)
{
  ::SDL_Surface *p = ::SDL_SetVideoMode(width, height, bpp, flags);
  if (p == 0) {
    return false;
  }
  ptr.ptr = p;
  return true;
}

bt_bool PollEvent(%{sdlptr_csymbol}% const& sdl, SDL_Event& ev)
{
  return ::SDL_PollEvent(&ev);
}

void GL_SetAttribute(%{sdlptr_csymbol}% const& sdl, SDL_GLattr attr,
  bt_int value)
{
  ::SDL_GL_SetAttribute(attr, value);
}

void GL_SwapBuffers(%{sdlptr_csymbol}% const& sdl)
{
  return ::SDL_GL_SwapBuffers();
}

void WM_SetCaption(%{sdlptr_csymbol}% const& sdl, cstrref const& title,
  cstrref const& icon)
{
  PXCRT_ALLOCA_NTSTRING(title_nt, title);
  PXCRT_ALLOCA_NTSTRING(icon_nt, icon);
  ::SDL_WM_SetCaption(title_nt.get(), icon_nt.get());
}

bt_uint GetTicks(const %{sdlptr_csymbol}% & sdl)
{
  return ::SDL_GetTicks();
}

SDL_EventType Event_Type(SDL_Event const& e)
{
  return SDL_EventType(e.type);
}

bt_int Event_ResizeW(SDL_Event const& e)
{
  return e.type == SDL_VIDEORESIZE ? e.resize.w : 0;
}

bt_int Event_ResizeH(SDL_Event const& e)
{
  return e.type == SDL_VIDEORESIZE ? e.resize.h : 0;
}

bt_uint KeyState_Key(KeyState const& ks, SDLKey key)
{
  if (key < ks.num) {
    return ks.keystate[key];
  } else {
    return 0;
  }
}

};

;

