public namespace pytiming3;
public import core::common -;
public import python py;
public import test -;

function {v} size_t test1(int num)
{
  size_t sum = 0;
  string s;
  for (const i : 0 .. num) {
    s.append("abcde");
  }
  sum += s.size();
  return sum;
}

function {v} size_t test1py(int num)
{
  const main = py::module("__main__");
  const x = py::make_string("abcde");
  long sum = 0;
  mutable s = py::make_string("");
  for (const i : 0 .. num) {
    s += x; /* does not perform in-place concat even when refcnt == 1 */
  }
  sum += py::len(s);
  return static_cast{size_t}(sum);
}

function {v} size_t test1py2(int num)
{
  const main = py::module("__main__");
  const global = main.__dict__;
  py::exec(string_join{"\n"}(
    "def test1(num):",
    "  s = ''",
    "  for i in range(num):",
    "    s += 'abcde'",
    "  return len(s)"),
    global, global);
  long sum = main.test1(num);
  return static_cast{size_t}(sum);
}

{
  try {
    test_timing_default{{
      test1{100},
      /* test1py{100}, */ // too slow
      test1py2{100}
    }}();
  } catch (py::error_already_set e) {
    py::error_print();
  }
}

