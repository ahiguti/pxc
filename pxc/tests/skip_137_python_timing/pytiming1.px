public namespace pytiming1;
public import core::common -;
public import python py;
public import test -;

function size_t test1(int num)
{
  long sum = 0;
  const builtin = py::module("__builtin__");
  const base64 = py::module("base64");
  for (const i : 0 .. num) {
    long const x = builtin.len(base64.b64encode("0123456789abcdef"));
    sum += x;
  }
  return static_cast{size_t}(sum);
}

function size_t test1opt(int num)
{
  long sum = 0;
  const builtin = py::module("__builtin__");
  const base64 = py::module("base64");
  const s = py::make_string("0123456789abcdef");
  const len = builtin.len;
  const b64e = base64.b64encode;
  for (const i : 0 .. num) {
    long const x = len(b64e(s));
    sum += x;
  }
  return static_cast{size_t}(sum);
}

function size_t test1py(int num)
{
  try {
    const main = py::module("__main__");
    const global = main.__dict__;
    py::exec(string_join{"\n"}(
      "import base64",
      "def test1(num):",
      "  sum = 0",
      "  for i in range(num):",
      "    sum += len(base64.b64encode('0123456789abcdef'))",
      "  return sum"),
      global, global);
    long const v = main.test1(num);
    return static_cast{size_t}(v);
  } catch (py::error_already_set e) {
    py::error_print();
  }
  return 0;
}

{
  test_timing_default{{
    test1,
    test1opt,
    test1py
  }}();
}

