public namespace fp2 "use-unsafe";
public import core::common -;
public import core::meta m;
public import core::pointer::tfuncptr -;

public pure function extern "pxcrt::get_fp" tfuncptr{int, {{int, 1, 1}}}
get_fp();
public pure function extern "pxcrt::get_fp2" tfuncptr{void, {int, double}}
get_fp2();

extern "types" inline
namespace pxcrt {

int test_fp(int& x);
void test_fp2(int x, double y);

static inline typename tfuncptr1<int, int&>::type get_fp()
{ return &test_fp; }
static inline typename tfuncptr2<void, int, double>::type get_fp2()
{ return &test_fp2; }

};
;

extern "implementation" inline
#include <stdio.h>
namespace pxcrt {

int test_fp(int& x) { x += 3; return x * 2; }
void test_fp2(int x, double y) { printf("value=%d,%f\n", x, y); }

};
;

{
  tfuncptr{int, {{int, 1, 1}}} f = get_fp();
  int v = 123;
  const y = f(v);
  println(v);
  println(y);
  tfuncptr{void, {int, double}} g = get_fp2();
  g(500, 12.5);
}

