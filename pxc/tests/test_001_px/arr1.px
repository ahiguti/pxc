
private import core::common -;

public namespace arr1 "use-unsafe";

// function extern "array::push_back" void push_back(varray{0} vec, 0 val);
// function extern "array::pop_back" 0 pop_back(varray{0} vec);
function extern "array::push_back" {t}
  void push_back(varray{t} mutable& vec, t const& val);
function extern "array::pop_back" {t}
  t pop_back(varray{t} mutable& vec);

extern "implementation" inline
namespace array {
template <typename T> void
push_back(pxcrt::pxcvarray<T>& v, const T& x)
{
  v.push_back(x);
}
template <typename T> T
pop_back(pxcrt::pxcvarray<T>& v)
{
  if (v.empty()) {
    T rv = T();
    return rv;
  } else {
    T rv = v[v.size() - 1];
    v.pop_back();
    return rv;
  }
}
}; // namespace array
;

function void t1()
{
  varray{int} v;
  push_back(v, 3);
  push_back(v, 5);
  push_back(v, 30);
  int x = pop_back(v);
  println(x);
  println(pop_back(v));
  println(pop_back(v));
  println(pop_back(v));
  println(pop_back(v));
}

t1();

