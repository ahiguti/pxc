
public namespace up2;
import common -;
import numeric::cast -;

function {t, f} void values_vector(vector{t} mutable& v)
{
  size_t sz = v.size();
  for (i = 0; i < sz; ++i) {
    f(v[i]);
  }
}

function {t, f} void keys_vector(vector{t} mutable& v)
{
  size_t sz = v.size();
  for (i = 0; i < sz; ++i) {
    f(i);
  }
}

function void foo(vector{int} mutable& v) {
  int x;
  values_vector{int, function void (int e) { x += e; }}(v);
  println(x);
}

vector{int} a;
a.resize(101, int());
size_t i;
for (i = 0; i < a.size(); ++i) {
  a[i] = numeric_cast{int, size_t}(i);
}
foo(a);

