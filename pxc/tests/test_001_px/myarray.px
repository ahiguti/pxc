
public namespace myarray "use-unsafe";
import core::common -;

public function extern "myarray::length" {t} ulong length(varray{t} const& a);
public function extern "myarray::empty" {t} bool empty(varray{t} const& a);
public function extern "myarray::resize" {t} void
resize(varray{t} mutable& a, ulong len, t v);
public function extern "myarray::clear" {t} void clear(varray{t} mutable& a);
public function extern "myarray::push" {t} void
push(varray{t} mutable& a, t v);
public function extern "myarray::pop" {t} t pop(varray{t} mutable& a);

extern "functions" inline
namespace myarray {
template <typename T> unsigned long long length(const pxcrt::pxcvarray<T>& a)
  { return a.size(); };
template <typename T> bool empty(const pxcrt::pxcvarray<T>& a)
  { return a.empty(); };
template <typename T> void resize(pxcrt::pxcvarray<T>& a,
  unsigned long long len, T v)
  { a.resize(len, v); }
template <typename T> void clear(pxcrt::pxcvarray<T>& a)
  { a.clear(); }
template <typename T> void push(pxcrt::pxcvarray<T>& a, T v)
  { a.push_back(v); }
template <typename T> T pop(const pxcrt::pxcvarray<T>& a)
  { T r = a.at(a.size() - 1); a.pop_back(); return r; }
};
;

