public namespace uexc "use-unsafe";
import common -;
import meta -;
import exception -;

struct extern "texc::texc" texc { }

union foo {
  string x;
  string y;
  texc z;
}

function void tfun()
{
  foo a;
  a.x = "abc"; 
  println(a);
  a.z = texc();
  println(a);
}

function void t1()
{
  try {
    tfun();
  } catch (c_exception e) {
    println("got exception");
  }
}

extern "types" inline
namespace texc {
struct texc {
  texc() {
    hoge = "aaaaaaa";
  }
  texc(const texc& x) {
    hoge += "ccc";
    throw std::runtime_error("exc1");
  }
  texc& operator =(const texc& x) {
    if (this != &x) {
      hoge += "ccc";
      throw std::runtime_error("exc2");
    }
    return *this;
  }
  std::string hoge;
};
};
;

t1();

