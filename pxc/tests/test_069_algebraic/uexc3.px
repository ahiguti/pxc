public namespace uexc3 "use-unsafe";
import core::common -;
import core::meta -;
import core::exception -;

struct extern "texc::texc" texc { }

union foo {
  public string x;
  public int y;
  public texc z;
}

function void tfun()
{
  foo a;
  a.x = "abc";
  println("1");
  texc t;
  a.z = t;
  println("2");
  foo b;
  b = a;
  a = b;
  b = a;
  println("3");
}

function void t1()
{
  try {
    tfun();
  } catch (c_exception e) {
    println("got exception");
  }
}

extern "types" inline
namespace texc {
struct texc {
  texc() {
    hoge = "aaaaaaa";
    count = 0;
  }
  texc(const texc& x) {
    hoge = x.hoge;
    count = x.count;
    hoge += "ccc";
    if (++count > 3) {
      throw std::runtime_error("exc1");
    }
  }
  texc& operator =(const texc& x) {
    if (this != &x) {
      hoge += "ccc";
      throw std::runtime_error("exc2");
    }
    return *this;
  }
  std::string hoge;
  int count;
};
};
;

t1();

