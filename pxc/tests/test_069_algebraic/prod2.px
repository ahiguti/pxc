public namespace prod2;
import common -;
import algebraic -;
import meta m;

struct foo(int x0, string y0)
{
  int x = x0;
  string y = y0;
}

function {f} m::ret_type{f} noarg() {
  expand (sym, idx:
    m::map{m::seq{m::size{m::args{f}}}, metafunction{x} m::concat{"a", x}}) {
    m::at{m::arg_types{f}, idx} sym;
  }
  return f(expand (a:
    m::map{
      m::seq{m::size{m::args{f}}},
      metafunction{x} m::concat{"a", x}}; a));
}

function void t1()
{
  mutable x = noarg{foo}();
  x.x = 3;
  x.y = "abc";
  println(x);
}

t1();

