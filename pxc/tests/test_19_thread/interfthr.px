namespace interfthr;
import common -;
import thread -;

multithreaded interface ifoo {
  function int get_v() const;
}

multithreaded struct sfoo < ifoo > {
  int v;
  function int get_v() const { return v; }
}

multithreaded struct my_thread_obj(int x0, int y0, tptr{ifoo} p0,
  io::ioptr sys0) {
  int x = x0;
  int y = y0;
  io::ioptr sys = sys0;
  tptr{ifoo} p = p0;
  function void main() {
    io::file::fileptr stdout = io::standard::get_stdout(sys);
    io::standard::file_println(*stdout, "my thread main");
    io::standard::file_println(*stdout, x);
    io::standard::file_println(*stdout, y);
    io::standard::file_println(*stdout, p->get_v());
  }
}

function void test1()
{
  tptr{sfoo} p = tptr(sfoo(3));
  threadptr thr = thread_create(my_thread_obj(123, 456, p, io::io));
  thr.join();
}

test1();

