public namespace tx1;
import common -;
import meta m;
import io -;
import io::file -;
import io::errno -;
import io::standard -;
import io::text -;
import text::conversion -;

function {t} void parse_table(file const& fp, t mutable& tbl)
{
  m::symbol{t, "key_type"} key;
  m::symbol{t, "mapped_type"} mapped;
  fp.read_lines{parse_line, 0}();
  function bool parse_line(cstrref const& line) {
    size_t const sz = line.size();
    size_t cur = 0;
    expand (i : m::seq{
      m::add{1, m::max{m::symbol{t, "key_pos"}, m::symbol{t, "mapped_pos"}}}})
    {
      {
	size_t delim = find_mapped(line, cur, '\t');
	cstrref col = line[cur .. delim];
	if (m::eq{i, m::symbol{t, "key_pos"}}) {
	  key = from_string{m::symbol{t, "key_type"}}(col);
	} else if (m::eq{i, m::symbol{t, "mapped_pos"}}) {
	  mapped = from_string{m::symbol{t, "mapped_type"}}(col);
	}
	cur = (delim < sz) ? (delim + 1) : sz;
      }
    }
    tbl.insert(key, mapped);
    return true;
  }
}

struct stbl {
  metafunction key_type string;
  metafunction mapped_type int;
  metafunction key_pos 0;
  metafunction mapped_pos 1;
  tree_map{key_type, mapped_type} m;
  function void insert(key_type const& k, mapped_type const& v) {
    m[k] += v;
  }
  function void dump() {
    for (key_type k, mapped_type v : m) {
      print(k);
      print("\t");
      println(v);
    }
  }
}

{
  const f = system.open("hoge3.txt", io::file::O_RDONLY, 0);
  stbl tv;
  parse_table(f.value, tv);
  tv.dump();
}

