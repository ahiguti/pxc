import common -;

namespace pimpl;

private multithreaded struct foo_impl {
  private int x;
  private string y;
  public function int get_x() const { return x; }
  public function string get_y() const { return y; }
  public function void set_x(int v) { x = v; }
  public function void set_y(string v) { y = v; }
}

public metafunction foo ptr{foo_impl};

public threaded function foo foo_new(int a, string b)
  { return ptr{foo_impl}(foo_impl(a, b)); }
public threaded function int foo_impl_get_x(foo_impl const& f)
  { return f.get_x(); }
public threaded function string foo_impl_get_y(foo_impl const& f)
  { return f.get_y(); }
public threaded function void foo_impl_set_x(foo_impl& f, int v)
  { f.set_x(v); }
public threaded function void foo_impl_set_y(foo_impl& f, string v)
  { f.set_y(v); }

