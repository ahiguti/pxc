
public namespace elem5;
import core::common -;

struct foo {
  public int value;
}

function foo f1(varray{foo} mutable& v, foo const& x)
  // x is passed by const ref
{
  println("a");
  v.resize(20, foo()); // would invalidate
  println("b");
  return x;
}

function void test1()
{
  varray{foo} v;
  v.resize(10, foo());
  v[3] = foo(10);
  foo z = f1(v, v[3]);
  v[3] = foo(5);
  println(v[3].value);
  println(z.value);
}

set_stack_trace_limit(0);
try {
  test1();
} catch (c_exception ex) {
  println("caught", ex);
}
