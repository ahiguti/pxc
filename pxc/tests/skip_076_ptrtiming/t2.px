public namespace t2 "use-unsafe";
import common -;
import generic::datatype -;
import io::time -;
import meta m;
import test -;

metafunction nptr{t} option{ptr{t}};

struct heaptm(int v, nptr{heaptm} const& f, nptr{heaptm} const& s) {
  int value = 1; // v
  nptr{heaptm} fst = f;
  nptr{heaptm} snd = s;
  function int sum() const {
    int r = value;
    if (const p : fst.some) { r += p->sum(); }
    if (const p : snd.some) { r += p->sum(); }
    return r;
  }
}

function nptr{heaptm} create_tree(int depth)
{
  nptr{heaptm} r;
  if (depth > 0) {
    nptr{heaptm} f = create_tree(depth - 1);
    nptr{heaptm} s = create_tree(depth - 1);
    r.some = make_ptr{heaptm}(depth, f, s);
  }
  return r;
}

function int p1(int loop)
{
  int r = 0;
  mutable v = darray{nptr{heaptm}}(static_cast{size_t}(loop), nptr{heaptm}());
  for (size_t i : 0 .. static_cast{size_t}(loop)) {
    const t = create_tree(16);
    v[i] = t;
  }
  for (size_t i : 0 .. static_cast{size_t}(loop)) {
    r += v[i].some->sum();
  }
  return r;
}

function extern "::c2" int c2(int loop);
function extern "::c3" int c3(int loop);

extern "implementation" inline
#include <memory>

struct heaptm {
  heaptm() : value() { }
  heaptm(int v, const std::shared_ptr<heaptm>& f,
    const std::shared_ptr<heaptm>& s)
    : value(1), first(f), second(s) { } // v
  int sum() const {
    int r = value;
    if (first.get() != 0) { r += first->sum(); }
    if (second.get() != 0) { r += second->sum(); }
    return r;
  }
  int value;
  std::shared_ptr<heaptm> first;
  std::shared_ptr<heaptm> second;
};

static std::shared_ptr<heaptm> create_tree(int depth)
{
  if (depth > 0) {
    std::shared_ptr<heaptm> f = create_tree(depth - 1);
    std::shared_ptr<heaptm> s = create_tree(depth - 1);
    return std::make_shared<heaptm>(depth, f, s);
  } else {
    return std::shared_ptr<heaptm>();
  }
}

int c2(int loop)
{
  int r = 0;
  std::varray< std::shared_ptr<heaptm> > v(loop);
  for (int i = 0; i < loop; ++i) {
    v[i] = create_tree(16);
  }
  for (int i = 0; i < loop; ++i) {
    r += v[i]->sum();
  }
  return r;
}

struct heaptm3 {
  heaptm3() : value() { }
  heaptm3(int v, std::unique_ptr<heaptm3>& f, std::unique_ptr<heaptm3>& s)
    : value(1), first(std::move(f)), second(std::move(s)) { } // v
  int sum() const {
    int r = value;
    if (first.get() != 0) { r += first->sum(); }
    if (second.get() != 0) { r += second->sum(); }
    return r;
  }
  int value;
  std::unique_ptr<heaptm3> first;
  std::unique_ptr<heaptm3> second;
};

static std::unique_ptr<heaptm3> create_tree3(int depth)
{
  if (depth > 0) {
    std::unique_ptr<heaptm3> f = create_tree3(depth - 1);
    std::unique_ptr<heaptm3> s = create_tree3(depth - 1);
    std::unique_ptr<heaptm3> r(new heaptm3(depth, f, s));
    return r;
  } else {
    return std::unique_ptr<heaptm3>();
  }
}

int c3(int loop)
{
  int r = 0;
  std::varray< std::unique_ptr<heaptm3> > v(loop);
  for (int i = 0; i < loop; ++i) {
    v[i] = create_tree3(16);
  }
  for (int i = 0; i < loop; ++i) {
    r += v[i]->sum();
  }
  return r;
}

;

{
  test_timing_default{{p1, c2, c3}}();
}

