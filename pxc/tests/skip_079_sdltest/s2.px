public namespace s2 "use-unsafe";
import core::common -;
import SDL2 -;
import GL::gl11 -;

function void draw_tri()
{
  glBegin(GL_TRIANGLES);
  glVertex2f(0.0, static_cast{float}(-1.732 / 3.0 * 2.0));
  glVertex2f(-1.0, static_cast{float}(1.732 / 3.0));
  glVertex2f(1.0, static_cast{float}(1.732 / 3.0));
  glEnd();
}

{
  const wnd = SDL_CreateWindow("s2", 0, 0, 640, 480,
    SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE).some;
  const glctx = SDL_GL_CreateContext(wnd);
  bool done = false;
  float theta;
  float xinc;
  {
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustum(-1.0, 1.0, -1.0, 1.0, 5.0, 100.0);
    glMatrixMode(GL_MODELVIEW);
  }
  while (!done) {
    SDL_Event ev;
    while (SDL_PollEvent(ev)) {
      if (ev.type == SDL_QUIT) {
        done = true;
        break;
      }
    }
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glPushMatrix();
    glTranslatef(0.0, 2.0, -10.0);
    glRotatef(theta, 0.0, 0.0, 1.0);
    for (int i : 0 .. 100) {
      glTranslatef(0.0, 0.0, -1.0);
      draw_tri();
    }
    glPopMatrix();
    system.usleep(10000);
    SDL_GL_SwapWindow(wnd);
    theta += 1.0;
    xinc += 1.00000;
  }
}

