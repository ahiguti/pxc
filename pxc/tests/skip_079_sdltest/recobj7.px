public namespace recobj7 "export-unsafe";
import common -;
import pointer::raw -;
import numeric::fpmath -;
import SDL2 -;
import SDL2::Image -;
import SDL2::TTF -;
import GL::gles2 -;
import GL::glm glm;
import io::time -;
import io::environ -;
import exception -;
import meta m;

import glutil -;
import glgeometry -;

glm::mat4 projection;
glm::quat camera_angle;
glm::vec3 camera_pos;
int loc_mvp = -1;
int loc_model_matrix = -1;
int loc_normal_matrix = -1;
int loc_camera_pos = -1;
int loc_mate_color = -1;
int loc_vertex = -1;
int loc_normal = -1;
int loc_light_dir = -1;
int loc_view_dir = -1;
int loc_sampler = -1;
int loc_panel_pos = -1;
int loc_panel_uvpos = -1;
int loc_panel_sampler = -1;
uint string_texture_id;
uint prog_main;
uint prog_panel;

int screen_width = 0;
int screen_height = 0;
float perspective_distance = 1.1;
float min_distance = 1.0;

function void build_vertices(buffer_object mutable& bo)
{
  /* vtx0 */
  {
    bo.vs_arr.push_back(vertex_set());
    const vtx0 = bo.vs_arr[bo.vs_arr.size() - 1].vtxs;
    const t0 = fill(vtx0);
    regular_polygon(0.3, 50,
      bump(0.04, 0.5, 1, t0, t0),
      bump(0.01, 0.9, 5,
	// sphere(20, bump(0.002, 0.9, 1, t0, t0)),
	sphere(10, t0),
	// t0,
	bump(0.0003, 0.9, 1, t0, t0)))
      (cslice{glm::vec3}());
  }
  /* vtx1 */
  {
    bo.vs_arr.push_back(vertex_set());
    const vtx1 = bo.vs_arr[bo.vs_arr.size() - 1].vtxs;
    const t1 = fill(vtx1);
    regular_polygon(0.1, 4,
      bump(8.0, 1.0, 1, t1, t1),
      t1)
      (cslice{glm::vec3}());
  }
  /* vtx2 */
  {
    bo.vs_arr.push_back(vertex_set());
    const vtx2 = bo.vs_arr[bo.vs_arr.size() - 1].vtxs;
    const t2 = fill(vtx2);
    regular_polygon(10.0, 100,
      bump(1.0, 1.0, 1, hole(), edge(vtx2, 0, hole())),
      hole())
      (cslice{glm::vec3}());
  }
  println("vtxs0:", bo.vs_arr[0].vtxs->vertex_values.size());
  println("elems0:", bo.vs_arr[0].vtxs->elements.size());
  println("vtxs1:", bo.vs_arr[1].vtxs->vertex_values.size());
  println("elems0:", bo.vs_arr[1].vtxs->elements.size());
}

function void set_normals(glm::mat4 const& model_mat)
{
  const view = (glm::mat4().translate(camera_pos) * camera_angle.to_mat4())
    .inverse();
  const mvp = projection * view * model_mat;
  const nm = model_mat.to_3();
  glUniformMatrix4fv(loc_mvp, 1, 0, mvp.crawptr());
  glUniformMatrix4fv(loc_model_matrix, 1, 0, model_mat.crawptr());
  glUniformMatrix3fv(loc_normal_matrix, 1, 0, nm.crawptr());
  glUniform3fv(loc_camera_pos, 1, camera_pos.crawptr());
  const red = make_farray{float}(0.8, 0.1, 0.0, 1.0);
  glUniform4fv(loc_mate_color, 1, red.crawptr());
}

function void draw_frame(buffer_object const& bo,
  string_texture_info const& sti, cstrref const& mess)
{
  /* main */
  glUseProgram(prog_main);
  check_error();
  glEnable(GL_CULL_FACE);
  glEnable(GL_DEPTH_TEST);
  glDisable(GL_BLEND);
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  const light = glm::make_vec3(5.0, 5.0, -5.0).normalize();
  glUniform3fv(loc_light_dir, 1, light.crawptr());
  check_error();
  glUniform3fv(loc_view_dir, 1,
    (camera_angle.to_mat3() * glm::make_vec3(0.0, 0.0, -1.0)).crawptr());
  check_error();
  const sn = bo.instantiate_scene(2);
  const modelview_cur = glm::mat4();
  sn->draw{set_normals}(bo, modelview_cur, loc_vertex, loc_normal, -1);
  check_error();
  /* panel */
  glUseProgram(prog_panel);
  check_error();
  glDisable(GL_CULL_FACE);
  check_error();
  glDisable(GL_DEPTH_TEST);
  check_error();
  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
  check_error();
  glEnable(GL_BLEND);
  check_error();
  glUniform1i(loc_panel_sampler, 0);
  check_error();
  const lpp = static_cast{uint}(loc_panel_pos);
  const lpu = static_cast{uint}(loc_panel_uvpos);
  glEnableVertexAttribArray(lpp);
  check_error();
  glEnableVertexAttribArray(lpu);
  check_error();
  varray{float} pvals;
  varray{float} uvals;
  uint cur_x = 0;
  uint cur_y = 0;
  for (size_t i, const ch: mess) {
    if (ch < 0x20) {
      continue;
    }
    const tx0 = (ch > 0x20) ? sti.char_x[ch - 0x20 - 1] : 0;
    const tx1 = sti.char_x[ch - 0x20];
    const ty0 = sti.char_h;
    const ty1 = 0;
    const tw = tx1 - tx0;
    const th = sti.char_h;
    const x0 = static_cast{float}(cur_x) * 2.0f
      / static_cast{float}(screen_width) - 1.0f;
    const y0 = static_cast{float}(cur_y) * 2.0f
      / static_cast{float}(screen_height) - 1.0f;
    const x1 = static_cast{float}(cur_x + tw) * 2.0f
      / static_cast{float}(screen_width) - 1.0f;
    const y1 = static_cast{float}(cur_y + th) * 2.0f
      / static_cast{float}(screen_height) - 1.0f;
    const u0 = static_cast{float}(tx0) / static_cast{float}(sti.surface_w);
    const v0 = static_cast{float}(ty0) / static_cast{float}(sti.surface_h);
    const u1 = static_cast{float}(tx1) / static_cast{float}(sti.surface_w);
    const v1 = 0.0f;
    /* println(x0, y0, x1, y1, u0, v0, u1, v1); */
    pvals.push_back(x0);
    pvals.push_back(y0);
    pvals.push_back(x0);
    pvals.push_back(y1);
    pvals.push_back(x1);
    pvals.push_back(y0);
    pvals.push_back(x1);
    pvals.push_back(y0);
    pvals.push_back(x0);
    pvals.push_back(y1);
    pvals.push_back(x1);
    pvals.push_back(y1);
    uvals.push_back(u0);
    uvals.push_back(v0);
    uvals.push_back(u0);
    uvals.push_back(v1);
    uvals.push_back(u1);
    uvals.push_back(v0);
    uvals.push_back(u1);
    uvals.push_back(v0);
    uvals.push_back(u0);
    uvals.push_back(v1);
    uvals.push_back(u1);
    uvals.push_back(v1);
    cur_x += tw;
  }
  if (pvals.size() > 0) {
    glVertexAttribPointer(lpp, 2, GL_FLOAT, 0, 0, pvals.crawptr().void());
    check_error();
    glVertexAttribPointer(lpu, 2, GL_FLOAT, 0, 0, uvals.crawptr().void());
    check_error();
    glDrawArrays(GL_TRIANGLES, 0, static_cast{int}(pvals.size() / 2));
    check_error();
    glDisableVertexAttribArray(lpp);
    check_error();
    glDisableVertexAttribArray(lpu);
    check_error();
  }
}

function void reshape(int width, int height)
{ 
  screen_width = width;
  screen_height = height;
  update_mvp();
}

function void set_distance(float x)
{
  perspective_distance = x;
  if (perspective_distance < min_distance + 0.1) {
    perspective_distance = min_distance + 0.1; }
  if (perspective_distance > 500.0) { perspective_distance = 500.0; }
  update_mvp();
}

function void update_mvp()
{
  const h = static_cast{float}(screen_height)
    / static_cast{float}(screen_width);
  glViewport(0, 0, static_cast{GLsizei}(screen_width),
    static_cast{GLsizei}(screen_height));
  const d = static_cast{float}(perspective_distance);
  const near = static_cast{float}(d - min_distance);
  const far = static_cast{float}(d + min_distance + 100.0);
  const left = static_cast{float}(-1.0 * ((d - min_distance) / d));
  const right = static_cast{float}(1.0 * ((d - min_distance) / d));
  const bottom = static_cast{float}(-h * ((d - min_distance) / d));
  const top = static_cast{float}(h * ((d - min_distance) / d));
  projection = glm::frustum{float}(left, right, bottom, top, near, far);
}

function uint compile_shader(cstrref const& src, GLenum type)
{
  mutable res = glCreateShader(type);
  mutable source = make_farray{ccharptr}(src.crawptr().char());
  const length = make_farray{int}(static_cast{int}(src.size()));
  glShaderSource(res, 1, source.rawptr(), length.crawptr());
  glCompileShader(res);
  int success;
  glGetShaderiv(res, GL_COMPILE_STATUS, address(success));
  if (success == 0) {
    int sz;
    glGetShaderiv(res, GL_INFO_LOG_LENGTH, address(sz));
    string buf;
    buf.resize(static_cast{size_t}(sz), 0);
    GLsizei len;
    glGetShaderInfoLog(res, static_cast{GLsizei}(sz), address(len),
      buf.rawptr().char());
    debug_log("compile_shader failed:",
      string_join{"\t"}(static_cast{int}(type), success, buf));
    glDeleteShader(res);
    res = 0;
  }
  debug_log("compile_shader", res);
  return res;
}

function uint create_program(cstrref const& vertex_shader,
  cstrref const& fragment_shader)
{
  mutable prog = glCreateProgram();
  uint shader;
  int success = 1;
  if (!vertex_shader.empty()) {
    shader = compile_shader(vertex_shader, GL_VERTEX_SHADER);
    if (shader != 0) {
      glAttachShader(prog, shader);
    } else {
      success = 0;
    }
  }
  if (!fragment_shader.empty()) {
    shader = compile_shader(fragment_shader, GL_FRAGMENT_SHADER);
    if (shader != 0) {
      glAttachShader(prog, shader);
    } else {
      success = 0;
    }
  }
  if (success == 0) {
    debug_log("create_program failed:", success);
    glDeleteProgram(prog);
    prog = 0;
  } else {
    glLinkProgram(prog);
    glGetProgramiv(prog, GL_LINK_STATUS, address(success));
    debug_log("create_program", prog);
  }
  return prog;
}

threaded function {t} t power_of_2(t v)
{
  mutable t r = static_cast{t}(1);
  while (r != 0 && r < v) { r <<= 1; }
  return r;
}

struct string_texture_info {
  public varray{uint} char_x;
  public uint char_h;
  public uint surface_w;
  public uint surface_h;
}

function void init_program(string_texture_info mutable& sti)
{
  {
    const vert = m::concat{
      "uniform mat4 model_view_projection;\n",
      "uniform mat4 model_matrix;\n",
      "uniform mat3 normal_matrix;\n",
      "uniform vec3 camera_pos;\n",
      "uniform vec3 light_dir;\n",
      "uniform vec3 view_dir;\n",
      "uniform vec4 mate_color;\n",
      "attribute vec3 vertex;\n",
      "attribute vec3 normal;\n",
      "varying float brightness;\n",
      "varying float specular;\n",
      "void main(void) {\n",
      "  vec4 vertex4 = vec4(vertex, 1.0);\n",
      "  gl_Position = model_view_projection * vertex4;\n",
      "  vec3 nor = normalize(normal_matrix * normal);\n",
      "  brightness = max(dot(light_dir, nor), 0.0) * 1.0 + 0.1;\n",
      "  vec3 reflection_vec = reflect(-light_dir, nor);\n",
      "  vec3 vtx_pos = (model_matrix * vertex4).xyz;\n",
      "  vec3 vtx_from_camera = normalize(vtx_pos - camera_pos);\n",
      "  float cos_angle = max(0.0, dot(vtx_from_camera, reflection_vec));\n",
      "  specular = pow(cos_angle, 16.0);\n",
      "}\n"};
    const frag = m::concat{
      "uniform sampler2D sampler;\n",
      "uniform vec4 mate_color;\n",
      "varying float brightness;\n",
      "varying float specular;\n",
      "void main(void) {\n",
      "  vec4 color1 = vec4(0.25, 0.26, 0.29, 1.0);\n",
      "  vec4 color2 = vec4(1.0, 1.0, 1.0, 1.0);\n",
      "  gl_FragColor = color1 * brightness + color2 * specular;\n",
      "}\n"};
    const prog = create_program(vert, frag);
    if (prog == 0) {
      throw runtime_error_template{"create_program"}("1");
    }
    loc_mvp = glGetUniformLocation(prog,
      "model_view_projection".crawptr().char());
    loc_model_matrix = glGetUniformLocation(prog,
      "model_matrix".crawptr().char());
    loc_normal_matrix = glGetUniformLocation(prog,
      "normal_matrix".crawptr().char());
    loc_camera_pos = glGetUniformLocation(prog,
      "camera_pos".crawptr().char());
    loc_light_dir = glGetUniformLocation(prog, "light_dir".crawptr().char());
    loc_view_dir = glGetUniformLocation(prog, "view_dir".crawptr().char());
    loc_mate_color = glGetUniformLocation(prog,
      "mate_color".crawptr().char());
    loc_sampler = glGetUniformLocation(prog, "sampler".crawptr().char());
    loc_vertex = glGetAttribLocation(prog, "vertex".crawptr().char());
    loc_normal = glGetAttribLocation(prog, "normal".crawptr().char());
    println("loc_vertex: ", loc_vertex);
    println("loc_normal: ", loc_normal);
    println("loc_camera_pos: ", loc_camera_pos);
    println("loc_light_dir: ", loc_light_dir);
    println("loc_view_dir: ", loc_view_dir);
    println("loc_mate_color: ", loc_mate_color);
    SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{" "}("prog_main",
      loc_vertex, loc_normal, loc_light_dir, loc_mate_color));
    prog_main = prog;
  }
  {
    const vert = m::concat{
      "attribute vec2 pos;\n",
      "attribute vec2 uvpos;\n",
      "varying vec2 texcoord;\n",
      "void main(void) {\n",
      "  gl_Position = vec4(pos, 0.0, 1.0);\n",
      "  texcoord = uvpos;\n",
      "}\n"
    };
    const frag = m::concat{
      "uniform sampler2D sampler;\n",
      "varying vec2 texcoord;\n",
      "void main(void) {\n",
      "  vec4 col = texture2D(sampler, texcoord);\n",
      "  gl_FragColor = col;\n",
      "}\n"};
    const prog = create_program(vert, frag);
    if (prog == 0) {
      debug_log("THROW");
      throw runtime_error_template{"create_program"}("2");
    }
    loc_panel_pos = glGetAttribLocation(prog, "pos".crawptr().char());
    loc_panel_uvpos = glGetAttribLocation(prog, "uvpos".crawptr().char());
    loc_panel_sampler = glGetUniformLocation(prog, "sampler".crawptr().char());
    SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{" "}("prog_panel",
      loc_panel_pos, loc_panel_uvpos, loc_panel_sampler));
    prog_panel = prog;
  }
  {
    /* font */
    const fnames = make_farray{string}(
      "/Library/Fonts/Osaka.ttf",
      "/usr/share/fonts/mplus/mplus-1m-medium.ttf");
    option{ptr{TTF_Font}} font;
    for (size_t i, const& fn: fnames) {
      font = TTF_OpenFont(fn, 16);
      if (case font.some) {
	break;
      }
    }
    SDL_Color mutable fg;
    fg.r = 255;
    fg.g = 255;
    fg.b = 255;
    fg.a = 255;
    uint hmax = 0;
    uint wtotal = 0;
    varray{ptr{SDL_Surface}} sur_arr;
    for (const i: 0 .. 0x60) {
      farray{uchar, 1} z;
      z[0] = static_cast{uchar}(i + 0x20);
      const sur = TTF_RenderUTF8_Blended(font.some, z, fg).some;
      // println(z, sur.W(), sur.H());
      sur_arr.push_back(sur);
      hmax = max(hmax, sur.H());
      wtotal += sur.W();
    }
    const sur_chars = SDL_CreateRGBSurface(
      static_cast{int}(power_of_2(wtotal)),
      static_cast{int}(power_of_2(hmax)), 32, 0, 0, 0, 0).some;
    println("wtotal, hmax", wtotal, hmax);
    sti.char_x.clear();
    uint xcur = 0;
    for (const i, const e: sur_arr) {
      SDL_Rect r0;
      SDL_Rect r1;
      r0.x = 0;
      r0.y = 0;
      r0.w = static_cast{int}(e.W());
      r0.h = static_cast{int}(e.H());
      r1.x = static_cast{int}(xcur);
      r1.y = 0;
      r1.w = r0.w;
      r1.h = r1.h;
      const v = SDL_BlitSurface(e, r0, sur_chars, r1);
      xcur += static_cast{uint}(r1.w);
      sti.char_x.push_back(xcur);
    }
    sti.char_h = hmax;
    sti.surface_w = sur_chars.W();
    sti.surface_h = sur_chars.H();
    const sur = sur_chars;
    /* texture */
    glActiveTexture(GL_TEXTURE0);
    check_error();
    glGenTextures(1, address(string_texture_id));
    check_error();
    glBindTexture(GL_TEXTURE_2D, string_texture_id);
    check_error();
    glTexImage2D(GL_TEXTURE_2D, 0, static_cast{int}(GL_RGBA),
      static_cast{int}(sur.W()), static_cast{int}(sur.H()),
      0, GL_RGBA, GL_UNSIGNED_BYTE, sur.Pixels().crawptr().void());
    check_error();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,
      static_cast{int}(GL_NEAREST));
    check_error();
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
      static_cast{int}(GL_NEAREST));
    check_error();
  }
}

function void check_error()
{
  const v = glGetError();
  if (v == GL_NO_ERROR) {
    return;
  }
  sdllog(string_join{""}("error: ", static_cast{int}(v)));
  throw 0;
}

function void sdllog(cstrref const& mess)
{
  SDL_LogWarn(SDL_LOG_CATEGORY_TEST, mess);
}

{
  sdllog("PXC-SDL2 main");
  const ini = SDL_Init(SDL_INIT_VIDEO);
  int init_w = 800;
  int init_h = 800;
  SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
  mutable wflags = SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE
    | SDL_WINDOW_ALLOW_HIGHDPI;
  if (get_option("-f") == "1") { wflags |= SDL_WINDOW_FULLSCREEN; }
  const wnd = SDL_CreateWindow("PXC-SDL2", 0, 0, init_w, init_h, wflags).some;
  SDL_GL_GetDrawableSize(wnd, init_w, init_h);
  const glctx = SDL_GL_CreateContext(wnd);
  SDL_GL_SetSwapInterval(1);

  string_texture_info sti;
  init_program(sti);
  sdllog("PXC-SDL2 initialized");

  sdllog("PXC-SDL2 reshape");
  reshape(init_w, init_h);

  uint t0 = 0;
  uint t1 = 0;
  uint tprev = SDL_GetTicks();
  uint frames = 0;
  float mutable fps = 0.0;
  camera_angle = glm::make_quat_wxyz(1.0, 0.0, 0.0, 0.0);
  camera_pos = glm::make_vec3(0.0, 0.0, 10.0);

  metafunction ticks_t farray{uint, 5};
  ticks_t ticks;
  ticks_t ticks_sum;
  for (const i, mutable& e : ticks) {
    e = tprev;
  }
  function void save_ticks(size_t idx) {
    const prev_tick = ticks[idx == 0 ? ticks.size() - 1 : idx - 1];
    mutable& cur_tick = ticks[idx];
    cur_tick = SDL_GetTicks();
    ticks_sum[idx] += cur_tick - prev_tick;
  }

  buffer_object bo;
  {
    const t0 = system.gettimeofday_double();
    build_vertices(bo);
    const t1 = system.gettimeofday_double();
    bo.create_vbo();
    const t2 = system.gettimeofday_double();
    SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
      string_join{" "}("build vertex", t1 - t0, t2 - t1));
  }

  bool done = false;
  bool paused = false;
  function void camera_rotate(float x, float y, float z, float angle) {
    const qq = glm::make_quat_angle_axis(angle, x, y, z);
    camera_angle = (camera_angle * qq).normalize();
  }
  function void camera_move(float x, float y, float z) {
    camera_pos += camera_angle.to_mat3() * glm::make_vec3(x, y, z);
  }
  farray{bool, 2} fingdown;
  farray{size_t, 2} fingerdown_time;
  farray{glm::vec2, 2} start_pos;
  farray{glm::vec2, 2} cur_pos;
  glm::vec2 finger_xyrotate_delta;
  glm::vec2 finger_xymove_delta;
  float finger_zrotate_delta;
  float finger_zmove_delta;
  function void finger_motion(float x, float y, float dx, float dy,
    SDL_FingerID fng) {
    if (fng < 2) {
      size_t fid = static_cast{size_t}(fng);
      cur_pos[fid] = glm::make_vec2(x, y);
      /*
      SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
	  string_join{" "}("finger_motion", x, y, fng));
      */
    }
  }
  function void finger_down(float x, float y, SDL_FingerID fng) {
    if (fng < 2) {
      size_t fid = static_cast{size_t}(fng);
      fingdown[fid] = true;
      start_pos[fid] = glm::make_vec2(x, y);
      cur_pos[fid] = start_pos[fid];
      /*
      SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
	  string_join{" "}("finger_down", x, y, fid));
      */
      fingerdown_time[0] = 0;
      fingerdown_time[1] = 0;
    }
  }
  function void finger_up(SDL_FingerID fng) {
    if (fng < 2) {
      size_t fid = static_cast{size_t}(fng);
      fingdown[fid] = false;
      start_pos = cur_pos;
      fingerdown_time[0] = 0;
      fingerdown_time[1] = 0;
    }
  }
  function void finger_action_one_finger(size_t fid) {
    mutable dx = (cur_pos[fid].x - start_pos[fid].x);
    mutable dy = (cur_pos[fid].y - start_pos[fid].y);
    const d = glm::distance(start_pos[fid], cur_pos[fid]);
    if (d > 3.0) {
      dx /= d / 3.0;
      dy /= d / 3.0;
    }
    camera_rotate(1.0, 0.0, 0.0, -dy * 2.0);
    camera_rotate(0.0, 1.0, 0.0, -dx * 2.0);
  }
  function void finger_action_two_fingers() {
    const d0 = cur_pos[0] - start_pos[0];
    const d1 = cur_pos[1] - start_pos[1];
    if (glm::dot(d0, d1) < 0.0f) {
      const distance_start = glm::distance(start_pos[0], start_pos[1]);
      mutable distance_cur = glm::distance(cur_pos[0], cur_pos[1]);
      if (distance_cur <= 0.0001f) {
	distance_cur = 0.0001f;
      }
      const rat = distance_start / distance_cur;
      if (rat > 1.2) {
	finger_zmove_delta += 0.0001;
	if (finger_zmove_delta >= 0.01) {
	  finger_zmove_delta = 0.01;
	}
      } else if (rat < 0.8) {
	finger_zmove_delta -= 0.0001;
	if (finger_zmove_delta <= -0.01) {
	  finger_zmove_delta = -0.01;
	}
      }
    } else {
      const d0 = cur_pos[0] - start_pos[0];
      const d1 = cur_pos[1] - start_pos[1];
      mutable avg = (d0 + d1) / 2.0f;
      const d = (glm::distance(start_pos[0], cur_pos[0]),
	glm::distance(start_pos[1], cur_pos[0])) / 2.0f;
      if (d > 3.0) {
	avg /= d / 3.0;
      }
      avg /= 32.0f;
      camera_move(avg.x, -avg.y, 0.0);
    }
  }
  function void finger_action_step() {
    if (fingdown[0] && !fingdown[1]) {
      if (fingerdown_time[0] >= 2) {
	finger_action_one_finger(0);
      } else {
	start_pos[0] = (start_pos[0] + cur_pos[0]) / 2.0f;
	fingerdown_time[0] += 1;
      }
    } else if (!fingdown[0] && fingdown[1]) {
      if (fingerdown_time[1] >= 2) {
	finger_action_one_finger(0);
      } else {
	start_pos[1] = (start_pos[1] + cur_pos[1]) / 2.0f;
	fingerdown_time[1] += 1;
      }
    } else if (fingdown[0] && fingdown[1]) {
      if (fingerdown_time[0] >= 2 && fingerdown_time[1] >= 2) {
	finger_action_two_fingers();
      } else {
	start_pos[0] = (start_pos[0] + cur_pos[0]) / 2.0f;
	fingerdown_time[0] += 1;
	start_pos[1] = (start_pos[1] + cur_pos[1]) / 2.0f;
	fingerdown_time[1] += 1;
      }
    }
    camera_move(0.0, 0.0, finger_zmove_delta);
  }
  while (!done) {
    save_ticks(0);
    SDL_Event ev;
    while (SDL_PollEvent(ev)) {
      const etype = ev.type;
      if (etype == SDL_WINDOWEVENT) {
	if (ev.window.event == SDL_WINDOWEVENT_RESIZED) {
	  int w;
	  int h;
	  SDL_GL_GetDrawableSize(wnd, w, h);
	  reshape(w, h);
	  SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
	    string_join{""}("resized w=", w, " h=", h));
	}
      } else if (etype == SDL_FINGERMOTION) {
	finger_motion(ev.tfinger.x, ev.tfinger.y, ev.tfinger.dx, ev.tfinger.dy,
	  ev.tfinger.fingerId);
      } else if (etype == SDL_FINGERDOWN) {
	finger_down(ev.tfinger.x, ev.tfinger.y, ev.tfinger.fingerId);
      } else if (etype == SDL_FINGERUP) {
	finger_up(ev.tfinger.fingerId);
      } else if (etype == SDL_APP_WILLENTERBACKGROUND) {
	SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("paused"));
	paused = true;
      } else if (etype == SDL_APP_DIDENTERFOREGROUND) {
	SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("resumed"));
	paused = false;
	int w;
	int h;
	SDL_GL_GetDrawableSize(wnd, w, h);
	reshape(w, h);
      } else if (etype == SDL_QUIT) {
	done = true;
	break;
      }
    }
    if (paused) {
      SDL_Delay(100);
      continue;
    }
    save_ticks(1);
    {
      const mess = string_join{" "}(fps, camera_pos, camera_angle);
      draw_frame(bo, sti, mess);
      save_ticks(2);
      ++frames;
      uint t = SDL_GetTicks();
      if (t - t0 >= 1000) {
	const seconds = static_cast{float}(t - t0) / 1000.0;
	fps = static_cast{float}(frames) / seconds;
	/*
	SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
	  string_join{" "}(frames, "frames in", seconds, "seconds =",
	    fps, "fps"));
	SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
	  string_join{" "}("ticks: ", ticks_sum));
	*/
	ticks_sum = ticks_t();
	t0 = t;
	frames = 0;
      }
      mutable tdiff = static_cast{int}(tprev - t);
      tprev = t;
      if (tdiff < 900/60) {
	tdiff = 900/60;
      }
      while (tdiff >= 900/60) {
	tdiff -= 900/60;
	SDL_KeyboardState const ks;
	if (ks.Key(SDL_SCANCODE_ESCAPE) != 0) {
	  done = true;
	}
	if (ks.Key(SDL_SCANCODE_UP) != 0) {
	  if (ks.Key(SDL_SCANCODE_LCTRL) != 0) {
	    set_distance(perspective_distance + 0.01);
	    /*
	    SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("distance",
	      perspective_distance));
	    */
	  } else {
	    camera_rotate(1.0, 0.0, 0.0, 1.0);
	  }
	}
	if (ks.Key(SDL_SCANCODE_DOWN) != 0) {
	  if (ks.Key(SDL_SCANCODE_LCTRL) != 0) {
	    set_distance(perspective_distance - 0.01);
	    /*
	    SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("distance",
	      perspective_distance));
	    */
	  } else {
	    camera_rotate(1.0, 0.0, 0.0, -1.0);
	  }
	}
	if (ks.Key(SDL_SCANCODE_LEFT) != 0) {
	  camera_rotate(0.0, 1.0, 0.0, 1.0);
	}
	if (ks.Key(SDL_SCANCODE_RIGHT) != 0) {
	  camera_rotate(0.0, 1.0, 0.0, -1.0);
	}
	if (ks.Key(SDL_SCANCODE_SPACE) != 0) {
	  camera_move(0.0, 0.0, -0.02);
	}
	if (ks.Key(SDL_SCANCODE_LSHIFT) != 0) {
	  camera_move(0.0, 0.0, 0.02);
	}
	if (ks.Key(SDL_SCANCODE_A) != 0) {
	  camera_move(-0.02, 0.0, 0.0);
	}
	if (ks.Key(SDL_SCANCODE_D) != 0) {
	  camera_move(0.02, 0.0, 0.0);
	}
	if (ks.Key(SDL_SCANCODE_S) != 0) {
	  camera_move(0.0, -0.02, 0.0);
	}
	if (ks.Key(SDL_SCANCODE_W) != 0) {
	  camera_move(0.0, 0.02, 0.0);
	}
	if (ks.Key(SDL_SCANCODE_Z) != 0) {
	  camera_rotate(0.0, 0.0, 1.0, -1.0);
	}
	if (ks.Key(SDL_SCANCODE_X) != 0) {
	  camera_rotate(0.0, 0.0, 1.0, 1.0);
	}
	finger_action_step();
      }
    }
    save_ticks(3);
    SDL_GL_SwapWindow(wnd);
    save_ticks(4);
  }
  io::system._exit(0);
}

