
性能目安
(1478-t3)
mbpはzprepassあり、ios/androidはzprepassなし
mbp 2880x1800 macosx 60fps vtx8 72*32430 頂点 (778320 tri) (4670万tri/sec)
mbp 2880x1800 macosx 60fps vtx10 2250030 頂点 (750010 tri) (4500万tri/sec)
ipad air 24fps
iphone4s 7fps
xperia z ultra 30-45fps zprepassしたらさらに遅くなる
xperia gx 8-12fps
(1497-t2 20140802)
mbp 2880x1800 linux 60fps vtx8 81*32430 頂点 (875610 tri)
mbp 2880x1800 linux 60fps vtx10 2250030 頂点 (750010 tri)
  (use_instanced=0) use_instanced=0 is faster, but higher cpu usage

instancedレンダリング
96頂点のオブジェクトを25600個
mbp 2880x1800 60fps vtx? 96*25600 頂点 (819200 tri) (4915万tri/sec)
instancedしなかったらちょうど30fpsだった。
改良の余地:
(1) shadowmapping, zprepass, mainで3回glBufferDataするのは無駄 (done)
(2) インスタンス毎にmat4を渡すより、vec3とquatを渡すほうが軽い
(3) glMapBuffer使ってコピーを避けたほうが速いかもしれない

deferred
1479-t2 ok
1485-t5 ok
1489-t2 ng
1490-t5 ng
1495-t1 復活

TODO:
- buffer_objectを複数つくる。nodeをinstance化するときにどのboで描画
  するのかを記録。
- primitive restartを使えるときには使う。頂点データ減らせる。
- 慣性飛行
- 衝突判定
- 画面上にボタン
- ポイントスプライト
- 配列uniformでインスタンスデータを渡す方法でinstanced
- use_instancedでないときはshadowmap_mvp
- instancedを試す
- geometry shader試してみる
- geometry shaderを使ったポイントスプライト
- shadowmapをウインドウと同じサイズに
- shadowmapには頂点属性のpositionだけわたせばよい
- depth_texture使えるときに使う 
- androidでhighpためす
- 法線を軸に回転し押し出し(側面は四角形にならない)
  - 押し出さないで双方蓋をする
  - 押し出さないで描画もしない
- 押し出し、縦横それぞれ異なる比率で拡大縮小
- 単純な押し出しはモディファイヤをパラメータに取る。
- フラグメントシェーダが単純なときのiOSでの性能見る
- 物体が遠いときは細かい部分は描かない仕組み
  - ディテールは頂点配列の後ろのほうに寄せる。
  - 距離に応じて頂点配列の途中までをglDrawElementsする。
- シェーダ構造体を作る。uniformとattributeをフィールドとして持つ
  - あとはglutilにshaderを渡してattributeの設定をgenericに
- 文字列表示はタイルベースのテクスチャマップを使えば高速化できる
  ポイントスプライトのほうがよい？
- normalを頂点ごとに
- vertexの比較を止めて、polygonの三角形分割をそのままつっこむ?
  - normalを頂点ごとにもたせれば頂点共通化しやすいので現状のほうがよい？
- androidでベンチマーク


glgeometry:
- 回転により膨らませる
  - 一辺を軸として回転により膨らませる
  - 一頂点に接する線分を軸として回転により膨らませる
  - 多角形の外部にある線分を軸として回転により膨らませる
- ひねる
  - 膨らませてひねる
  - 凸多角形の各辺の中点を頂点とする内接多角形
- dup
- 多角形頂点のスタックor配列にpushするfuncobj, それをpopするfuncobj

[基本の正多角形]
パラメータ: 頂点の数

[四角形等分割]
パラメータ: n, m
縦横n, m倍に分割する

[三角形分割]
三角形を一辺に平行な線分で複数に分割
パラメータ: 頂点, 分割数

[筒]
パラメータ: yz点列(y>0, zでソート)
yの値は倍率、
奥の面は元平面と同一
手前の面は元平面のzをずらせたもの
各頂点の手前と奥を長方形で結ぶ

(変換結果、四角形が平面にならない場合はどうするか？)
三角形に分割。どちらに分割するするかはパラメータで指定

------------------------
 \                    /
  \                  /
   \                /
    ----------------
UV 左上が(0,0), 右下が(1,1)

五角形以上は三角形の扇に分割し、底辺を(0,0)-(1,0)、頂点を(1,0)
例えば底辺に水平なラインを入れる法線マップ

生成する多角形と、基準となる向きを指定する変換行列も出力

筒を作るときは、各辺を伸ばした平面のUVの向きをパラメータとして取る。

テクスチャ・法線マップ
  +-----+
  |\ 3 /|
  | \ / |
  |2 x 1|
  | / \ |
  |/ 0 \|
  +-----+
3x3のビットマップから変換するか？
  -3-
  2-1
  -0-
2x2のビットマップから変換するか？
  23
  01


[子オブジェクト]
基本姿勢の位置への変換行列
可動部パラメータが与えられるとさらに変換

[]
与えられた面の中心を取る
面の基底は、
 (v0, v1)がEy
 (v1, v2)がEx
 その外積がEz

- 複数の子フラグメントのn番めにだけ適用したい、とかどうするか

tupleから引くのではなく、関数の合成としてデータを式で書けるようにしたい。
const geo =
  regular_polygon(2.0, 10,
    bump(0.3, 0.7, 3,
      bump(0.01, 0.9, 1, draw(), ()),
      fill()),
    bump(0.01, 0.9, 1, fill(), fill()));
regular_polygon等は関数ではなく関数オブジェクト。

/* 引数poly、返値voidの関数オブジェクト */
interface gfunc {
  function void __call(cslice{vec3} const& poly);
}

struct regular_polygon(float radius, size_t n, gfunc const& c0,
  gfunc const& c1) <gfunc>
{
  function void __call(cslice{vec3} const& poly) {
    ...
    c0(poly0);
    ...
    c1(poly1);
  }
}

glgeometryの関数はpoly_t以外を引数に取ることもあるかも
そうであっても最後の引数だけ未評価の関数オブジェクトをpublicに

カメラ位置と方向
vec3 camera_pos
quat camera_angle (長さは常に1)

対象の位置と方向とスケール
vec3 pos
quat angle_scale
mat4().translate(pos).multiply(angle_scale);

struct gobject_node {
  vec3 pos;
  quat angle_scale;
  size_t gobject_id;
  varray{ptr{gobject_node}} children;
}
drawではloc_mvpとloc_normal_matrix

edgeの変換行列を作る方法
多角形の中心を(px, py, pz)
最初の頂点から、反対側の頂点への線分をEx
法線ベクトルがEy
外積取ってEz
(Ex, Ey, Ez)
transform(px, py, pz)
mat3(Ex, Ey, Ez)

タイル
16x16のタイルが16x16個。(0,0)のタイルはフラット塗りつぶし。
各頂点のuvの下位4bitはタイル座標(xyそれぞれ0-16)を表す。
頂点シェーダがそれをテクスチャの座標へ変換
各頂点uvの8bitでタイル繰り返し回数を指定する
頂点シェーダからフラグメントシェーダへ渡すデータ:
  varying vec2 tile;
  varying vec2 tile_rep;
tileは四角形の頂点で1ずつ異なる値を持つ。
フラグメントシェーダでtile.xとtile.yをfloor()を取って
整数部分がタイル番号、小数部分をtile_rep倍してfract()
  vec2 tile0 = floor(tile);
  vec2 tile_fract = fract((tile - tile0) * tile_rep);
  vec2 uv = (tile0 + tile_fract) * 16.0;

512x512解像度、32x32のタイルを16回リピート
uv1: 0..512
uvi: 0..512 整数

ドット絵作成方法
32x32のタイル、偶数行タイルには法線マップ、奇数行タイルは色。
イメージをロードするときに合成しテクスチャにする。

メモ: FBOでシャドウマップ
(0) depth buffer用テクスチャ
マップの大きさ(sm_width, sm_height)とする。
glGenTextures(1, &dbuf);
glBindTexture(GL_TEXTURE_2D, dbuf);
glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT, sm_width, sm_height, 0,
  GL_DEPTH_COMPONENT /* ??? */, GL_UNSIGNED_BYTE /* ??? */, 0);
glBindTexture(GL_TEXTURE_2D, 0);
(1) テクスチャへ描画するための準備
glGenFramebuffers(1, &fb);
glBindFramebuffer(GL_FRAMEBUFFER, fb);
glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D,
  dbuf, 0); /* FBOにテクスチャをアタッチする */
glDrawBuffer(GL_NONE); /* カラーは描かなくてよいのでNONE */
glReadBuffer(GL_NONE); /* glReadPixelsで読まないのでNONE? */
glBinfFramebuffer(GL_FRAMEBUFFER, 0);
(2) 描画
glBindFramebuffer(GL_FRAMEBUFFER, fb);
glClear(GL_DEPTH_BUFFER_BIT);

https://www.opengl.org/registry/specs/ARB/depth_texture.txt

depth_textureが無い場合はRGBA値に書き込めばいい

シャドウマップ参照
シャドウマップの時のmvp行列で頂点を変換する。
xyzそれぞれ(-1,1)から(0,1)へ変換
テクスチャを引く
引いた値とz値を比較、不一致なら影


vtx8 300x300 48fps

遅延シェーディングする価値があるかどうか
 - 後段で複雑なことをするかどうか
 - フラグメントシェーダが空のときの描画速さ
 - GL_RBG32Fテクスチャに書き込む速さ
z-prepassする価値があるか
 - 後段で複雑なことをするかどうか
 - フラグメントシェーダ無駄打ちをなくすかわりに頂点シェーダをもう一回回す
   ほうがよいなら
 - GL_RGB32Fテクスチャ読み書きより頂点シェーダもう一度回すほうが速いなら
   遅延シェーディングよりz-prepassのほうがよい(複雑なことしないなら)
 - 深さによってフラグメントシェーダを切り替えるのに使えるか
   -> subroutineが使えればそっちのほうがよい？
 
z-prepass
  glEnable(GL_DEPTH_TEST);
  /* 1st */
  glDepthMask(GL_TRUE);
  glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);
  glDepthFunc(GL_LESS);
  /* 2nd */
  glDepthMask(GL_FALSE); /* デプスバッファに書き込まない */
  glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
  glDepthFunc(GL_EQUAL);
z-prepass適用前: mbp vtx8 200x200 カメラのアングルによっては30fps
z-prepass適用後: カメラのアングルによらず60fps安定する

遅延シェーディング
  /* 1st */
  シェーダは以下の属性を2ndへそのままま渡す
    "attribute vec3 position;\n",
    "attribute vec3 normal;\n",
    "attribute vec4 tangent;\n",
    "attribute vec3 uvw;\n",
  1st用のフレームバッファを作る
  glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, ...)
  glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT1, ...)
  glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT2, ...)
  glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT3, ...)
  glDrawBuffers(3, {GL_COLOR_ATTACHMENT0, ...});
  フラグメントシェーダではgl_FragColorではなくgl_FragData[0]...を書く
  /* 2nd */
  全面を覆う四角形を書く。
  フラグメントシェーダではtexture2D()を繰り返して属性を取り出す

z-prepass適用: mbp vtx8 200x200 60fps安定する
遅延シェーディング適用: 20fps程度、あまり安定せず。1st passでの
  テクスチャへの書き込みコストがあるために変動するということか？

ポイントスプライト

GL_POINT_SIZE_MAXの大きさが限界

instanced試す
  位置と向きをインスタンス属性にする。
  インスタンス属性につてglVertexAttribDivisorを1にする。
  glDrawElementsInstancedで書く前に、インスタンス属性にglBufferData
  で突っ込む
  頂点シェーダに、model行列の前に位置と向きを適用する処理を追加
  (あるいはmodel行列をインスタンス属性にする?)
- mvpをuniformで渡すのではなく、vpを渡す。シェーダがmとvpをposに適用する
- modelをuniformではなくattributeにする
- nodeをsortごとにinstancedレンダリングする関数
  1. nodeを再帰的に舐めてインスタンス属性(model行列)の配列を作る
  (instancedを使う場合)
  glBindBuffer(GL_ARRAY_BUFFER, &model_mat_vbo);
  glBufferData(GL_ARRAY_BUFFER, ...);
  glEnableVertexAttribArray(loc_model_mat);
  glVertexAttribPointer(loc_model_mat, ...);
  glVertexAttribDivisor(loc_model_mat, 1); // 頂点属性と違うのはここだけ
  glDrawElementsInstanced(...);
  (instancedを使わない場合)
  for (i) {
    glVertexAttrib4fv(loc_model_mat, 配列[i]);
    glDrawElements(...);
  }

タイル化
  vec2 uv1 = (vary_uvw.xy / vary_uvw.z + 0.5) * 256.0;
  vec2 uvi = floor(uv1);   uv座標の整数部分 (0, 0)-(256, 256)
  vec2 uvj = uv1 - uvi;    uv座標のサブピクセル (0.0, 0.0)-(1.0, 1.0)
  vec2 uvi_fr = fract(uvi / 32.0) * 32.0; uv非タイル部分
  vec4 c0 = texture2d(sampler, uvi_fr / 128.0);
  以下のように変更
  タイルの大きさ32x32、タイルマップ128x128とする
  vec2 uv0 = vary_uvw.xy / vary_uvw.z; (0-4)などの範囲
  vec2 uv_tm = floor(uv0); (0-4)範囲整数。タイルのxy番号
  vec2 uv_tmfr = uv0 - uv_tm; (0-1)範囲。タイルの中の座標
  vec2 uv_ti = uv_tmfr * tile_size; (0-32)範囲。
  vec2 uvi = floor(uv_ti); (0-32)範囲整数。タイルの中の座標
  vec2 uvj = uv_ti - uvi; (0-1)範囲。サブピクセル座標
  vec4 ti = texture2d(sampler_tilemap, uv_tm / tilemap_size);
    (0-1)範囲。タイルテクスチャ位置を返す
  vec4 uv_tileconv = floor(ti.xy * 255.0 + 0.5) + uv_tmfr;
    使うのは(0-128)範囲。タイルテクスチャ位置と中の座標
  vec4 c0 = texture2d(sampler, uv_tileconv / tiletex_size);\n"

  vec2 uv1 = (vary_uvw.xy / vary_uvw.z + 0.5) * 4096.0;
  vec2 uvi = floor(uv1);   uv座標の整数部分 (0, 0)-(4096, 4096)
  vec2 uvj = uv1 - uvi;    uv座標のサブピクセル (0.0, 0.0)-(1.0, 1.0)
  uvi /= 32.0;
  vec2 uvi_tile = floor(uvi);    uvタイル部分 (0, 0)-(128, 128)
  vec2 uvi_fr = uvi - uvi_tile;  uv非タイル部分
  vec4 ti = texture2d(sampler_tilemap, uvi_tile / 128.0);
  vec2 uvi_tileconv = floor(ti * 255.0 + 0.5) + uvi_fr;  非タイル部分も加算
                   値としては(0, 0)-(256.0, 256.0)取れるが全部は使わない
                   これを32倍するとテクスチャのピクセル座標になる
  vec c0 = texture2d(sampler, uvi_tileconv / (1024.0 / 32.0));
                   テクスチャのサイズが1024x1024のとき

dpat.xcf
  32x32テクスチャ 一行めに法線情報、二行目にdiffuse色、三行目にemit色
  法線情報は0から8までの値しか使っていない
  16以上の値はエミッションにする。
  16: 常時点灯
  17-20: uniform float emit_brightness[4]; の値を掛ける
法線情報
  0: (標準) 000000
  1: (左上) ff0000
  2: (上)   00ff00
  3: (右上) ffff00
  4: (右)   0000ff
  5: (右下) ff00ff
  6: (下)   00ffff
  7: (左下) ffffff
  8: (左)   808080

 16: 点灯   8080c0

必要なタイル
  面の一部分に凸がある
  横または縦に非光沢黒色の帯、一部にエミッション

alv再整理
xyは正が右上
u, vはそれぞれtangent, binormalの正方向への傾き
lefttop: y>x
leftbottom: y+x<1
1: 凸左下 lefttopなら-u、そうでないなら-v
2: 凸下 -v
3: 凸右下 leftbottomなら-v、そうでないなら+u
4: 凸右 +u
5: 凸右上 lefttopなら+v、そうでないなら+u
6: 凸上 +v
7: 凸左上 leftbottomなら-u、そうでないなら+v
8: 凸左 -u
凹をどう実現するか
x1: 凹左下 lefttopなら+u、そうでないなら+v
法線の傾ける方向をuv共に凸のときと反対向きにすればよい
alvの上位ビットに傾きの大きさと正負を持たせる。
下位ビットはできるだけ集約
2と6、4と8は互いに反対向きなので片方でよい
無条件傾きuv、leftbottom傾きuv、lefttop傾きuvの3つの値を提供すればよいか
各6bit、16が中央

バッテン型テクスチャマップのほうがよいか？iosで性能を試せ。


ivec4 avlv = ivec4(avl1, avl3, avl5, alv7)
ut1 += avlv * ivec4(-lt, 1-lb, 1-lt, -lb);
vt1 += avlv * ivec4(lt-1, -lb, lt, 1-lb);

色は黄緑だからテクスチャの端のピクセルを引いている
法線パタンは引いたピクセルのAを見るから、端のパターン(斜め面取り)を見ている
ピクセルの端で法線の向きがおかしいのはlb/luの判定が内側と異なるからのはず

狙ったピクセルを引く方法、例えば128x128のテクスチャ
coordを[0,128)の値とする
coord = clamp(floor(coord) + 0.5, 0.5, 127.5);

http://gamedev.stackexchange.com/questions/46963/how-to-avoid-texture-bleeding-in-a-texture-atlas

c04040 凹左上
c0c040 凹右上
c0f0c0 凹右下
C0C0C0 凹左下

ポイントスプライト
glEnable(GL_VERTEX_PROGRAM_POINT_SIZE); // gl_PointSizeによる指定が有効になる
glEnable(GL_POINT_SPRITE); // gl_PointCoordが使えるようになる
頂点シェーダ
gl_Position = ...
gl_PointSize = ...
フラグメントシェーダ
vec2 xy = gl.PointCoord * 2.0 - 1.0; // (-1.0, 1.0)範囲にする
gl_FragColor = ...

複数bufferobject対応
instantiate_sceneはbuffer_objectのtupleを引数に取る。
bo.get_by_idを
