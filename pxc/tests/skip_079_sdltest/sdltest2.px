public namespace sdltest2 "use-unsafe";
import common -;
import SDL2::api_base -;
import SDL2::api_types -;
import SDL2::api_functions -;
import SDL2::api_wrappers -;

metafunction SDL_CreateWindow_Scoped
  scoped{SDL_CreateWindow, SDL_DestroyWindow};
metafunction SDL_LoadBMP_RW_Scoped
  scoped{SDL_LoadBMP_RW, SDL_FreeSurface};
metafunction SDL_CreateRenderer_Scoped
  scoped{SDL_CreateRenderer, SDL_DestroyRenderer};
metafunction SDL_CreateTextureFromSurface_Scoped
  scoped{SDL_CreateTextureFromSurface, SDL_DestroyTexture};
metafunction SDL_RWFromFile_Scoped
  scoped{SDL_RWFromFile, SDL_RWclose};

{
  SDL_Init(SDL_INIT_VIDEO);
  const wnd = SDL_CreateWindow_Scoped("sdltest",
    0, 0, 640, 480, SDL_WINDOW_RESIZABLE);
  const rnd = SDL_CreateRenderer_Scoped(wnd, -1, 0);
  const rw = SDL_RWFromFile_Scoped("test.bmp", "rb");
  const sur = SDL_LoadBMP_RW_Scoped(rw, 0);
  const tx = SDL_CreateTextureFromSurface_Scoped(rnd, sur);
  SDL_Rect src;
  src.x = 0;
  src.y = 0;
  src.w = 200;
  src.h = 170;
  mutable dst = src;
  SDL_RenderCopy(rnd, tx, caddress(src), caddress(dst));
  bool done = true;
  int x = 0;
  while (!done) {
    SDL_Event ev;
    while (SDL_PollEvent(address(ev)) != 0) {
      if (ev.type == SDL_QUIT) {
	done = true;
	break;
      }
    }
    SDL_RenderClear(rnd);
    x = (x + 1) & 127;
    dst.x = (x >= 64) ? 128 - x : x;
    SDL_RenderCopy(rnd, tx, caddress(src), caddress(dst));
    SDL_RenderPresent(rnd);
    SDL_Delay(5);
  }
}

