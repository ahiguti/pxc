public namespace glgeometry "export-unsafe";
public import common -;
public import exception -;
public import meta m;
public import glutil -;
public import dvalue -;
public import GL::glm -;
public import numeric::fpmath -;
public import operator op;

public metafunction poly_t cslice{vec3};
public metafunction gfptr callable_ptr{void, {poly_t}};
public metafunction to_gfptr{f}
  make_callable_ptr{f, m::sub{m::size{m::args{f}}, 1}};

public metafunction regular_polygon to_gfptr{gf_regular_polygon};
public metafunction bump to_gfptr{gf_bump};
public metafunction edge to_gfptr{gf_edge};
public metafunction fill to_gfptr{gf_fill};
public metafunction hole to_gfptr{gf_hole};

/* private */

private threaded function float pi()
{
  return 3.14159265;
}

private threaded function void polygon_scale(darray{vec3} mutable& poly,
  float scale)
{
  const c = polygon_center(poly);
  for (const i, mutable& p: poly) {
    p = c + ((p - c) * scale);
  }
}

private threaded function vec3 polygon_center(cslice{vec3} const& poly)
{
  vec3 mutable c;
  for (const i, const& p: poly) {
    c += p;
  }
  c /= static_cast{float}(poly.size());
  return c;
}

private threaded function void gf_regular_polygon(float radius, size_t n,
  gfptr const& c0, gfptr const& c1, poly_t const& poly)
{
  mutable arr = darray{vec3}(n, vec3());
  for (const i: 0 .. n) {
    const a = (static_cast{float}(i) * 2.0f * pi()) / static_cast{float}(n);
    arr[i].x = sin(a) * radius;
    arr[i].y = -cos(a) * radius;
    arr[i].z = 0.0f;
  }
  c0(arr);
  reverse(arr.range());
  c1(arr);
}

private threaded function void gf_bump(float z, float scale, int recurse,
  gfptr const& c0, gfptr const& c1, poly_t const& poly)
{
  if (poly.size() < 3) { return; }
  darray{vec3} front = poly;
  const nor = -cross(poly[1] - poly[0], poly[2] - poly[0]).normalize();
  for (const i, mutable& e: front) {
    e -= nor * z;
  }
  polygon_scale(front, scale);
  /* front */
  if (recurse > 1) {
    gf_bump(z, scale, recurse - 1, c0, c1, front);
  } else {
    c0(front);
  }
  /* side */
  const sz = front.size();
  for (const i: 0 .. sz) {
    const i1 = i + 1 != sz ? i + 1 : 0;
    const side = make_farray{vec3}(front[i], poly[i], poly[i1], front[i1]);
    c1(side);
  }
}

private threaded function void gf_edge(ptr{vertices} const& vptr,
  size_t edge_sort, gfptr const& c0, poly_t const& poly)
{
  if (poly.size() < 3) { return; }
  const ex = (poly[1] - poly[0]).normalize();
  const ez = -cross(poly[1] - poly[0], poly[2] - poly[0]).normalize();
  const ey = cross(ex, ez);
  node_edge e;
  const c = polygon_center(poly);
  mat4 tr;
  tr = tr.translate(c);
  tr = tr * make_mat4(
    ex.x, ex.y, ex.z,  0.0, 
    ey.x, ey.y, ey.z,  0.0,
    ez.x, ez.y, ez.z,  0.0,
     0.0,  0.0,  0.0,  1.0);  
  e.trans = tr;
  e.edge_sort = edge_sort;
  vptr->push_edge(e);
  c0(poly);
}

private threaded function void gf_fill(ptr{vertices} const& vptr,
  poly_t const& poly)
{
  const sz = poly.size();
  if (sz < 3) { return; }
  const nor = -cross(poly[1] - poly[0], poly[2] - poly[0]).normalize();
  mutable vtxs = darray{vertex}(sz, vertex());
  for (const i: 0 .. sz) {
    mutable& v = vtxs[i];
    v.position = poly[i];
    v.normal = nor;
    v.uv = vec2();
  }
  for (const i: 0 .. sz - 2) {
    vptr->push_vertex(vtxs[0]);
    vptr->push_vertex(vtxs[i + 1]);
    vptr->push_vertex(vtxs[i + 2]);
  }
}

private function void gf_hole(poly_t const& poly)
{
}

