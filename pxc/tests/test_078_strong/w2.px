public namespace w2;
import common -;
import pointer::strong -;

private threaded struct node () {
  public option{ptr{strong_count{node}}} next;
  public option{ptr{strong_count{node}}} prev;
  public string str;
}

public threaded struct arena {
  public varray{strong{ptr{strong_count{node}}}} nodes;
  public function ptr{strong_count{node}} create() {
    const p = make_ptr(strong_count(node()));
    nodes.push_back(strong(p));
    return p;
  }
}

{
  mutable option{ptr{strong_count{node}}} op;
  {
    arena ar;
    const p0 = ar.create();
    const p1 = ar.create();
    const p2 = ar.create();
    p0->value.str = "abc";
    p1->value.str = "xyz";
    p2->value.str = "hoge";
    p0->value.next.some = p1;
    p1->value.prev.some = p0;
    p1->value.next.some = p2;
    p2->value.prev.some = p1;
    // println(ar); -- causes infinite recursion
    op.some = p1;
  }
  println(op.some);
}

