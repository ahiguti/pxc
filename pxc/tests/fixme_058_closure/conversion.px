public namespace string::conversion;
public import core::numeric::integral -;
public import core::container::string -;
public import core::meta m;
public import core::meta::family mf;
public import core::numeric::cast n;
public import string::positional p;
public import string::serialize -;
public import string::deserialize -;
public import string::url_encode u;

public pure function {t} string to_string(t const& x)
{
  if (is_string_or_slice_type{t}) {
    return x;
  } else {
    string s;
    serialize_to_string(x, s);
    return s;
  }
}

public pure function {t} void serialize_to_string(t const& x, string& out)
{
  serialize{serialize_tpl, t}(x, out);
}

public pure function {t} t from_string(cstrref const& s)
{
  if (is_string_or_slice_type{t}) {
    return s;
  } else {
    cstrref s1 = s;
    size_t epos;
    return deserialize_from_string{t}(s1, epos);
  }
}

public pure function {t} t deserialize_from_string(cstrref& s,
  size_t& epos_r)
{
  return deserialize{deserialize_tpl, t}(s, epos_r);
}

private pure function void bool_to_string(bool v, string& buf)
{
  if (v) {
    buf.append("true");
  } else {
    buf.append("false");
  }
}

private pure function {t} void string_append_escape(t const& x, string& v)
{
  u::url_encode(v, x);
}
private pure function {t} void string_append_noesc(t const& x, string& v)
{
  v.append(x);
}
private pure function void string_append_brace_open(string& v)
{ v.push_back('{'); }
private pure function void string_append_brace_close(string& v)
{ v.push_back('}'); }
private pure function void string_append_comma(string& v)
{ v.push_back(','); }
private pure function void string_append_none(string& v)
{ }
private pure function {t} void string_append_star(t const& x, string& v)
{ v.push_back('*'); }
private pure function {t} void string_append_unknown(t const& x, string& v)
{ v.push_back('?'); }

private pure struct serialize_tpl {
  metafunction target_type string;
  metafunction symstr{t} m::concat{t, "_append_to_string"};
  metafunction sym{t} m::symbol{m::nsof{t}, symstr{t}};
  metafunction has_specialized_symbol{t}
    m::eq{m::to_string{sym{t}}, symstr{t}};
  metafunction specialized_func{t}
    m::cond{has_specialized_symbol{t}, sym{t},
    m::cond{is_string_or_slice_type{t}, string_append_escape{t},
    m::cond{n::is_integral{t}, p::integral_to_decimal,
    m::cond{n::is_fp{t}, p::fp_to_decimal,
    m::cond{m::eq{t, bool}, bool_to_string,
    m::cond{m::eq{t, unit}, string_append_star,
    0}}}}}};
  metafunction array_begin string_append_brace_open;
  metafunction array_end string_append_brace_close;
  metafunction array_sep string_append_comma;
  metafunction map_begin string_append_brace_open;
  metafunction map_end string_append_brace_close;
  metafunction map_sep string_append_comma;
  metafunction map_entry_begin string_append_none;
  metafunction map_entry_end string_append_none;
  metafunction map_entry_sep string_append_comma;
  metafunction pointer_begin string_append_brace_open;
  metafunction pointer_end string_append_brace_close;
  metafunction struct_begin string_append_brace_open;
  metafunction struct_end string_append_brace_close;
  metafunction struct_sep string_append_comma;
  metafunction struct_entry_begin string_append_none;
  metafunction struct_entry_end string_append_none;
  metafunction struct_entry_sep string_append_comma;
  metafunction struct_field_name string_append_noesc;
  metafunction union_begin string_append_brace_open;
  metafunction union_end string_append_brace_close;
  metafunction union_entry_sep string_append_comma;
  metafunction union_field_name string_append_noesc;
  metafunction unknown{fam} string_append_unknown;
}

private pure function size_t token_length(cstrref const& s)
{
  for (size_t i, uchar ch : s) {
    if (ch == '{') {
      if (i == 0) {
        return find_brace_close(s[1 .. s.size()]) + 1;
      } else {
        return i;
      }
    }
    if (ch == '}' || ch == ',') {
      return i;
    }
  }
  return s.size();
}
private pure function size_t find_brace_close(cstrref const& s)
{
  size_t level = 1;
  for (size_t i, uchar ch : s) {
    if (ch == '}') {
      if (--level == 0) {
        return i + 1;
      }
    } else if (ch == '{') {
      ++level;
    }
  }
  return s.size();
}
private pure function {t, f} t string_parse_token(cstrref& s)
{
  size_t const toklen = token_length(s);
  cstrref stok = s[0 .. toklen];
  s.pop_front(toklen);
  return f(stok);
}
private pure function string string_parse_string_unescape(cstrref& s)
{
  pure function string decode(cstrref const& stok) {
    string r;
    u::url_decode(r, stok);
    return r;
  }
  return string_parse_token{string, decode}(s);
}
private pure function {t} t string_parse_integral(cstrref& s)
{
  string_parse_token{t, p::decimal_to_integral{t}}(s);
}
private pure function {t} t string_parse_fp(cstrref& s)
{
  string_parse_token{t, p::decimal_to_fp{t}}(s);
}
private pure function bool string_parse_bool(cstrref& s)
{
  pure function bool parse_bool(cstrref const& stok) {
    if (stok == "true") {
      return true;
    } else {
      return false;
    }
  }
  return string_parse_token{bool, parse_bool}(s);
}
private pure function void string_parse_symbol(cstrref& stok, cstrref& s)
{
  size_t const sz = stok.size();
  size_t const toklen = token_length(stok);
  stok.pop_back(sz - toklen);
  s.pop_front(toklen);
}
private pure function bool string_parse_char_cond(cstrref& s, uchar ch)
{
  if (s.size() > 0 && s[0] == ch) {
    s.pop_front(1);
    return true;
  } else {
    return false;
  }
}
private pure function void string_parse_brace_close_skip(cstrref& s)
{
  size_t level = 1;
  for (size_t i, uchar ch : s) {
    if (ch == '}') {
      if (--level == 0) {
        s.pop_front(i + 1);
        return;
      }
    } else if (ch == '{') {
      ++level;
    }
  }
}
private pure function void string_parse_token_skip(cstrref& s)
{
  size_t const toklen = token_length(s);
  s.pop_front(toklen);
}
private pure function bool string_parse_brace_open_cond(cstrref& s)
{ return string_parse_char_cond(s, '{'); }
private pure function bool string_parse_brace_close_cond(cstrref& s)
{ return string_parse_char_cond(s, '}'); }
private pure function bool string_parse_comma_cond(cstrref& s)
{ return string_parse_char_cond(s, ','); }
private pure struct deserialize_tpl {
  metafunction source_type cstrref;
  metafunction symstr{t} m::concat{t, "_parse_from_string"};
  metafunction sym{t} m::symbol{m::nsof{t}, symstr{t}};
  metafunction has_specialized_symbol{t}
    m::eq{m::to_string{sym{t}}, symstr{t}};
  metafunction specialized_func{t}
    m::cond{has_specialized_symbol{t}, string_parse_token{t, sym{t}},
    m::cond{is_string_or_slice_type{t}, string_parse_string_unescape,
    m::cond{n::is_integral{t}, string_parse_integral{t},
    m::cond{n::is_fp{t}, string_parse_fp{t},
    m::cond{m::eq{t, bool}, string_parse_bool,
    m::cond{m::eq{t, unit}, string_parse_token_skip,
    0}}}}}};
  metafunction array_begin_cond string_parse_brace_open_cond;
  metafunction array_end_cond string_parse_brace_close_cond;
  metafunction array_sep_cond string_parse_comma_cond;
  metafunction map_begin_cond string_parse_brace_open_cond;
  metafunction map_end_cond string_parse_brace_close_cond;
  metafunction map_sep_cond string_parse_comma_cond;
  metafunction map_entry_sep_cond string_parse_comma_cond;
  metafunction pointer_begin_cond string_parse_brace_open_cond;
  metafunction pointer_end_cond string_parse_brace_close_skip;
  metafunction struct_begin_cond string_parse_brace_open_cond;
  metafunction struct_end_cond string_parse_brace_close_cond;
  metafunction struct_sep_cond string_parse_comma_cond;
  metafunction struct_entry_sep_cond string_parse_comma_cond;
  metafunction struct_field_name string_parse_symbol;
  metafunction union_begin_cond string_parse_brace_open_cond;
  metafunction union_end_cond string_parse_brace_close_cond;
  metafunction union_sep_cond string_parse_comma_cond;
  metafunction union_entry_sep_cond string_parse_comma_cond;
  metafunction union_field_name string_parse_symbol;
  metafunction unknown{fam} string_parse_token_skip;
}

