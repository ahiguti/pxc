namespace vtest2;
import variant -;
import common -;
import meta::common m;
import numeric::cast n;
import exception::common -;
import string::positional -;
import downcast -;

multithreaded struct foo(int x) {
  int val = x;
  function void add(int x) { val += x; }
  function int get() const { return val; }
  function int func1(int& x, long const& y) {
    x = val;
    val += n::static_cast{int, long}(y);
    return val;
  }
}

function variant io(cslice{variant} const& args)
{
  return to_variant{io::ioptr}(io::io);
}

function variant io_file_open(cslice{variant} const& args)
{
  return variant();
}

function void test1() {
  variant v;
  v.longval = 3;
  v.stringval = "abc";
  println(v);
  v.ptrval = ptr{stub_object{foo}}(stub_object{foo}(foo(99)));
  farray{variant, 1} arg;
  arg[0].longval = 9;
  v.ptrval->invoke("add", arg); // 99 + 9
  variant x = v.ptrval->invoke("get", arg[0 .. 0]);
  println(x);
  var fi = stub_object{foo}(foo(33));
}

function void test2() {
  metafunction prefix_a{x} m::concat{"a", x};
  metafunction ss m::map{m::seq{5}, prefix_a};
  metafunction drop_1{x} m::substring{x, 1};
  metafunction sss m::map{ss, drop_1};
  println(m::to_string{sss});
}

function void test3()
{
  var f = stub_object{foo}(foo(123));
  println(m::full_string{to_non_ephemeral{cslice{int}}});
  // dump_arginfo{foo}();
}

test1();
# test2();
test3();

