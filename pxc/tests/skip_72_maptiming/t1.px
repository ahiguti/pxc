namespace t1;
import common -;
import numeric::cast -;
import meta::common m;
import io -;
import io::time -;

function {tvec, tchar} size_t r1()
{
  size_t r = 0;
  for (size_t i : 0 .. 10000) {
    tvec v;
    for (size_t j : 0 .. 20000) {
      v.push_back(static_cast{tchar, size_t}(j));
    }
    r += v.size();
  }
  return r;
}

function extern "::r2" size_t r2();
function extern "::r3" size_t r3();

extern "implementation" inline
#include <vector>

size_t r2()
{
  size_t r = 0;
  for (size_t i = 0; i < 10000; ++i) {
    std::vector<unsigned char> v;
    for (size_t j = 0; j < 20000; ++j) {
      v.push_back(static_cast<unsigned char>(j));
    }
    r += v.size();
  }
  return r;
}

size_t r3()
{
  size_t r = 0;
  for (size_t i = 0; i < 10000; ++i) {
    std::string v;
    for (size_t j = 0; j < 20000; ++j) {
      v.push_back(static_cast<char>(j));
    }
    r += v.size();
  }
  return r;
}

;

function {f} void timing()
{
  println(m::full_string{f});
  for (size_t i : 0 .. 5) {
    double const t0 = gettimeofday_double(system);
    size_t r = f();
    double const t1 = gettimeofday_double(system);
    println(r);
    println(t1 - t0);
  }
}

timing{r1{string, uchar}}();
timing{r1{vector{uchar}, uchar}}();
timing{r1{vector{char}, char}}();
timing{r2}();
timing{r3}();

