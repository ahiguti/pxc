
// vim:sw=2

public namespace perl;
public import core::common -;
public import core::meta m;
public import core::meta::symbol;
public import perl::impl;
private import core::numeric::integral -;

public metafunction sv perl::impl::sv;
public metafunction av perl::impl::av;
public metafunction hv perl::impl::hv;
public metafunction xs_make_function{f} perl::impl::xs_make_function{f};
public metafunction xs_make_type{f} perl::impl::xs_make_type{f};
public metafunction sv_to_int perl::impl::sv_to_int;
public metafunction int_to_sv perl::impl::int_to_sv;
public metafunction perlsv_get_value{t} perl::impl::perlsv_get_value{t};
public metafunction convert_to_perlsv{t} perl::impl::convert_to_perlsv{t};

public metafunction functions_for_ns{ns}
  m::filter{
    meta::symbol::functions_for_ns{ns},
    metafunction{f}
      m::and{m::not{meta::family::is_ephemeral_type{m::ret_type{f}}},
        m::not{m::ret_byref{f}}}};
public metafunction is_constructible_non_ephemeral{t}
  m::and{
    m::is_constructible_type{t},
    m::not{meta::family::is_ephemeral_type{t}}};

public function {ns} void export_all()
{
  metafunction allfuncs functions_for_ns{ns};
  metafunction alltypes meta::symbol::dependent_types_for_ns{ns};
  metafunction contypes m::filter{alltypes, is_constructible_non_ephemeral};
  expand (i : m::seq{m::size{alltypes}}) {
    perl::xs_make_type{m::at{alltypes, i}}(
      m::full_string{m::at{alltypes, i}});
  }
  expand (i : m::seq{m::size{contypes}}) {
    {
      metafunction typ m::at{contypes, i};
      perl::xs_make_function{typ}(m::concat{m::full_string{typ}, "::new"});
      expand (j : m::seq{m::size{m::member_functions{typ}}}) {
        {
          metafunction mf m::to_string{m::at{m::member_functions{typ}, j}};
          perl::xs_make_function{method_as_function{typ, mf}}(
            m::concat{m::full_string{typ}, "::", mf});
        }
      }
    }
  }
  expand (i : m::seq{m::size{allfuncs}}) {
    perl::xs_make_function{m::at{allfuncs, i}}(
      m::full_string{m::at{allfuncs, i}});
  }
}

public function {ns} void show_exports()
{
  metafunction allfuncs functions_for_ns{ns};
  metafunction alltypes meta::symbol::dependent_types_for_ns{ns};
  expand (i : m::seq{m::size{alltypes}}) {
    println(m::full_string{m::at{alltypes, i}});
  }
  expand (i : m::seq{m::size{allfuncs}}) {
    println(m::full_string{m::at{allfuncs, i}});
  }
}

