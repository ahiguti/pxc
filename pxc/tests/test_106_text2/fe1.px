namespace fe1;
public import numeric::integral -;
public import container::array -;
public import io::text -;
public import io::errno -;
public import text::split -;
public import text::conversion -;
public import meta m;
public import io +;
public import io::file +;
public import meta::family mf;


public import numeric::fp -;
public import io::standard -;

import common -;
import operator -;

public threaded function {cb, opt} errno_t
file_read_records2(file const& ifile)
{ 
  const err = file_read_lines{parse_line, opt}(ifile);
  threaded function bool parse_line(cstrref mutable line) {
    expand(sym, idx: m::map{m::seq{m::argnum{cb}},
      metafunction{i} m::list{
	m::concat{"a", i},
	mf::is_string_or_slice_type{m::argtype{cb, i}}}}) {
      /* not a string type */
      m::argtype{cb, idx} const sym = from_string{m::argtype{cb, idx}}(
	line.next_token('\t'));
      /* string */
      m::argtype{cb, idx} const sym = line.next_token('\t');
    }
    return cb(expand(
      a: m::map{m::seq{m::argnum{cb}}, metafunction{i} m::concat{"a", i}}; a));
  }
  return err;
}

struct {t} monoid_average {
  metafunction value_type t;
  t value;
  size_t count;
  function t get() const { return value / static_cast{t}(count); }
  function monoid_average{t} __add(monoid_average{t} const& y) const {
    return monoid_average(value + y.value, count + y.count);
  }
  function string to_string() const {
    return text::conversion::to_string(get());
  } 
}

function {tto, tfrom} tto monoid_average___to(tfrom const& from)
{
  return from.get();
}

function {t} void
monoid_average_append_to_string(t const& x, string mutable& str)
{
  // t:value_type const xv = x.get();
  t:value_type const xv = x;
  return text::conversion::serialize_to_string(xv, str);
}

struct foo {
  string sval;
  int ival;
  double dval;
  monoid_average{double} adval;
}

{
  const f = system.open("hoge3.txt", io::file::O_RDONLY, 0);
  vector{foo} v;
  monoid_average{double} avg;
  file_read_records2{readrec, 0}(f.value);
  function bool readrec(cstrref const& s, int i, double d) {
    v.emplace_back(s, i, d, monoid_average{double}(d, 1));
    avg = avg + monoid_average{double}(d, 1);
    return true;
  }
  println(v);
  println(avg);
}

