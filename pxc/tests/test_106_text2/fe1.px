public namespace fe1;
public import core::numeric::integral -;
public import core::container::array -;
public import core::io::text -;
public import core::io::errno -;
public import core::text::split -;
public import core::text::serialize -;
public import core::meta m;
public import core::io +;
public import core::io::file +;
public import core::meta::family mf;


public import core::numeric::fp -;
public import core::io::standard -;

import core::common -;
import core::operator -;

public struct {t} monoid_average {
  public metafunction value_type t;
  public t value;
  public size_t count;
  public function t get() const { return value / static_cast{t}(count); }
  public function string to_string() const {
    return core::text::serialize::to_string(get());
  }
}

public function {tx, ty} tx
monoid_average_add__(tx const& x, ty const& y)
{
  tx r = x;
  r.value = x.value + y.value;
  r.count = x.count + y.count;
  return r;
}

public function {tto, tfrom} tto monoid_average_to__(tfrom const& from)
{
  return from.get();
}

public function {tpl, t} void
monoid_average_append_to_string(t const& x, string mutable& str)
{
  m::symbol{t, "value_type"} const xv = x;
  return core::text::serialize::serialize_to_string(xv, str);
}

public struct foo {
  public string sval;
  public int ival;
  public double dval;
  public monoid_average{double} adval;
}

{
  varray{foo} v;
  monoid_average{double} avg;
  thread_io().open("hoge3.txt").value.read_table{readrec, 0}();
  function bool readrec(cstrref const& s, int i, double d) {
    v.emplace_back(s, i, d, monoid_average{double}(d, 1));
    avg = avg + monoid_average{double}(d, 1);
    return true;
  }
  println(v);
  println(avg);
}

