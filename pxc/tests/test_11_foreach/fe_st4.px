namespace fe_st4;
import common -;
import meta::common m;


function {t} void field_to_string(size_t idx, string const& name,
  string const& ftstr, t const& fld, string& str_r)
{
  str_r.append(" ");
  string::conversion::serialize_to_string(idx, str_r);
  str_r.append(" ");
  string::conversion::serialize_to_string(name, str_r);
  str_r.append(" ");
  string::conversion::serialize_to_string(ftstr, str_r);
  str_r.append(" ");
  string::conversion::serialize_to_string(m::to_string{m::typeof{fld}},
    str_r);
  str_r.append(" ");
  string::conversion::serialize_to_string(fld, str_r);
}

struct foo {
  int x;
  long y;
  string z;
}

function void test()
{
  foo f;
  f.x = 20;
  f.y = 35;
  f.z = "abc";
  println(m::to_string{m::typeof{f}});
  int i;
  string s = "(";
  expand (fld, idx : m::field_names{foo}) {
    // macro ftstr m::to_string{m::at{m::field_types{foo}, idx}};
    field_to_string(idx, m::to_string{fld},
      m::to_string{m::at{m::field_types{foo}, idx}},
      f.fld, s);
  }
  s.append(" )");
  println(s);
}

test();

