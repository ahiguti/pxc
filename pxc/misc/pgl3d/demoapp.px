public namespace demoapp "use-unsafe"; // FIXME?
public import common -;
public import exception -;
public import numeric::fpmath -;
public import meta m;
public import glm;
public import text::string::positional -;
public import pgl3d::application -;
public import pgl3d::mainloop -;
public import pgl3d::pglcommon -;
public import pgl3d::glconf -;
public import pgl3d::glgeometry -;
public import pgl3d::wfobj -;
public import pgl3d::drawer_export -;
public import pgl3d::input_control -;
private import pgl3d::dynamics_world -;
private import Bullet::base -;
private import Bullet::api -;
public import io::time -;

public import testbroadphase -; // FIXME

// FIXME
public import pgl3d::sdlutil -;
{
  string cnf;
  sdl_load_file("pgl3d.cnf", cnf);
  // println(cnf);
  string_map m;
  split_foreach{function void(cstrref const& line) {
    const a = make_farray_split{2}(line, '=');
    if (!a[0].empty()) {
      m[a[0]] = a[1];
    }
  }}(cnf, '\n');
  println("map=", m);
}


// FIXME: projection_infoではなくscreen_infoだけ渡すように

// public import pushtest -;

{
  demoapp_application app;
  pgl3d::mainloop::mainloop(app);
}

public struct demoapp_application()
  <pgl3d_application>
{	
  public app_impl app;
  public function tree_map{string, ptr{pgldrawer_export_i}} on_init_drawers(
    shader_config const& conf) {
    return init_drawers(app, conf);
  }
  public function void on_build_vertices(make_vertices_i mutable& mvx) {
    build_vertices(app, mvx);
  }
  public function void on_event(SDL_Event const& ev, float speed,
    projection_info const& pjinfo, string_map mutable& commands_r) {
    handle_event(app, ev, speed, pjinfo, commands_r);
  }
  public function void on_scankeys(cslice{Uint8} const& keys, float speed,
    projection_info const& pjinfo, string_map mutable& commands_r) {
    handle_keys(app, keys, speed, pjinfo, commands_r);
  }
  public function tptr{pgl3d_scene_shared} get_scene_shared() {
    return app.scene_shared;
  }
}

private struct app_impl()
{
  public tptr{demoapp_scene_shared} const scene_shared
    = make_tptr{demoapp_scene_shared}(io::system);
  public input_control_target player;
  public input_control ictl = input_control(io::system);
  public bool scene_next_flag;
  public float light_on = 1.0f;
  public string_map app_commands;
  init();
  private function void init() {
    player.position = glm::make_vec3(0.0, -30.0, 0.0);
    player.angle = glm::make_quat_wxyz(0.70711, 0.70711, 0.0, 0.0);
  }
}

public tsvaluetype enum collision_shape_e {
  collision_shape_e_sphere = 0,
  collision_shape_e_box = 1,
  collision_shape_e_convex_hull = 2,
  collision_shape_e_concave = 3,
}

public multithreaded struct
collision_shape_data(string const& name0, joint_id_type joint_id0,
  float mass0, collision_shape_e shape0, varray{float} const& values0,
  varray{uint} elements0)
{
  public string name = name0;
  public joint_id_type joint_id = joint_id0;
  public float mass = mass0;
  public collision_shape_e shape = shape0;
  public varray{float} values = values0;
  public varray{uint} elements = elements0;
}

public metafunction collision_shape_data_array
  varray{tcptr{collision_shape_data}};

public multithreaded struct demoapp_scene_shared(io const& sys0)
  <pgl3d_scene_shared>
{
  public position_angle posang;
  public bool scene_next_flag;
  public float light_on;
  public texture_info default_font_texture_info;
  public string_map app_commands;
  public io::io sys = sys0;
  /* constatnt */
  public collision_shape_data_array shapes;
  function ptr{pgl3d_scene} make_scene(node_factory const& nodefac) {
    return make_ptr{demoapp_scene}(nodefac, shapes, sys);
  }
}

public threaded function double get_time(io::io const& sys)
{
  const t = sys.high_resolution_timer();
  const d = sys.high_resolution_timer_frequency();
  return static_cast{double}(t) / static_cast{double}(d);
}

private threaded function float time_diff(double t0, double t1)
{
  return static_cast{float}(t1 - t0);
}

public threaded struct demoapp_scene(node_factory const& nodefac0,
  collision_shape_data_array const& shapes0, io::io const& sys0)
  <pgl3d_scene>
{
  public scene_control sctl = scene_control(nodefac0, shapes0);
  public io::io sys = sys0;
  public string timings;
  public function void on_motion_step(float frame_speed,
    projection_info const& pjinfo, cstrref const& status_message,
    cslice{prepare_instance_data_funcptr} const& ftable,
    whole_instances_type mutable& whole_instances,
    pgl3d_scene_shared mutable& ss, position_angle mutable& camera_r,
    position_angle mutable& light_r, string_map mutable& commands_r)
  {
    const t0 = get_time(sys);
    mutable& dss = downcast_mutable{demoapp_scene_shared}(ss);
    // const t0 = io::debug_system().gettimeofday_double();
    camera_r = dss.posang;
    // camera_r.position += camera_r.angle * glm::make_vec3(0.0, 0.0, 3.0);
    light_r.position = camera_r.position +
      camera_r.angle.to_mat3() * glm::make_vec3(3.0, 3.0, 5.0);
    light_r.angle = camera_r.angle;
    const sm_view = light_r.to_mat4().inverse();
    const sm_vp = pjinfo.sm_projection * sm_view;
    const vp = pjinfo.projection * camera_r.to_mat4().inverse();
    node_common_data ncd;
    ncd.shadowmapping_vp = sm_vp;
    ncd.vp = vp;
    scene_control_update_buttons(sctl, sctl.node_buttons);
    string s = string_join{" "}("O:", sctl.sco.objects.size(),
      sctl.active_count, "T:", timings, status_message);
    scene_control_set_message(sctl, sctl.node_status_message, s,
      0, 0,
      dss.default_font_texture_info.char_w,
      dss.default_font_texture_info.char_h,
      static_cast{float}(pjinfo.screen_width),
      static_cast{float}(pjinfo.screen_height));
    const t1 = get_time(sys);
    scene_control_step(sctl, dss, frame_speed, ncd, ftable, whole_instances);
    const t2 = get_time(sys);
    prepare_instance_data_ft_rec(ncd, sctl.node_status_message, ftable,
      whole_instances);
    const t3 = get_time(sys);
    prepare_instance_data_ft_rec(ncd, sctl.node_buttons, ftable,
      whole_instances);
    const t4 = get_time(sys);
    prepare_instance_data_lp(ncd, ftable, whole_instances);
    const t5 = get_time(sys);
    timings = string_join{" "}(
      time_diff(t0, t1),
      time_diff(t1, t2),
      time_diff(t2, t5));
//    debug_log("timings", timings);
  }
  private function size_t prepare_instance_data_ft_rec(
    node_common_data mutable& ncd,
    scene_node const& sn,
    cslice{prepare_instance_data_funcptr} const& ftable,
    whole_instances_type mutable& whole_instances)
  {
    size_t r = 0;
    const& bo_id = sn.joint_id.bo_id;
    const& vs_id = sn.joint_id.vs_id;
    if (bo_id >= 0 && vs_id >= 0) {
      ++r;
      mutable& idata = whole_instances[bo_id][static_cast{size_t}(vs_id)];
      ftable[bo_id](sn, ncd, idata);
    }
    for (const i, const& snp: sn.children) {
      r += prepare_instance_data_ft_rec(ncd, snp, ftable, whole_instances);
    }
    return r;
  }
  private function size_t prepare_instance_data_lp(
    node_common_data mutable& ncd,
    cslice{prepare_instance_data_funcptr} const& ftable,
    whole_instances_type mutable& whole_instances)
  {
    // FIXME: 
    const bo_id = sctl.joint_id_lp.bo_id;
    const vs_id = sctl.joint_id_lp.vs_id;
    mutable& idata = whole_instances[bo_id][static_cast{size_t}(vs_id)];
    for (const i, const& lpb: sctl.lpbullet) {
      const sli = lpb.value.crange();
      idata.instance_buffer.append(sli[0 .. 9]);
    }
    return sctl.lpbullet.size();
  }
}

function void handle_event(app_impl mutable& app,
  SDL_Event const& ev, float frame_speed, projection_info const& pjinfo,
  string_map mutable& commands_r)
{
  const etype = ev.type;
  if (etype == SDL_MOUSEBUTTONDOWN) {
    const bx = cast_float(ev.button.x) / cast_float(pjinfo.screen_width);
    const by = cast_float(ev.button.y) / cast_float(pjinfo.screen_height);
    if (bx < 0.1 && by < 0.1) {
      app.scene_next_flag = true;
      return;
    } else if (bx > 0.9 && by > 0.9) {
      app.light_on = app.light_on > 0.5f ? 0.0f : 1.0f;
      return;
    }
  } else if (etype == SDL_FINGERDOWN) {
    if (ev.tfinger.x < 0.1 && ev.tfinger.y < 0.1) {
      app.scene_next_flag = true;
      return;
    } else if (ev.tfinger.x > 0.9 && ev.tfinger.y > 0.9) {
      app.light_on = app.light_on > 0.5f ? 0.0f : 1.0f;
      return;
    }
  } else if (etype == SDL_KEYDOWN) {
    // sdllog("KEYDOWN event", static_cast{int}(ev.key.keysym.scancode));
    if (ev.key.keysym.scancode == SDL_SCANCODE_TAB) {
      app.scene_next_flag = true;
      return;
    }
    if (ev.key.keysym.scancode == SDL_SCANCODE_0) {
      commands_r["fullscreen"] = "1";
      return;
    }
    if (ev.key.keysym.scancode == SDL_SCANCODE_LEFTBRACKET) {
      commands_r["vsync"] = "1";
      return;
    }
    if (ev.key.keysym.scancode == SDL_SCANCODE_T) {
      app.app_commands["throw"] = "1";
      return;
    }
  }
  app.ictl.handle_event(ev, frame_speed, pjinfo, commands_r);
}

function void handle_keys(app_impl mutable& app,
  cslice{Uint8} const& keys, float frame_speed, projection_info const& pjinfo,
  string_map mutable& commands_r)
{
  app.ictl.handle_keys(app.player, keys, frame_speed, pjinfo, commands_r);
  app.ictl.action_step(app.player, app.player.pos_delta, frame_speed);
  {
    mutable& ss = *app.scene_shared;
    ss.light_on = app.light_on;
    ss.scene_next_flag = app.scene_next_flag;
    ss.posang.position = app.player.position;
    ss.posang.angle = app.player.angle;
    ss.app_commands.swap(app.app_commands);
    app.scene_next_flag = false;
    // sdllog("posang = ", ss.posang);
  }
  app.app_commands.clear();
}

private function tree_map{string, ptr{pgldrawer_export_i}} init_drawers(
  app_impl mutable& app, shader_config const& sconf)
{
  tree_map{string, ptr{pgldrawer_export_i}} r;
  r.insert("drawer_triangles", make_drawer_triangles(sconf, 0));
  r.insert("drawer_triangles_alt", make_drawer_triangles(sconf, 1));
  r.insert("drawer_triangles2", make_drawer_triangles2(sconf));
  r.insert("drawer_lineparticle", make_drawer_lineparticle(sconf));
  r.insert("drawer_particle", make_drawer_particle(sconf));
  r.insert("drawer_particle_bb", make_drawer_particle_bb(sconf));
  r.insert("drawer_rect2d", make_drawer_rect2d(sconf));
  r.insert("drawer_font2", make_drawer_font2(sconf));
  return r;
}

private function void build_vertices(app_impl mutable& app,
  make_vertices_i mutable& pgs)
{
  /* import */
  const objs = make_farray{string}(
      "parts"
      // "al",
      // "cessna",
      // "skyscraper",
      // "airboat"
      );
  const tr = make_varray{string}("drawer_triangles", "drawer_triangles_alt");
  // const tr = make_varray{string}("drawer_triangles");
  const tr2 = make_varray{string}("drawer_triangles2");
  const parti = make_varray{string}("drawer_particle");
  const parti_bb = make_varray{string}("drawer_particle_bb");
  for (const i, const name: objs) {
    string fn = name + ".obj";
    sdllog("load", fn);
    const wfobjp = wfobject_read(sdl_read_file(fn));
    for (const j, mutable& v: wfobjp->v) {
      // v *= 10.0f;
    }
    for (const k, const g: wfobjp->groups) {
      pgs.make_vertex_set(tr, name,
	import_wfobj(*wfobjp, *g, ctx_fill(0)));
    }
  }
  sdllog("load prebuild");
  mutable rnd = make_rand_generator(1U);
  mutable m = glm::mat4();
  mutable m1 = glm::mat4();
  m = glm::mat4()
    .translate(glm::make_vec3(0.0, 0.0, 2.0));
  m1 = glm::mat4()
    .translate(glm::make_vec3(0.0, 0.0, -1.0))
    .rotate(to_radians(45.0), glm::make_vec3(0.0, 0.0, 1.0));
  pgs.make_vertex_set(tr, "box",
    regular_polygon(1.4142f * 1.0f, 4,
      apply(m1,
	bump_apply(m, false, ctx_fill(0), ctx_fill(0))),
      apply(m1,
	ctx_fill(0))));
  pgs.make_vertex_set(tr, "box50",
    regular_polygon(1.4142f * 50.0f, 4,
      apply(m1,
	bump_apply(m, false, ctx_fill(0), ctx_fill(0))),
      apply(m1,
	ctx_fill(0))));
  pgs.make_vertex_set(tr, "saucer",
    regular_polygon(3.0, 40,
      bump_rec(0.2, 0.5, 1, ctx_fill(0), ctx_fill(0)),
      bump_rec(0.01, 0.9, 5,
	ctx_fill(0),
	sphere(10, ctx_fill_smooth(1)))));
  pgs.make_vertex_set(tr, "saucer-multi",
  regular_polygon(15.0, 3,
    bump_rec(1.0, 1.0, 1, ctx_poly_joint("saucer"), hole()),
    hole()));
  pgs.make_vertex_set(tr, "block-multi",
    regular_polygon(600.0, 4,
      rectangle_split(9, 8, ctx_poly_joint("block")),
      hole()));
  rnd = make_rand_generator(1U);
  pgs.make_vertex_set(tr, "block",
    regular_polygon(50.0, 4,
      rotate_local(glm::make_quat_angle_axis(to_radians(45.0),
	0.0, 0.0, 1.0),
	rectangle_split(30, 30,
	  rand_bump(1, 0.8, 0.2, 0.8, 0.2, 0.8, 1.0, 4.0, rnd,
	    ctx_fill(0), ctx_fill(0), ctx_fill(0)))),
      rotate_local(glm::make_quat_angle_axis(to_radians(-45.0),
	0.0, 0.0, 1.0),
	bump_rec(0.01, 1.0, 1, ctx_fill(0), ctx_fill(0)))));
  m = glm::mat4()
    .translate(glm::make_vec3(0.0, 0.0, 1.0))
    .rotate(to_radians(10.0), glm::make_vec3(0.0, 0.0, 1.0));
  pgs.make_vertex_set(tr, "bullet",
    regular_polygon(1.0, 6,
      bump_apply(m, false, ctx_fill(0), ctx_fill(0)),
      bump_apply(m, false, ctx_fill(0), ctx_fill(0))));
  // 60fps, macosx/linux mbp gt750m
  pgs.make_vertex_set(tr, "bullet-multi",
    regular_polygon(600.0, 4,
      rectangle_split(170, 170, ctx_poly_joint("bullet")),
      hole()));
  m = glm::mat4()
    .translate(glm::make_vec3(0.0, 0.0, 1.0))
    .rotate(10.0, glm::make_vec3(0.0, 0.0, 1.0)); // FIXME: to_radians?
  pgs.make_vertex_set(tr, "bullet2",
    regular_polygon(1.0, 5,
      bump_rec(1.3, 0.8, 1, ctx_fill(0), ctx_fill(0)),
      bump_rec(0.8, 0.8, 1, ctx_fill(0), ctx_fill(0))));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi",
    rand_sphere(200.0, 37000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "block-multi2",
    rand_sphere(500.0, 200, false, true, rnd,
      ctx_point_joint("block")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2",
    rand_sphere(200.0, 20000, false, true, rnd,
      ctx_point_joint("bullet2")));
  {
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s1",
    rand_sphere(200.0, 4000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s2",
    rand_sphere(200.0, 8000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s3",
    rand_sphere(200.0, 10000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s4",
    rand_sphere(200.0, 12000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s5",
    rand_sphere(200.0, 14000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s6",
    rand_sphere(200.0, 16000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s7",
    rand_sphere(200.0, 18000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s8",
    rand_sphere(200.0, 20000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s9",
    rand_sphere(200.0, 22000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s10",
    rand_sphere(200.0, 24000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s11",
    rand_sphere(200.0, 26000, false, true, rnd,
      ctx_point_joint("bullet2")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi2s12",
    rand_sphere(200.0, 28000, false, true, rnd,
      ctx_point_joint("bullet2")));
  }
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "bullet2-multi3",
    rand_sphere(200.0, 2000, false, true, rnd,
      ctx_point_joint("bullet2")));
  pgs.make_vertex_set(tr, "bullet-multi-2",
    regular_polygon(600.0, 4,
      rectangle_split(80, 80, ctx_poly_joint("bullet")),
      hole()));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "saucer-multi3",
    rand_sphere(200.0, 200, false, true, rnd,
      ctx_point_joint("saucer")));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(tr, "ab-multi3",
    rand_sphere(100.0, 100, false, true, rnd,
      ctx_point_joint("airboat")));
  rnd = make_rand_generator(1U);
  pgs.make_vertex_set(parti, "particle",
    rand_sphere(1.0, 100, true, true, rnd, ctx_fill(0)));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(parti, "particle-multi",
    rand_sphere(60.0, 30000, true, true, rnd,
      ctx_point_joint("particle")));
  rnd = make_rand_generator(1U);
  pgs.make_vertex_set(parti, "particle-bb",
    rand_sphere(1.0, 100, true, true, rnd, ctx_fill(0)));
  rnd = make_rand_generator(991U);
  pgs.make_vertex_set(parti_bb, "particle-bb-multi",
    rand_sphere(60.0, 10000, true, true, rnd,
      ctx_point_joint("particle-bb")));
  pgs.make_vertex_set(parti_bb, "mixed",
    regular_polygon(1.0, 5,
      bump_rec(1.0, 10.0, 1, hole(), ctx_poly_joint("saucer")),
      ctx_poly_joint("particle-bb")));
  /* for dynamics test */
  pgs.make_vertex_set(tr, "rigidbody-multi",
    regular_polygon(100.0, 4,
      rectangle_split(10, 10, ctx_poly_joint("box")),
      hole()));

  /* save default font metrics */
  app.scene_shared->default_font_texture_info = pgs.get_texture_info("font");

  /* save shapes for physics engine */
  function void shapes_add_convex(cstrref const& name, float mass) {
    const& posdt = pgs.get_vertices(name)->positions;
    const reduced = reduce_vertices(posdt, 0.00001f);
    debug_log("reduced", name, posdt.size()/3, reduced.size()/3);
    app.scene_shared->shapes.push_back(make_tptr{collision_shape_data}(
      name, pgs.get_joint_id(name), mass,
      collision_shape_e_convex_hull, reduced, varray{uint}()));
  }
  function void shapes_add_sphere(cstrref const& name, float radius,
    float mass) {
    varray{float} v = make_varray{float}(radius);
    app.scene_shared->shapes.push_back(make_tptr{collision_shape_data}(
      name, pgs.get_joint_id(name), mass,
      collision_shape_e_sphere, v, varray{uint}()));
  }
  function void shapes_add_concave(cstrref const& name, float mass) {
    const& p = pgs.get_vertices(name)->positions;
    const& elems = pgs.get_vertices(name)->elements;
    app.scene_shared->shapes.push_back(make_tptr{collision_shape_data}(
      name, pgs.get_joint_id(name), mass,
      collision_shape_e_concave, p, elems));
  }
  shapes_add_convex("box", 1.0f);
  shapes_add_convex("box50", 250.0f);
  shapes_add_convex("bullet2", 2.0f);
  // shapes_add_sphere("bullet2", 1.0f, 2.0f);
  shapes_add_convex("bullet", 2.0f);
  shapes_add_convex("saucer", 10.0f);
  // shapes_add_concave("block", 0.0f);
  shapes_add_convex("block", 100.0f);
}

function varray{float} reduce_vertices(cslice{float} const& shape, float delta)
{
  varray{float} a;
  for (size_t i : 0 .. shape.size() / 3) {
    const oi = i * 3;
    const vec = glm::make_vec3(shape[oi], shape[oi+1], shape[oi+2]);
    size_t j = 0;
    const asz = a.size() / 3;
    for (j = 0; j < asz; ++j) {
      const oj = j * 3;
      const dx = a[oj    ] - vec.x;
      const dy = a[oj + 1] - vec.y;
      const dz = a[oj + 2] - vec.z;
      if (fabs(dx) + fabs(dy) + fabs(dz) < delta) {
	break;
      }
    }
    if (j == asz) {
      a.append(vec.to_cslice());
    }
  }
  return a;
}

metafunction node scene_node;

threaded function node make_node()
{
  return scene_node(joint_id_type(), glm::mat4());
}

threaded struct lpbullet_data {
  public farray{float, 9} value;
}

threaded struct
collision_object(joint_id_type const& joint_id0,
  ptr{pgl3dRigidBody} const& rigid_body0)
{
  public joint_id_type joint_id = joint_id0;
  public ptr{pgl3dRigidBody} rigid_body = rigid_body0;
}

threaded struct
collision_shape_ptr(ptr{pgl3dCollisionShape_i} const& ptr0, float mass0)
{
  public ptr{pgl3dCollisionShape_i} shape_ptr = ptr0;
  public float mass = mass0;
}

threaded struct
scene_objects(collision_shape_data_array const& shape0)
{
  public pgl3dDynamicsWorld dynamics_world;
  public tree_map{string, collision_shape_ptr} shapes_by_name;
  public tree_map{joint_id_type, collision_shape_ptr} shapes_by_id;
  public tree_map{string, joint_id_type} name_to_joint_id;
  public varray{collision_object} objects;
  add_collision_shapes(shape0);
  public function void clear_objects() 
  {
    dynamics_world.clear();
    objects.clear();
    dynamics_world.dynamicsWorld.setGravity(btVector3_(0.0f, 0.0f, 0.0f));
  }
  public function void
  add_collision_shapes(collision_shape_data_array const& sa)
  {
    for (const i, const& val: sa) {
      add_collision_shape(*val);
    }
  }
  private function void
  add_collision_shape(collision_shape_data const& sh)
  {
    const& name = sh.name;
    const& joint_id = sh.joint_id;
    name_to_joint_id.insert(name, joint_id);
    const& v = sh.values;
    const& e = sh.elements;
    const mass = sh.mass;
    if (sh.shape == collision_shape_e_sphere) {
      add_collision_shape_one(name, joint_id,
	make_ptr{pgl3dCollisionShape{btSphereShape}}(v[0]), mass);
    } else if (sh.shape == collision_shape_e_box) {
      add_collision_shape_one(name, joint_id,
	make_ptr{pgl3dCollisionShape{btBoxShape}}(
	  btVector3_(v[0], v[1], v[2])), mass);
    } else if (sh.shape == collision_shape_e_convex_hull) {
      const s = make_ptr{pgl3dCollisionShape{btConvexHullShape}}(
	v.to_crawptr(), static_cast{int}(v.size() / 3), 3 * 4);
      add_collision_shape_one(name, joint_id, s, mass);
    } else if (sh.shape == collision_shape_e_concave) {
      ptr{btTriangleMesh} trmesh = make_ptr{btTriangleMesh}(true, true);
      mutable& m = *trmesh;
      size_t eidx = 0;
      while (eidx < e.size()) {
	if (static_cast{size_t}(e[eidx]) >= v.size()) {
	  // TODO: primitive restart
	}
	const i0 = e[eidx + 0] * 3;
	const i1 = e[eidx + 1] * 3;
	const i2 = e[eidx + 2] * 3;
	const v0 = btVector3_(v[i0 + 0], v[i0 + 1], v[i0 + 2]);
	const v1 = btVector3_(v[i1 + 0], v[i1 + 1], v[i1 + 2]);
	const v2 = btVector3_(v[i2 + 0], v[i2 + 1], v[i2 + 2]);
	m.addTriangle(v2, v1, v0, true); // enable dedup
	eidx += 3;
      }
      const s = make_ptr{pgl3dTriangleMeshShape}(trmesh);
      add_collision_shape_one(name, joint_id, s, mass);
    }
  }
  private function void add_collision_shape_one(string const& name,
    joint_id_type const& id, ptr{pgl3dCollisionShape_i} const& sh,
    float mass)
  {
    const csp = collision_shape_ptr(sh, mass);
    shapes_by_name.insert(name, csp);
    shapes_by_id.insert(id, csp);
  }
  public function option{ptr{pgl3dRigidBody}} add_collision_object(
    scene_node const& sn)
  {
    option{ptr{pgl3dRigidBody}} r;
    if (sn.joint_id.vs_id < 0) {
      return r;
    }
    if (const& shape: shapes_by_id[sn.joint_id]) {
      const& t = sn.trans.value.to_cslice();
      const m3 = btMatrix3x3_(
	t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]);
      const v3 = btVector3_(t[12], t[13], t[14]);
      const btr = btTransform_(m3, v3);
      const rb = make_ptr{pgl3dRigidBody}(shape.shape_ptr,
	shape.mass, btr);
      btRigidBody_upcast_btCollisionObject_p(address(rb->rigidBody))
	->setFriction(1.0f);
      objects.push_back(collision_object(sn.joint_id, rb));
      dynamics_world.addRigidBody(rb);
      r.some = rb;
      return r;
    }
    return r;
  }
}

threaded struct
scene_control(node_factory const& nfac,
  collision_shape_data_array const& shapes0)
{
  public node_factory nodefac = nfac;
  public float prev_spawn = 0.0;
  public float motion_count = 0.0;
  public joint_id_type joint_id_lp =
    nodefac.get_joint_id_by_name("lineparticle");
  public joint_id_type joint_id_font =
    nodefac.get_joint_id_by_name("default_font");
  public joint_id_type joint_id_rect2d =
    nodefac.get_joint_id_by_name("rect2d");
  public size_t cur_scene = 0;
  public varray{lpbullet_data} lpbullet;
  public node mutable node_scene = make_node();
  public node mutable node_status_message = make_node();
  public node mutable node_buttons = make_node();
  public scene_objects sco = scene_objects(shapes0);
  public size_t active_count = 0; // FIXME: remove
  /*
  public pgl3dDynamicsWorld dynamics_world; // FIXME: remove
  public varray{ptr{pgl3dRigidBody}} boxes; // FIXME: remove
  public collision_shape_data_array shapes = shapes0; // FIXME: remove
  public function tcptr{collision_shape_data} find_shape(string const& name)
    const
  {
  // FIXME: remove
    for (const i, const& e: shapes) {
      if (e->name == name) {
	return e;
      }
    }
    throw runtime_error_template{"scene_control::find_shape"}(name);
  }
  */
  public darray{string} const scene_names = make_darray{string}(
    // "untitled", "saucer", "saucer-multi", "block-multi", "block",
    // "ab-multi", "ab-multi3", "skyscraper",
    // "al", "cessna", "skyscraper", "airboat",
    /*
    "parts",
    */
    "bullet2-multi2s8",
    // "bullet2-multi2s1",
    // "bullet2-multi2s2",
    // "bullet2-multi2s3",
    "bullet2-multi2s4",
    // "bullet2-multi2s5",
    "bullet2-multi2s6",
    // "bullet2-multi2s7",
    // "bullet2-multi2s8",
    // "bullet2-multi2s9",
    // "bullet2-multi2s10",
    // "bullet2-multi2s11",
    "bullet2-multi2s12",
    "rigidbody-multi",
    "saucer", "saucer-multi", "block-multi", "block-multi2", "block",
    "bullet2-multi3"
    /*
    "bullet2-multi",
    "bullet-multi", "saucer-multi3",
    "particle", "particle-multi",
    "particle-bb", "particle-bb-multi"
    */
    );
  init();
  private function void init()
  {
    node_scene = instantiate_cur_scene();
  }
  private function node instantiate_cur_scene()
  {
    const name = scene_names[cur_scene];
    mutable r = nodefac.make_node_by_name(name, glm::mat4());
    sco.clear_objects();
    if (r.children.empty()) {
      sco.add_collision_object(r);
    } else {
      /*
      size_t p_max = 0;
      size_t p_min = static_cast{size_t}(-1);
      */
      mutable rnd = make_rand_generator(1U);
      for (const i, const& ch: r.children) {
	const rb = sco.add_collision_object(ch).some;
        rb->rigidBody.applyTorqueImpulse(btVector3_(
	  rnd->generate_float() * 10.0f - 5.0f,
	  rnd->generate_float() * 10.0f - 5.0f,
	  rnd->generate_float() * 10.0f - 5.0f));
	/*
	*/
        rb->rigidBody.applyCentralImpulse(btVector3_(
	  rnd->generate_float() * 10.0f - 5.0f,
	  rnd->generate_float() * 10.0f - 5.0f,
	  rnd->generate_float() * 10.0f - 5.0f));
	/*
	*/
	size_t p = address(rb->rigidBody).to_size_t();
	/*
	debug_log("rb", p);
	p_min = min(p, p_min);
	p_max = max(p, p_max);
	*/
      }
      /*
      debug_log("min/max", p_max - p_min);
      */
    }
    if (cur_scene == 0) {
      /*
      dynamics_world.dynamicsWorld.setGravity(btVector3_(0.0f, 0.0f, -10.0f));
      const groundShape = make_ptr{pgl3dCollisionShape{btBoxShape}}(
	btVector3_(50.0f, 50.0f, 50.0f));
      const rbGround = make_ptr{pgl3dRigidBody}(groundShape, 0.0f, 
	btTransform_(btQuaternion_getIdentity(),
	  btVector3_(0.0f, 20.0f, -60.0f)));
      btRigidBody_upcast_btCollisionObject_p(address(rbGround->rigidBody))
	->setFriction(0.1f);
      /*
	btRigidBody_upcast_btCollisionObject_p(address(rbGround->rigidBody))
	  ->setRestitution(0.3f);
      */
      /*
      dynamics_world.addRigidBody(rbGround);
      */
      /*
      const colShape = make_ptr{pgl3dCollisionShape{btBoxShape}}(
	btVector3_(1.0f, 1.0f, 1.0f));
      const& points = find_shape("box")->values;
      const colShape1 = make_ptr{pgl3dCollisionShape{btConvexHullShape}}(
	points.to_crawptr(), static_cast{int}(points.size() / 3), 3 * 4);
      int xsize = 20;
      int ysize = 20;
      int zsize = 20;
      float start_x = static_cast{float}(-xsize - xsize/2);
      float start_y = static_cast{float}(-ysize - ysize/2);
      float start_z = static_cast{float}(-zsize);
      int k;
      int i;
      int j;
      mutable startTransform = btTransform_(btQuaternion_getIdentity(),
	btVector3_(0.0f, 0.0f, 0.0f));
      for (int k: 0 .. xsize) {
	for (int i: 0 .. ysize) {
	  for (int j: 0 .. zsize) {
	    const x = 3.5f * static_cast{float}(k) + start_x;
	    const y = 20.0f + 3.5f * static_cast{float}(i) + start_y;
	    const z = 10.0f + 2.1f * static_cast{float}(j) + start_z;
	    startTransform.setOrigin(btVector3_(x, y, z));
	    const rb = make_ptr{pgl3dRigidBody}(colShape1, 1.0f,
	      startTransform);
	    btRigidBody_upcast_btCollisionObject_p(address(rb->rigidBody))
	      ->setFriction(1.0f);
	    dynamics_world.addRigidBody(rb);
	    if (boxes.size() >= r.children.size()) {
	      const v = r.children[r.children.size() - 1];
	      r.children.push_back(v);
	    }
	    if (boxes.size() < r.children.size()) {
	      size_t p = boxes.size();
	      mutable& csn = r.children[p];
	      glm::vec3 pos = glm::make_vec3(x, y, z);
	      glm::mat4 m = glm::mat4().translate(pos);
	      csn.trans.value = m;
	    }
	    boxes.push_back(rb);
	  }
	}
      }
      */
      /*
      for (size_t i: 0 .. 100) {
	const rb = make_ptr{pgl3dRigidBody}(colShape, 10.0f,
	  btTransform_(
	    btQuaternion_getIdentity(),
	    btVector3_(2.0f, 3.0f * static_cast{btScalar}(i), 0.0f)));
	// btRigidBody_upcast_btCollisionObject_p(address(rb->rigidBody))
	//  ->setFriction(0.2f);
	//btRigidBody_upcast_btCollisionObject_p(address(rb->rigidBody))
	//  ->setRestitution(0.3f);
	dynamics_world.addRigidBody(rb);
	boxes.push_back(rb);
	if (i < r.children.size()) {
	  mutable& csn = r.children[i];
	  glm::vec3 pos = glm::make_vec3(2.0f, 0.0f,
	    10.0f * static_cast{float}(i));
	  glm::mat4 m = glm::mat4().translate(pos);
	  csn.trans.value = m;
	}
      }
      */
    }
    return r;
  }
  public function void scene_next()
  {
    ++cur_scene;
    if (cur_scene >= scene_names.size()) {
      cur_scene = 0;
    }
    node_scene = instantiate_cur_scene();
  }
}

threaded function void
scene_control_set_message(scene_control mutable& sctl,
  scene_node mutable& sn_text,
  cstrref const& text, uint x, uint y, uint font_width, uint font_height,
  float screen_w, float screen_h)
{
  {
    mutable& nd = sn_text;
    const n = text.size();
    while (nd.children.size() < n) {
      const p = scene_node(sctl.joint_id_font, glm::mat4());
      nd.children.push_back(p);
    }
    if (nd.children.size() > n) {
      nd.children.erase(n, nd.children.size());
    }
    for (const i, mutable& p: nd.children) {
      const& sli = p.trans.value.to_slice();
      sli[2] = (static_cast{float}(x) / screen_w) * 2.0f - 1.0f;
      sli[3] = (static_cast{float}(y) / screen_h) * 2.0f - 1.0f;
      x += font_width;
     if (i < text.size()) {
	sli[0] = static_cast{float}(text[i] - 0x20);
      } else {
	sli[0] = 0.0f;
      }
    }
  }
}

threaded function btTransform to_btTransform(position_angle const& posang)
{
  const& p = posang.position;
  const& a = posang.angle;
  const q = btQuaternion_(a.x, a.y, a.z, a.w);
  const v = btVector3_(p.x, p.y, p.z);
  return btTransform_(q, v);
}

threaded function void
scene_control_update_buttons(scene_control mutable& sctl,
  scene_node mutable& sn_buttons)
{
  /* box */
  mutable& nd = sn_buttons;
  if (nd.children.size() < 1) {
    const p = scene_node(sctl.joint_id_rect2d, glm::mat4());
    nd.children.push_back(p);
  }
  mutable& cn = nd.children[0];
  const& sli = cn.trans.value.to_slice();
  sli[0] = -0.99f;
  sli[1] = 0.81f;
  sli[2] = 0.18f;
  sli[3] = 0.18f;
}

threaded function void
scene_control_step(scene_control mutable& sctl,
  demoapp_scene_shared const& ss, float frame_speed,
    node_common_data mutable& ncd,
    cslice{prepare_instance_data_funcptr} const& ftable,
    whole_instances_type mutable& whole_instances)
{
  if (ss.scene_next_flag) {
    sctl.scene_next();
  }
  const speed = frame_speed;
  // mutable& snode = *sctl.snode;
  threaded function void step_lp()
  {
    for (const i, mutable& lpb: sctl.lpbullet) {
      const sli = lpb.value.range();
      mutable vec0 = glm::make_vec3(sli[0], sli[1], sli[2]);
      mutable vec1 = glm::make_vec3(sli[3], sli[4], sli[5]);
      const vd = vec1 - vec0;
      vec0 += vd * speed / 4.0f;
      vec1 += vd * speed / 4.0f;
      sli[0] = vec0.x;
      sli[1] = vec0.y;
      sli[2] = vec0.z;
      sli[3] = vec1.x;
      sli[4] = vec1.y;
      sli[5] = vec1.z;
      const step = sli[7] + speed;
      const sz = min(1.0f, (200.0f - step) / 20.0f);
      sli[6] = 0.25f * sz;
      sli[7] = step;
    }
    threaded function bool lp_is_finished(lpbullet_data const& lpb)
    {
      return lpb.value[7] > 200.0f;
    }
    erase_cond{lp_is_finished}(sctl.lpbullet);
  }
  threaded function void spawn_lp(scene_control mutable& sctl,
    glm::mat4 const& tr, float speed)
  {
    // size_t const lim = is_gles != 0 ? 20000U : 200000U;
    size_t const lim = 200000U;
    if (sctl.lpbullet.size() > lim) {
      return;
    }
    {
      lpbullet_data lpb;
      const& sli = lpb.value.range();
      const p0 = tr * glm::make_vec4(0.0f, 0.0f, -5.0f, 1.0f);
      const p1 = tr * glm::make_vec4(0.0f, 0.0f, -10.0f, 1.0f);
      sli[0] = p0.x; /* position0 */
      sli[1] = p0.y;
      sli[2] = p0.z;
      sli[3] = p1.x; /* position1 */
      sli[4] = p1.y;
      sli[5] = p1.z;
      sli[6] = 0.25f; /* point_size_base */
      sli[7] = 0.0f; /* step */
      sctl.lpbullet.push_back(lpb);
    }
    return;
  }
  scene_node sn_work = make_node();
  threaded function void prepare_one(scene_node const& sn)
  {
    const& bo_id = sn.joint_id.bo_id;
    const& vs_id = sn.joint_id.vs_id;
    if (bo_id >= 0 && vs_id >= 0) {
      mutable& idata = whole_instances[bo_id][static_cast{size_t}(vs_id)];
      ftable[bo_id](sn, ncd, idata);
    }	
  }
  threaded function void step_snobj(scene_node mutable& sn_scene)
  {
    mutable& snobj = sn_scene;
    prepare_one(snobj);
    for (const ci, mutable& csnp: snobj.children) {
      mutable& csn = csnp;
      sn_work.joint_id = csn.joint_id;
      sn_work.trans.value = csn.trans.value.rotate(
	to_radians(sctl.motion_count),
	glm::make_vec3(1.0, 0.0, 0.0));
      if (spawn_now) {
	spawn_lp(sctl, sn_work.trans.value, speed);
      }
      prepare_one(sn_work);
    }
  }
  threaded function void step_snobj_dynamics(scene_node mutable& sn_scene,
    bool spawn_obj)
  {
    if (spawn_obj) {
      const a = ss.posang.angle * glm::make_vec3(0.0f, 0.0f, -20.0f);
      mutable posang = ss.posang;
      posang.position += a / 500.0f;
      const startTransform = to_btTransform(posang);
      scene_node cnode = scene_node(
	sctl.sco.name_to_joint_id["box"], ss.posang.to_mat4());
      const rb = sctl.sco.add_collision_object(cnode).some;
      rb->rigidBody.applyCentralImpulse(btVector3_(a.x, a.y, a.z));
      rb->rigidBody.activate(true);
      debug_log("spawn_obj", sctl.sco.objects.size());
      /*
      const rb = make_ptr{pgl3dRigidBody}(shape, 2.0f,
	      startTransform);
      rb->rigidBody.applyCentralImpulse(btVector3_(a.x, a.y, a.z));
      rb->rigidBody.activate(true);
      sctl.dynamics_world.addRigidBody(rb);
      csn.trans.value = ss.posang.to_mat4();
      sn_scene.children.push_back(csn);
      sctl.boxes.push_back(rb);
      debug_log("spawn_obj", sn_scene.children.size());
      */
    }
    float fixedstep = 0.1f / 60.0f;
    float step = speed / 60.0f;
    if (step < fixedstep) {
      fixedstep = step;
    }
    int substep = static_cast{int}(step / fixedstep) + 1;
    // sctl.sco.dynamics_world.dynamicsWorld.stepSimulation(step, 1, 1.0f/60.0f);
    sctl.sco.dynamics_world.dynamicsWorld.stepSimulation(1.0f/60.0f, 1, 1.0f/60.0f);
    // btTransform trans;
    scene_node cursn = scene_node(joint_id_type(), glm::mat4());
    size_t active_count = 0;
    for (const i, const& obj: sctl.sco.objects) {
      cursn.joint_id = obj.joint_id;
      // obj.rigid_body->motionState.getWorldTransform(trans);
      const& trans = obj.rigid_body->rigidBody.getWorldTransform();
      const sli = cursn.trans.value.to_slice();
      trans.getOpenGLMatrix(sli.to_rawptr());
      /* color: [3] [7] [11]  */
       // sli[3] = 0.20;
       // sli[7] = 0.20;
       // sli[11] = 0.20;
      // sli[3] = static_cast{float}((i & 511) >> 6) * 0.125;
      // sli[7] = static_cast{float}((i & 63) >> 3) * 0.125;
      // sli[11] = static_cast{float}(i & 7) * 0.125;
      // debug_log("col", sli[3], sli[7], sli[11]);
      // debug_log(sli);
      prepare_one(cursn);
      if (obj.rigid_body->rigidBody.isActive()) {
        ++active_count;
      }
    }
    sctl.active_count = active_count;
    /*
    size_t i = 0;
    for (i = 0; i < sctl.boxes.size() && i < sn_scene.children.size(); ++i) {
      mutable& csn = sn_scene.children[i];
      btTransform trans;
      sctl.boxes[i]->motionState.getWorldTransform(trans);
      trans.getOpenGLMatrix(csn.trans.value.to_slice().to_rawptr());
      prepare_one(csn);
    }
    */
  }
  step_lp(); /* lineparticle */
  bool spawn_now = false;
  {
    sctl.prev_spawn += speed;
    if (sctl.prev_spawn > 3.0) {
      spawn_now = ss.light_on != 0.0f;
      sctl.prev_spawn -= 3.0;
    }
  }
  // if (sctl.cur_scene == 0)
  {
    bool spawn_obj = false;
    if (const& v: ss.app_commands["throw"]) {
      spawn_obj = true;
    }
    step_snobj_dynamics(sctl.node_scene, spawn_obj);
  }
  // else {
  //  step_snobj(sctl.node_scene);
  //}
  sctl.motion_count += speed;
  if (sctl.motion_count >= 360.0) {
    sctl.motion_count -= 360.0;
  }
}

