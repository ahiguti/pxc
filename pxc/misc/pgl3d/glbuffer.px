public namespace glbuffer "export-unsafe";
public import common -;
public import pointer::raw -;
public import numeric::fpmath -;
public import SDL2 -;
public import SDL2::Image -;
public import GL::glm glm;
public import GL::compat -;
public import io::time -;
public import meta m;
public import exception -;
public import glshader -;
public import glresource -;

private metafunction use_primitive_restart 0;
private metafunction use_draw_range 0;

public multithreaded struct node_joint
{
  public string joint_name;
  public glm::mat4 trans; /* or quat and vec3 ? */
}

private threaded function {t} void
push_float(varray{float} mutable& arr, t const& v)
{
  if (m::eq{t, float}) {
    arr.push_back(v);
  } else {
    expand (fld: m::field_names{t}) {
      push_float(arr, v.fld);
    }
  }
}

public multithreaded struct
vertices(size_t num_float_per_vertex0)
{
  public size_t const num_float_per_vertex = num_float_per_vertex0;
  public varray{float} vertex_values;
  public varray{uint} elements;
  public varray{node_joint} joints;
  public function {tattr} void push_polygon_distinct(cslice{tattr} const& vals)
  {
    if (num_float_per_vertex != num_float_struct{tattr}) {
      throw runtime_error_template{"vertices::push_polygon_distinct"}("");
    }
    /* no dedup */
    const first_id = vertex_values.size() / num_float_struct{tattr};
    for (const i, const& val: vals) {
      push_float{tattr}(vertex_values, val);
    }
    /* polygon to triangles */
    if (m::ne{use_primitive_restart, 0}) {
      elements.push_back(0xffffffffU);
      for (const i, const& val: vals) {
	elements.push_back(static_cast{uint}(first_id + i));
      }
    } else {
      for (const i: 0 .. vals.size() - 2) {
	elements.push_back(static_cast{uint}(first_id));
	elements.push_back(static_cast{uint}(first_id + i + 1));
	elements.push_back(static_cast{uint}(first_id + i + 2));
      }
    }
  }
  public function {tattr} void push_point(tattr const& val)
  {
    if (num_float_per_vertex != num_float_struct{tattr}) {
      throw runtime_error_template{"vertices::push_point"}("");
    }
    const first_id = vertex_values.size() / num_float_struct{tattr};
    push_float{tattr}(vertex_values, val);
    elements.push_back(static_cast{uint}(first_id));
  }
  public function void push_joint(node_joint const& e)
  {
    joints.push_back(e);
  }
}

public threaded struct vertex_set(size_t num_float_per_vertex0)
{
  public size_t vs_id;
  public string vs_name;
  public ptr{vertices} vtxs = make_ptr{vertices}(num_float_per_vertex0);
  public size_t vertex_values_offset;
  public size_t elements_offset;
}

private threaded struct instance_data {
  public auto_buffer vbo_inst;
  public varray{float} client_buffer;
}

public threaded struct
buffer_object(size_t num_float_per_vertex0, bool draw_mode_points0)
{
  public bool const draw_mode_points = draw_mode_points0;
  public size_t const num_float_per_vertex = num_float_per_vertex0;
  public auto_buffer vbo_values;
  public auto_buffer vbo_elems;
  public varray{ptr{instance_data}} instances;
  public size_t num_vertex_values;
  public size_t num_elements;
  private varray{ptr{vertex_set}} vs_arr;
  private tree_map{string, size_t} vs_names;
  public function ptr{vertex_set} get(string const& name)
  {
    if (const id: vs_names[name]) {
      return vs_arr[id];
    } else {
      const id = vs_arr.size();
      const p = make_ptr{vertex_set}(num_float_per_vertex);
      p->vs_id = id;
      p->vs_name = name;
      vs_arr.push_back(p);
      vs_names[name] = id;
      return p;
    }
  }
  public function ptr{vertex_set} get_by_id(size_t vs_id) const
  {
    return vs_arr[vs_id];
  }
  public function bool exists(string const& name) const
  {
    return vs_names.exists(name);
  }
  public function bool has_name(string const& name) const
  {
    return vs_names.exists(name);
  }
  public function size_t get_id_by_name(string const& name) const
  {
    if (const id: vs_names[name]) {
      return id;
    } else {
      throw runtime_error_template{"buffer_object.get_id_by_name"}("");
    }
  }
  public function size_t num_vs_ids() const
  {
    return vs_arr.size();
  }
  public function bool create_vbo()
  {
    if (vbo_values.get() != 0 || vbo_elems.get() != 0) {
      return false;
    }
    varray{float} vertex_values;
    varray{uint} elements;
    size_t num_v = 0;
    size_t num_e = 0;
    for (const i, const& be: vs_arr) {
      num_v += be->vtxs->vertex_values.size();
      num_e += be->vtxs->elements.size();
    }
    vertex_values.resize(num_v, 0.0);
    elements.resize(num_e, 0);
    num_vertex_values = num_v;
    num_elements = num_e;
    num_v = 0;
    num_e = 0;
    for (const i, mutable& be: vs_arr) {
      for (const j, const& v: be->vtxs->vertex_values) {
	vertex_values[num_v + j] = v;
      }
      for (const j, const& e: be->vtxs->elements) {
	if (e == 0xffffffffU) {
	  elements[num_e + j] = e;
	} else {
	  elements[num_e + j] = e +
	    static_cast{uint}(num_v / num_float_per_vertex);
	}
      }
      be->vertex_values_offset = num_v;
      be->elements_offset = num_e;
      num_v += be->vtxs->vertex_values.size();
      num_e += be->vtxs->elements.size();
    }
    {
      vbo_values.generate();
      vbo_elems.generate();
      if (vbo_values.get() == 0 || vbo_elems.get() == 0) {
	return false;
      }
      glBindBuffer(GL_ARRAY_BUFFER, vbo_values.get());
      glBufferData(GL_ARRAY_BUFFER,
	static_cast{GLsizeiptr}(vertex_values.size()) * 4,
	vertex_values.crawptr().void(), GL_STATIC_DRAW);
      glBindBuffer(GL_ARRAY_BUFFER, 0);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vbo_elems.get());
      glBufferData(GL_ELEMENT_ARRAY_BUFFER,
	static_cast{GLsizeiptr}(elements.size()) * 4,
	elements.crawptr().void(), GL_STATIC_DRAW);
      glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
    }
    for (const i: 0 .. vs_arr.size()) {
      instances.push_back(make_ptr{instance_data}());
    }
    if (m::ne{is_gl3, 0}) {
      for (const i, const& vs: vs_arr) {
	instances[i]->vbo_inst.generate();
	if (instances[i]->vbo_inst.get() == 0) {
	  return false;
	}
      }
    }
    return true;
  }
}

private function void
buffer_object_draw_pre(buffer_object const& bo, shader_i mutable& sdr)
{
  glBindBuffer(GL_ARRAY_BUFFER, bo.vbo_values.get());
  sdr.enable_vertex_attrib_array(bo.num_float_per_vertex);
  glBindBuffer(GL_ARRAY_BUFFER, 0);
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bo.vbo_elems.get());
  if (m::ne{use_primitive_restart, 0}) {
    glEnable(GL_PRIMITIVE_RESTART);
    glPrimitiveRestartIndex(0xffffffff);
  }
}

private function void
buffer_object_draw_post(buffer_object const& bo, shader_i mutable& sdr)
{
  sdr.disable_vertex_attrib_array();
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
  if (m::ne{use_primitive_restart, 0}) {
    glDisable(GL_PRIMITIVE_RESTART);
  }
}

private function void
buffer_object_draw_elems(buffer_object const& bo, size_t vs_id)
{
  const& be = *bo.get_by_id(vs_id);
  const elem_offset = be.elements_offset;
  const elem_num = be.vtxs->elements.size();
  GLenum mode = bo.draw_mode_points ? GL_POINTS :
    use_primitive_restart ? GL_TRIANGLE_FAN : GL_TRIANGLES;
  if (m::ne{use_draw_range, 0}) {
    const arr_offset = be.vertex_values_offset / bo.num_float_per_vertex;
    const arr_num = be.vtxs->vertex_values.size() / bo.num_float_per_vertex;
    /*
    if (elem_num > 0) {
      println("DrawRangeElements", arr_offset, arr_num,
	be.vtxs->elements[elem_num-1]);
    }
    */
    glDrawRangeElements(mode,
      static_cast{GLuint}(arr_offset),
      static_cast{GLuint}(arr_offset + arr_num - 1),
      static_cast{GLsizei}(elem_num), GL_UNSIGNED_INT,
      offset_to_void_cp(elem_offset * 4));
  } else {
    glDrawElements(mode, static_cast{GLsizei}(elem_num), GL_UNSIGNED_INT,
      offset_to_void_cp(elem_offset * 4));
  }
}

private function void
buffer_object_draw_elems_instanced(buffer_object const& bo, size_t vs_id,
  size_t num_instance)
{
  if (m::ne{is_gl3, 0}) {
    size_t elem_offset;
    size_t elem_num;
    {
      const& be = *bo.get_by_id(vs_id);
      elem_offset = be.elements_offset;
      elem_num = be.vtxs->elements.size();
    }
    GLenum mode = bo.draw_mode_points ? GL_POINTS :
      use_primitive_restart ? GL_TRIANGLE_FAN : GL_TRIANGLES;
    glDrawElementsInstanced(mode, static_cast{GLsizei}(elem_num),
      GL_UNSIGNED_INT, offset_to_void_cp(elem_offset * 4),
      static_cast{GLsizei}(num_instance));
  } else {
    throw runtime_error_template{"buffer_object_draw_elems_instanced"}("");
  }
}

public function void
buffer_object_draw(buffer_object const& bo, size_t vs_id,
  shader_i mutable& sdr)
{
  buffer_object_draw_pre(bo, sdr);
  buffer_object_draw_elems(bo, vs_id);
  buffer_object_draw_post(bo, sdr);
}

