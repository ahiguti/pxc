public namespace test;
public import common -;
public import meta m;
public import io::environ -;

public function {f} void
test_timing_one(int repeat, int param, bool timing_flag)
{
  for (int i : 0 .. repeat) {
    const t0 = system.gettimeofday_double();
    const r = f(param);
    const t1 = system.gettimeofday_double();
    if (!timing_flag) {
      println(m::full_string{f}, r);
    } else {
      system.stderr().println(string_join{"\t"}(
        t1 - t0, m::full_string{f}, r));
    }
  }
}

public function {fns} void
test_timing(int repeat, int param, bool timing_flag, cstrref const& name)
{
  expand (i : m::seq{m::size{fns}}) {
    if (name.empty() || name == m::to_string{m::at{fns, i}}) {
      test_timing_one{m::at{fns, i}}(repeat, param, timing_flag);
    }
  }
}

public function {fns} void
test_timing_default()
{
  test_timing{fns}(3, 10, false, ""); /* minimal test */
  const int timing_param = from_string{int}(
    io::environ::getenv("pxc_timing_param"));
  const name = io::environ::getenv("pxc_timing_name");
  if (timing_param != 0) {
    test_timing{fns}(3, timing_param, true, name); /* timing */
  }
}

