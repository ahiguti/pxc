public threaded namespace pgl3d::sdl::sdlutil "use-unsafe";
public import common -;
private import opengl::base -;
private import pointer::raw -;
private import sdl2::api_base -;
private import sdl2::api_types -;
private import sdl2::api_functions -;
private import sdl2::api_wrappers -;
private import sdl2::misc -;
public import meta m;
public import meta::vararg v;

public metafunction sdl_get_ticks SDL_GetTicks;

public threaded function {tlist} void
sdl_log(expand(v::arg_decls_bycref{tlist}))
{
  const s = string_join{"\t"}(expand(a: v::arg_names{m::size{tlist}}; a));
    sdl_log_impl(s);
}

private threaded function void sdl_log_impl(cstrref const& s0)
{
  // SDL_LogInfo(SDL_LOG_CATEGORY_APPLICATION, s);
  cstrref s = s0;
  while (s.size() > 0 && s[s.size() -1] == 0) {
    s.decrement_back(1);
  }
  debug_log(s);
}


private struct sdl_file()
{
  private nomove{rawptr{SDL_RWops}} ptr
    = nomove{rawptr{SDL_RWops}}(rawptr{SDL_RWops}());
  public function bool is_null() const {
    return ptr.value == rawptr{SDL_RWops}(); }
  public function rawptr{SDL_RWops} get() const { return ptr.value; }
  public function void reset(rawptr{SDL_RWops} p) {
    if (ptr.value != rawptr{SDL_RWops}()) {
      SDL_RWclose(ptr.value);
    }
    ptr.value = p;
  }
  public function int close() {
    if (is_null()) {
      return 0;
    }
    int r = SDL_RWclose(ptr.value);
    ptr.value = rawptr{SDL_RWops}();
    return r;
  }
  private function ~ {
    reset(rawptr{SDL_RWops}());
  }
}

public function bool sdl_load_file(string const& fname,
  varray{uchar} mutable& buf_r)
{
  sdl_file fp;
  string fn = fname;
  fn.push_back(0); // nul-term
  fp.reset(SDL_RWFromFile(fn.to_crawptr().to_ccharptr(), "r"));
  if (fp.is_null()) {
    return false;
  }
  buf_r.clear();
  while (true) {
    const osz = buf_r.size();
    size_t rsz = 1024u * 1024u;
    buf_r.resize(osz + rsz, 0);
    const r = SDL_RWread(fp.get(), (buf_r.to_rawptr() + osz).to_voidptr(), 1u,
      rsz);
    if (r != rsz) {
      buf_r.resize(osz + r, 0);
      break;
    }
  }
  return true;
}

public function bool sdl_save_file(string const& fname,
  varray{uchar} const& buf)
{
  sdl_file fp;
  string fn = fname;
  fn.push_back(0); /* nul-term */
  fp.reset(SDL_RWFromFile(fn.to_crawptr().to_ccharptr(), "w"));
  if (fp.is_null()) {
    // debug_log("sdl_save_file: SDL_RWFromFile");
    return false;
  }
  // SDL_RWwriteはwindowsでWriteFileを使ってるのでサイズの上位32bitが
  // 無視される。
  bool suc = true;
  cslice{uchar} sli = buf;
  while (sli.size() != 0u) {
    size_t const szmax = 1024u * 1024u * 1024u;
    const bsz = min(sli.size(), szmax);
    const wsz = SDL_RWwrite(fp.get(), sli.to_crawptr().to_cvoidptr(), 1, bsz);
    if (wsz == 0u) {
      suc = false;
      // debug_log("sdl_save_file: SDL_RWwrite", fname, bsz, wsz);
      break;
    }
    sli.increment_front(wsz);
  }
  if (fp.close() != 0) {
    // debug_log("sdl_save_file: close");
    suc = false;
  }
  return suc;
}

public function void check_byteorder()
{
  if (sdl_byteorder() != sdl_lil_endian()
      && sdl_byteorder() != sdl_big_endian()) {
      throw runtime_error_template{"unknown byteorder"}("1");
  }
  sdl_log("byteorder ", sdl_byteorder());
}

public function uint read_4_uint(cslice{uchar} const& buf, size_t o)
{
  uint v;
  if (sdl_byteorder() == sdl_lil_endian()) {
    v += buf[o+3]; v *= 256;
    v += buf[o+2]; v *= 256;
    v += buf[o+1]; v *= 256;
    v += buf[o+0];
  } else if (sdl_byteorder() == sdl_big_endian()) {
    v += buf[o+0]; v *= 256;
    v += buf[o+1]; v *= 256;
    v += buf[o+2]; v *= 256;
    v += buf[o+3];
  }
  return v;
}

public function uint read_3_uint(cslice{uchar} const& buf, size_t o)
{
  uint v;
  if (sdl_byteorder() == sdl_lil_endian()) {
    v += buf[o+2]; v *= 256;
    v += buf[o+1]; v *= 256;
    v += buf[o+0];
  } else if (sdl_byteorder() == sdl_big_endian()) {
    v += buf[o+0]; v *= 256;
    v += buf[o+1]; v *= 256;
    v += buf[o+2];
  }
  return v;
}

public function void write_4_uint(slice{uchar} const& buf, size_t o, uint val)
{
  if (sdl_byteorder() == sdl_lil_endian()) {
    buf[o+3] = static_cast{uchar}(val >> 24);
    buf[o+2] = static_cast{uchar}(val >> 16);
    buf[o+1] = static_cast{uchar}(val >>  8);
    buf[o+0] = static_cast{uchar}(val);
  } else if (sdl_byteorder() == sdl_big_endian()) {
    buf[o+0] = static_cast{uchar}(val >> 24);
    buf[o+1] = static_cast{uchar}(val >> 16);
    buf[o+2] = static_cast{uchar}(val >>  8);
    buf[o+3] = static_cast{uchar}(val);
  }
}

public function extern "pgl3d$n::sdlutil$n::sdl_byteorder" int
sdl_byteorder();
public function extern "pgl3d$n::sdlutil$n::sdl_lil_endian" int
sdl_lil_endian();
public function extern "pgl3d$n::sdlutil$n::sdl_big_endian" int
sdl_big_endian();

/* private */

extern "types" inline
namespace pgl3d$n { namespace sdlutil$n {
static inline ::pxcrt::bt_int sdl_byteorder()
{ return SDL_BYTEORDER; }
static inline ::pxcrt::bt_int sdl_lil_endian()
{ return SDL_LIL_ENDIAN; }
static inline ::pxcrt::bt_int sdl_big_endian()
{ return SDL_BIG_ENDIAN; }
}; };
;

