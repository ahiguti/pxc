private namespace pgl3d::sdl::sdlcontext "export-unsafe";
public import common -;
public import meta m;
public import pointer::raw -;
public import io::environ -;
public import GL::compat -;
public import GL::glew -;
public import pgl3d::opengl::glresource -;
public import pgl3d::sdl::sdlutil -;
public import pgl3d::engine::pglconfig -;
public import pgl3d::engine::pglbase -;

public struct sdlcontext(pgl3d_config const& config0)
{
  public pgl3d_config config = config0;
  public int init_w = 640;
  public int init_h = 128;
  public int enable_msaa = 0;
  public bool gles_flag = false;
  public int glmajor;
  public int glminor;
  public int vsync = 0;
  public scoped_nullable{SDL_DestroyWindow} sdl_window;
  private scoped_nullable{SDL_GL_DeleteContext} sdl_glcontext;
  public varray{ptr{scoped_nullable{SDL_JoystickClose}}} joystick_handles;
  public varray{joystick_info} joysticks;
  init();
  function void init()
  {
    enable_msaa = config.get("msaa", 0, 0, 1);
    const highdpi_value = config.get("highdpi", 1, 0, 1);
    debug_log("highdpi_value", highdpi_value);
    if (set_high_dpi(highdpi_value) != 0) {
      debug_log("set_high_dpi failed");
    }
    const accelerometer_as_joystick = config.get("accelerometer_as_joystick",
      0, 0, 1);
    SDL_SetHint("SDL_ACCELEROMETER_AS_JOYSTICK",
      accelerometer_as_joystick != 0 ? "1" : "0");
    SDL_Init(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK);
    TTF_Init();
    init_video();
    update_joystick_info();
  }
  function void init_video()
  {
    const num_modes = SDL_GetNumDisplayModes(0);
    for (int i: 0 .. num_modes) {
      SDL_DisplayMode mode;
      SDL_GetDisplayMode(0, i, address(mode));
      sdl_log("displaymode", mode.w, mode.h);
    }
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);

    if (enable_msaa != 0) {
      SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 1);
      SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 4);
      sdl_log("enable_msaa");
    }
    mutable wflags = SDL_WINDOW_OPENGL;
    if (m::ne{is_windows, 0}) {
      wflags |= SDL_WINDOW_RESIZABLE;
    } else {
      wflags |= SDL_WINDOW_RESIZABLE;
    }
    if (config.get("highdpi", 1, 0, 1) != 0) {
      wflags |= SDL_WINDOW_ALLOW_HIGHDPI;
    }
    if (config.get("fullscreen", 0, 0, 2) == 1) {
      wflags |= SDL_WINDOW_FULLSCREEN_DESKTOP;
    }
    if (config.get("fullscreen", 0, 0, 2) == 2) {
      wflags |= SDL_WINDOW_FULLSCREEN;
    }
    vsync = config.get("vsync", 2, 0, 2);
    SDL_GL_SetSwapInterval(vsync);
    if (m::ne{is_gles, 0}) {
      wflags |= SDL_WINDOW_FULLSCREEN | SDL_WINDOW_BORDERLESS;
    }
    if (config.get("width", 0, 0, 16384) != 0) {
      init_w = config.get("width", 0, 0, 16384);
    }
    if (config.get("height", 0, 0, 16384) != 0) {
      init_h = config.get("height", 0, 0, 16384);
    }

    if (m::eq{is_gles, 0}) {
      SDL_GL_SetAttribute(SDL_GL_ACCELERATED_VISUAL, 1);
      SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK,
	SDL_GL_CONTEXT_PROFILE_CORE);
      glmajor = 4;
      glminor = 5;
      gles_flag = false;
    } else {
      if (m::is_true{is_emscripten}) {
	/* emscripten: opengles 2.0 */
	glmajor = 2;
	glminor = 0;
      } else {
	/* ios/android: opengles 3.2 */
	glmajor = 3;
	glminor = 2;
      }
      gles_flag = true;
    }
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, glmajor);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, glminor);
    SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
    if (m::not{is_gles}) {
      // SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 32); // FIXME: 24?
      // sdl_log("set depth 32\n");
    }
    sdl_log("create_window", init_w, init_h);
    sdl_window.reset(SDL_CreateWindow("PGL3D", 128, 128, init_w, init_h,
      wflags));
    const wnd = sdl_window.get();
    string verstr;
    function bool create_context()
    {
      SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, glmajor);
      SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, glminor);
      mutable glctx = SDL_GL_CreateContext(wnd);
      verstr = cubptr_to_string(glGetString_nocheck(GL_VERSION));
      if (verstr.empty()) {
	SDL_GL_DeleteContext(glctx);
	return false;
      }
      sdl_glcontext.reset(glctx);
      return true;
    }
    while (true) {
      create_context();
      if (!verstr.empty()) {
	break;
      }
      // fallback
      if (glminor > 0) {
	--glminor;
      } else if (glmajor > 2) {
	--glmajor;
	if (m::eq{is_gles, 0}) {
	  if (glmajor == 2) {
	    glminor = 1;
	  } else if (glmajor == 3) {
	    glminor = 3;
	  } else if (glmajor == 4) {
	    glminor = 5;
	  } else {
	    glminor = 0;
	  }
	} else {
	  if (glmajor == 2) {
	    glminor = 0;
	  } else if (glmajor == 3) {
	    glminor = 2;
	  } else {
	    glminor = 0;
	  }
	}
      } else {
	break;
      }
    }

    const glew_err = static_cast{int}(GL::glew::glewInit());
    if (glew_err != 0) {
      sdl_log("glewinit failed", glew_err);
    } else {
      sdl_log("glewinit done");
    }

    SDL_GL_GetDrawableSize(wnd, address(init_w), address(init_h));
    sdl_log("drawable size", init_w, init_h);
    sdl_log("GL_VERSION", verstr);
    sdl_log("glmajor/minor", glmajor, glminor);
    {
      string vn0;
      string vn1;
      string vn2;
      string_split{' '}(verstr, vn0, vn1, vn2);
      sdl_log("vn", vn0, vn1, vn2);
      string_split{'.'}(vn0, glmajor, glminor);
      if (glmajor == 0) {
	string_split{'.'}(vn1, glmajor, glminor);
	if (glmajor == 0) {
	  string_split{'.'}(vn2, glmajor, glminor);
	}
      }
    }
    /*
    glGetIntegerv(GL_MAJOR_VERSION, address(glmajor));
    glGetIntegerv(GL_MINOR_VERSION, address(glminor));
    */
    sdl_log("opengl", glmajor, glminor);
    /*
    sdl_log("GL_EXTENSIONS", cubptr_to_string(glGetString(GL_EXTENSIONS)));
    */
    /*
    int num_ext;
    glGetIntegerv(GL_NUM_EXTENSIONS, address(num_ext));
    for (int i: 0 .. num_ext) {
      sdl_log("GL_EXTENSION", cubptr_to_string(glGetStringi(GL_EXTENSIONS,
	static_cast{uint}(i))));
    }
    */
  }
  function void update_joystick_info()
  {
    joystick_handles.clear();
    joysticks.clear();
    metafunction make_handle_type make_ptr{scoped_nullable{SDL_JoystickClose}};
    const n = SDL_NumJoysticks();
    for (const i: 0 .. n) {
      const j = SDL_JoystickOpen(i);
      // sdl_log("joystick", i, ccharptr_to_string(SDL_JoystickName(j)));
      const hndp = make_handle_type();
      joystick_info inf;
      hndp->reset(j);
      inf.id_string = ccharptr_to_string(SDL_JoystickName(j));
      inf.num_axes = static_cast{uint}(max(SDL_JoystickNumAxes(j), 0));
      inf.num_buttons = static_cast{uint}(max(SDL_JoystickNumButtons(j), 0));
      inf.num_hats = static_cast{uint}(max(SDL_JoystickNumHats(j), 0));
      inf.num_balls = static_cast{uint}(max(SDL_JoystickNumBalls(j), 0));
      debug_log(inf);
      joystick_handles.push_back(hndp);
      joysticks.push_back(inf);
    }
  }
  public function string get_gl_version()
  {
    string verstr = cubptr_to_string(glGetString_nocheck(GL_VERSION));
    return verstr;
  }
  public function void pause()
  {
    /*
    int r = SDL_GL_MakeCurrent(sdl_window.get(), SDL_GLContext());
    if (r != 0) {
      sdl_log("pause: make_current failed:", r);
    }
    sdl_glcontext.reset(SDL_GLContext());
    */
  }
  public function void resume()
  {
    /*
    // FIXME
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
    mutable glctx = SDL_GL_CreateContext(sdl_window.get());
    sdl_log("create context: isnull=", (glctx == SDL_GLContext()));
    int r = SDL_GL_MakeCurrent(sdl_window.get(), sdl_glcontext.get());
    if (r != 0) {
      sdl_log("make_current failed:", r);
    }
    sdl_glcontext.reset(glctx);
    sdl_log("resume version: [", get_gl_version(), "]");
    */
    update_joystick_info();
    make_current();
  }
  public function void make_current()
  {
    // mutable glctx = SDL_GL_CreateContext(sdl_window.get());
    // sdl_glcontext.reset(glctx);
    sdl_log("make_current", SDL_GetWindowID(sdl_window.get()));
    int r = SDL_GL_MakeCurrent(sdl_window.get(), sdl_glcontext.get());
    if (r != 0) {
      sdl_log("make_current failed:", r);
    }
    /*
    */
  }
}

private function extern "pgl3d$n::set_high_dpi" int set_high_dpi(int value);

extern "types" inline
#ifdef _MSC_VER
#include <ShellScalingAPI.h>
#endif
;

extern "functions" inline
namespace pgl3d$n {
#ifdef _MSC_VER
typedef HRESULT (*TSetProcessDpiAwareness)(PROCESS_DPI_AWARENESS);
#endif
static inline int set_high_dpi(int value)
{
  int r = 0;
#ifdef _MSC_VER
  // requires windows 8.1
  HMODULE h = LoadLibrary(L"shcore.dll");
  if (h == NULL) {
    return -1;
  }
  TSetProcessDpiAwareness f = (TSetProcessDpiAwareness)
    GetProcAddress(h, "SetProcessDpiAwareness");
  if (f != NULL) {
    r = (int)(*f)((PROCESS_DPI_AWARENESS)value);
  } else {
    r = -1;
  }
  FreeLibrary(h);
#endif
  return r;
}
};
;

