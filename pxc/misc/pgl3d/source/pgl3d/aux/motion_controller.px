public namespace pgl3d::aux::motion_controller;
public import common -;
public import meta m;
public import glm;
public import pgl3d::aux::serial_port -;

public struct motion_controller_serial(uint index)
{
  serial_port sp = serial_port(index);
  glm::quat value;
  glm::quat initial_value_inv;
  bool initialized;
  string buffer;
  public function bool is_valid() const
  {
    return sp.is_valid();
  }
  public function glm::quat get_current_value()
  {
    update_value();
    return value;
  }
  public function void reset_initial()
  {
    initialized = false;
    initial_value_inv = glm::quat();
  }
  private function void update_value()
  {
    if (!sp.is_valid()) {
      return;
    }
    size_t olen = buffer.size();
    // debug_log("motion_controller", olen);
    sp.read_nonblocking(buffer);
    if (buffer.size() == olen) {
      return;
    }
    while (true) {
      // find two newlines from buffer
      size_t z = 0u;
      size_t p0 = find_mapped(buffer, z, '\n');
      if (p0 >= buffer.size()) {
        break;
      }
      size_t p1 = find_mapped(buffer, p0 + 1, '\n');
      if (p1 >= buffer.size()) {
        break;
      }
      // found
      farray{float, 4} a;
      {
        const line = buffer[p0 + 1 .. p1];
        uint i = 0;
        split_foreach(line, ',') function void (cstrref const& s) {
          const v = from_string{float}(s);
          if (i < 4u) {
            a[i] = v;
          }
          ++i;
        }
      }
      glm::quat v;
      v.x = a[0];
      v.y = a[1];
      v.z = -a[2];
      v.w = a[3];
      if (initialized) {
        value = v * initial_value_inv;
      } else {
        initial_value_inv = v.inverse();
        initialized = true;
      }
      // debug_log("quat value", value);
      buffer.erase(0u, p0 + 1);
    }
  }
}

