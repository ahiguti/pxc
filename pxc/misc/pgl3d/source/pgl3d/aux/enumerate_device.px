public namespace pgl3d::aux::enumerate_device "use-unsafe";
public import common -;
public import meta m;

public multithreaded struct device_info
{
  public string name;
  public string friendly_name;
  public string port_name;
}

public function extern "pgl3d::enumerate_device" void
enumerate_device(varray{device_info} mutable& devs_r);

extern "implementation" inline

#ifdef _MSC_VER
#include <setupapi.h>
#pragma comment(lib, "setupapi.lib")
#endif

namespace pgl3d {

typedef pgl3d$n::aux$n::enumerate_device$n::device_info$s device_info;

#ifdef _MSC_VER

pxcrt::bt_string
wstr_to_string(wchar_t const *wstr, size_t wcnt)
{
  auto dsz = WideCharToMultiByte(CP_UTF8, 0u, wstr, (DWORD)wcnt, nullptr, 0,
    nullptr, nullptr);
  std::vector<char> str(dsz, '\0');
  if (!WideCharToMultiByte(CP_UTF8, 0u, wstr, (DWORD)wcnt, str.data(),
    (DWORD)str.size(), nullptr, nullptr)) {
    return pxcrt::bt_string();
  }
  pxcrt::bt_string s((const pxcrt::bt_uchar *)str.data(), str.size());
  return s;
}

pxcrt::bt_string
get_reg_prop_wstr(HDEVINFO hdevinfo, SP_DEVINFO_DATA *didata, DWORD prop)
{
  DWORD regtype = 0;
  DWORD reqsize = 0;
  BOOL e = SetupDiGetDeviceRegistryProperty(hdevinfo, didata, prop,
    &regtype, nullptr, 0, &reqsize);
  if (!e && GetLastError() != ERROR_INSUFFICIENT_BUFFER) {
    return pxcrt::bt_string();
  }
  std::vector<wchar_t> wstr;
  wstr.resize(reqsize / sizeof(wchar_t));
  if (wstr.empty()) {
    return pxcrt::bt_string();
  }
  e = SetupDiGetDeviceRegistryProperty(hdevinfo, didata, prop, &regtype,
    (BYTE *)(&wstr[0]), (DWORD)(wstr.size() * sizeof(wchar_t)), &reqsize);
  if (!e) {
    return pxcrt::bt_string();
  }
  if (wstr.size() > 0 && wstr.back() == 0) {
    wstr.pop_back();
  }
  return wstr_to_string(wstr.data(), wstr.size());
}

void
enumerate_device(pxcrt::pxcvarray<device_info>& devs_r)
{
  devs_r.clear();
  HDEVINFO hdevinfo = SetupDiGetClassDevs(nullptr, 0, 0,
    DIGCF_PRESENT | DIGCF_ALLCLASSES);
  if (hdevinfo == INVALID_HANDLE_VALUE) {
    return;
  }
  DWORD i = 0;
  SP_DEVINFO_DATA didata = { };
  didata.cbSize = sizeof(SP_DEVINFO_DATA);
  for (i = 0; SetupDiEnumDeviceInfo(hdevinfo, i, &didata); ++i) {
    device_info di = { };
    di.name$ = get_reg_prop_wstr(hdevinfo, &didata, SPDRP_DEVICEDESC);
    di.friendly_name$ = get_reg_prop_wstr(hdevinfo, &didata,
      SPDRP_FRIENDLYNAME);
    HKEY tkey = SetupDiOpenDevRegKey(hdevinfo, &didata, DICS_FLAG_GLOBAL, 0,
      DIREG_DEV, KEY_QUERY_VALUE);
    if (tkey != INVALID_HANDLE_VALUE) {
      DWORD typ = 0;
      DWORD sz = 0;
      BOOL e = RegQueryValueExA(tkey, "PortName", nullptr, &typ, nullptr, &sz);
      if (e == ERROR_SUCCESS) {
        std::vector<BYTE> buffer(sz, 0u);
        e = RegQueryValueExA(tkey, "PortName", nullptr, &typ, buffer.data(),
          &sz);
        if (e == ERROR_SUCCESS) {
          if (buffer.size() > 0 && buffer.back() == 0) {
            buffer.pop_back();
          }
          di.port_name$ = pxcrt::bt_string(
            (const pxcrt::bt_uchar *)buffer.data(), buffer.size());
        }
      }
      RegCloseKey(tkey);
    }
    devs_r.push_back(di);
  }
}

#else

void
enumerate_device(pxcrt::pxcvarray<device_info>& devs_r)
{
}

#endif

}

;
