public threaded namespace pgl3d::engine::application;
public import common -;

public import pgl3d::engine::scene_node *;
public import pgl3d::engine::pglbase *;
public import pgl3d::engine::pglconfig *;
public import pgl3d::opengl::shader_config *;
public import pgl3d::drawer::drawer *;
public import sdl2::api_base *;
public import sdl2::api_types *;

public interface pgl3d_application {
  public function tptr{pgl3d_scene_shared} get_scene_shared();
    // motion threadとの共有データを作る。一回だけ呼ばれる。
  public function varray{ptr{pgldrawer_export_i}} on_init_drawstep(
    shader_config const& sconf, drawer_shared const& ds);
  public function void on_build_vertices(make_vertices_i mutable& mvx);
  public function void on_joystick_changed(cslice{joystick_info} const& jinfo);
  public function void on_event(SDL_Event const& ev, float speed,
    projection_info const& pjinfo, string_map mutable& commands_r);
    // イベント一つごとに呼ばれる。
  public function void on_scankeys(cslice{uchar} const& keys,
    cslice{joystick_state} const& joystick, float speed,
    projection_info const& pjinfo, string_map mutable& commands_r);
    // キースキャン後に呼ばれる。フレーム毎に一回。
  public function void on_frame(projection_info const& pjinfo);
    // motion 反映前に呼ばれる。フレーム毎に一回。
  public function void on_motion_swap();
    // motion threadからmain threadへ情報を移動する際に呼ばれる。
  public function void on_draw_finished(projection_info const& pjinfo);
    // motion 反映とフレーム描画後に呼ばれる。
}

public multithreaded interface pgl3d_scene_shared {
  public function ptr{pgl3d_scene} make_scene(node_factory const& nodefac);
    // motion thread上で一回だけ呼ばれる。シーングラフを作るのに使う。
}

public threaded interface pgl3d_scene {
  public function void on_motion_step(float frame_speed,
    projection_info mutable& pjinfo, cstrref const& status_message,
    cslice{prepare_instance_data_funcptr} const& ftable,
    whole_instances_type mutable& whole_instances,
    pgl3d_scene_shared mutable& ss, string_map mutable& commands_r);
    // motion thread上でフレーム毎に呼ばれる。
}

