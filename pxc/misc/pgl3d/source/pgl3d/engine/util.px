public threaded namespace pgl3d::engine::util;
public import common -;
public import text::positional -;
public import meta m;
public import glm -;
public import numeric::fpmath -;

public threaded function {t} t
power_of_2(t v)
{
  mutable t r = static_cast{t}(1);
  while (r != 0 && r < v) { r <<= 1; }
  return r;
}

public threaded function {t} t
integral_log2(t v)
{
  t const one = 1;
  t r = 0;
  while (v > (one << r)) {
    ++r;
  }
  return r;
}

public threaded function float
to_radians(float deg)
{
  return deg * 3.14159265f / 180.0f;
}

public threaded function {cond, t} void
erase_cond(t mutable& arr)
{
  const sz = arr.size();
  size_t mutable i0 = 0;
  size_t mutable i1 = sz - 1;
  if (sz == 0) {
    return;
  }
  {
    const a = arr[0 .. sz];
    while (true) {
      while (i0 < i1 && cond(a[i1])) {
	--i1;
      }
      while (i0 <= i1 && !cond(a[i0])) {
	++i0;
      }
      if (i0 >= i1) {
	break;
      }
      swap(a[i0], a[i1]);
    }
  }
  if (i0 < sz) {
    arr.erase(i0, sz);
  }
}

public threaded function {t} string
to_hexstring(t v)
{
  string r;
  integral_to_hexadecimal{t}(v, r);
  return r;
}

public threaded function {t} t
clamp(t x, t mi, t mx)
{
  return min(max(x, mi), mx);
}

public threaded function int dot_int(ivec3 const& a, ivec3 const& b)
{
  return a.x * b.x + a.y * b.y + a.z * b.z;
}

public threaded function {t} t abs(t x)
{
  return x < t() ? -x : x;
}

public metafunction to_ivec3 map{ivec3, static_cast{int, uint}};
public metafunction to_uvec3 map{uvec3, static_cast{uint, int}};
public metafunction to_vec3 map{vec3, static_cast{float, int}};

public threaded function glm::mat3 mat3_identity()
{
  return glm::make_mat3(
    1.0, 0.0, 0.0,
    0.0, 1.0, 0.0,
    0.0, 0.0, 1.0);
}

public threaded function glm::mat4 mat4_identity()
{
  return glm::make_mat4(
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 1.0);
}

public threaded function float pi_float()
{
  return 3.1415926535897932384626433832795;
}

public metafunction rand_generator_ptr ptr{rand_generator};
public metafunction make_rand_generator make_ptr{rand_generator};

public tsvaluetype struct
rand_generator(uint seed0)
{
  // mersenne twister
  public uint index = 624u;
  public farray{uint, 624} mt;
  init_short(seed0);
  public function uint generate()
  {
    if (index >= 624u) {
      twist();
    }
    mutable y = mt[index];
    y ^= y >> 11u;
    y ^= (y << 7u) & 2636928640u;
    y ^= (y << 15u) & 4022730752u;
    y ^= y >> 18u;
    ++index;
    return y;
  }
  public function void init_short(uint seed)
  {
    index = 624u;
    mt[0] = seed;
    for (const i: 1 .. 624u) {
      mt[i] = 1812433253u * (mt[i - 1] ^ mt[i - 1] >> 30u) + i;
    }
  }
  public function void init_full(cslice{uint} const& seed)
  {
    const n = min(seed.size(), mt.size());
    size_t i;
    for (i = 0; i < n; ++i) {
      mt[i] = seed[i];
    }
  }
  private function void twist()
  {
    for (const i: 0 .. 624u) {
      const y = (mt[i] & 0x80000000u) + (mt[(i + 1u) % 624u] & 0x7fffffff);
      mt[i] = mt[(i + 397u) % 624u] ^ (y >> 1u);
      if (y % 2u != 0) {
        mt[i] = mt[i] ^ 0x9908b0df;
      }
    }
    index = 0u;
  }
  public function float generate_float() {
    return static_cast{float}(generate()) / 4294967296.0;
  }
}

public threaded function quat
generate_rand_quat(rand_generator_ptr const& rnd)
{
  const x = rnd->generate_float();
  const y = rnd->generate_float();
  const z = rnd->generate_float();
  const pi2 = pi_float() * 2.0f;
  const xq0 = sqrt(1.0f - x);
  const xq1 = sqrt(x);
  return make_quat_wxyz(
    xq0 * sin(y * pi2),
    xq0 * cos(y * pi2),
    xq1 * sin(z * pi2),
    xq1 * cos(z * pi2));
}

