public namespace pgl3d::engine::mainloop "use-unsafe";
public import common -;
public import pointer::raw -;
public import numeric::fpmath -;
public import glm;
public import io::time -;
public import io::environ -;
public import exception -;
public import fundamental::mainloop -;
public import meta m;
public import pgl3d::geometry::funcs -;
public import pgl3d::engine::pglmotion -;
public import pgl3d::engine::pglbase -;
public import pgl3d::engine::util -;
public import pgl3d::engine::application -;
public import pgl3d::engine::pglconfig -;
private import pgl3d::opengl::glresource -;
private import pgl3d::opengl::glshader -;
private import pgl3d::opengl::glbuffer -;
private import pgl3d::opengl::resource_pool -;
private import pgl3d::engine::pglshader -;
private import pgl3d::sdl::sdlcontext -;
private import pgl3d::sdl::sdlutil -;
private import opengl::compat -;
// private import pgl3d::engine::console -;

public function void mainloop(ptr{pgl3d_application} const& app,
  cstrref const& conf_filename)
{
  string confstr;
  sdl_load_file(conf_filename, confstr);
  const conf = pgl3d_config(confstr);
  opengl::base::set_check_error_enabled(conf.get("gldebug", 0, 0, 1));
  const ml = make_ptr{mainloop_internal}(app, conf);
  set_mainloop(ml);
}

struct
frame_statistics()
{
  public metafunction size 16;
  public metafunction ticks_t farray{uint, size};
  public ticks_t ticks;
  public size_t cur;
  public function void save_ticks_value(uint value)
  {
    if (cur < ticks.size()) {
      ticks[cur] = value;
      ++cur;
    }
  }
  public function void save_ticks()
  {
    save_ticks_value(SDL_GetTicks());
  }
  public function void fill()
  {
    while (cur < ticks.size()) {
      save_ticks();
    }
  }
  public function ticks_t to_relative() const
  {
    ticks_t r;
    for (size_t i: 1 .. size) {
      r[i] = ticks[i] - ticks[i - 1];
    }
    return r;
  }
  public function void rewind()
  {
    cur = 0;
  }
}

struct
frame_stat_log(double threshold0)
{
  public float const threshold = static_cast{float}(threshold0);
  public metafunction log_length 256;
  public float mutable fps = 0.0f;
  public farray{frame_statistics, log_length} ents;
  public size_t cur_ent;
  public size_t log_count;
  public farray{string, m::symbol{frame_statistics, "size"}} labels;
  public function void reset()
  {
    log_count = 0;
  }
  public function size_t get_current_index() const
  {
    return ents[cur_ent].cur;
  }
  public function void save_ticks(strlit const label)
  {
    if (log_count == 0 && ents[cur_ent].cur < labels.size()) {
      labels[ents[cur_ent].cur] = label;
    }
    ents[cur_ent].save_ticks();
  }
  public function void save_ticks_value(uint v, strlit const label)
  {
    if (log_count == 0 && ents[cur_ent].cur < labels.size()) {
      labels[ents[cur_ent].cur] = label;
    }
    ents[cur_ent].save_ticks_value(v);
  }
  public function void next_ent()
  {
    ents[cur_ent].fill();
    if (log_count >= 31 && log_count % 30 == 0) {
      // 30 frames
      const& prev = ents[(cur_ent + log_length - 30u) % log_length];
      const& cur = ents[cur_ent];
      const d = cur.ticks[cur.ticks.size() - 1]
        - prev.ticks[prev.ticks.size() - 1];
      if (d != 0) {
        fps = 30000.0f / cast_float(d);
      }
      bool found = false;
      for (size_t k: 0u .. m::symbol{frame_statistics, "size"}) {
        uint sum = cur.ticks[k] - prev.ticks[k];
        float v_avg = cast_float(sum) / 30.0f;
        float v_min = v_avg;
        float v_max = v_avg;
        for (size_t i: 1u .. 30u) {
          const& e0 = ents[(cur_ent + log_length - 30u + i) % log_length];
          const& e1 = ents[(cur_ent + log_length - 29u + i) % log_length];
          const df = cast_float(e1.ticks[k] - e0.ticks[k]);
          v_min = min(v_min, df);
          v_max = max(v_max, df);
        }
        if (threshold > 0.0 && v_max / v_min > threshold) {
          debug_log("framestat", k, "avg/min/max=", v_avg, v_min, v_max);
          found = true;
        }
      }
      if (found) {
        debug_log(labels);
        for (size_t i: 0u .. 30u) {
          const& e0 = ents[(cur_ent + log_length - 29u + i) % log_length];
          debug_log("framest dmp", e0.to_relative());
        }
      }
    }
    cur_ent = (cur_ent + 1) % log_length;
    ents[cur_ent].rewind();
    ++log_count;
  }
}

private function int set_swap_interval(int vsync)
{
  return SDL_GL_SetSwapInterval(vsync);
}

struct
framerate_control(int vsync0, double max_fps0, int frame_sleep0)
{
  public int mutable vsync = vsync0;
  public int mutable swap_interval = set_swap_interval(vsync0 > 0 ? 1 : 0);
  public int frame_sleep = frame_sleep0;
  public ulonglong time_prev = io::system.high_resolution_timer();
  public ulonglong time_den = io::system.high_resolution_timer_frequency();
  public double const max_fps = max_fps0;
  public double target_fps = max_fps0;
  public double target_interval = 1.0 / max_fps;
  public double cur_interval = target_interval;
  public float frame_speed_mul = 1.0;
  public function void start()
  {
    target_fps = max_fps;
    target_interval = 1.0 / max_fps;
    cur_interval = target_interval;
    time_prev = io::system.high_resolution_timer();
    sdl_log("maxfps=", max_fps);
  }
  public function void toggle_vsync()
  {
    vsync = vsync != 0 ? 0 : 1;
    sdl_log("vsync=", vsync);
    swap_interval = set_swap_interval(vsync);
  }
  public function double time_subtract_sec(ulonglong tx, ulonglong ty)
  {
    const v = static_cast{double}(tx - ty) / static_cast{double}(time_den);
    return min(v, 1.0);
  }
  public function void update_target_interval()
  {
    const cur_fps = 1.0 / cur_interval;
    double target_fps = 1.0 / target_interval;
    if (cur_fps > target_fps) {
      target_fps += 3.0 / target_fps;
      // target_fps = min(cur_fps + 1.0, target_fps);
    } else {
      target_fps -= 3.0;
      // target_fps = max(cur_fps - 1.0, target_fps);
    }
    target_fps = max(1.0, min(target_fps, max_fps));
    target_interval = 1.0 / target_fps;
  }
  public function void rate_control()
  {
    const time_now = io::system.high_resolution_timer();
    cur_interval = time_subtract_sec(time_now, time_prev);
    update_target_interval();
    const sleep_sec = target_interval - cur_interval;
    // sdl_log("interval", time_prev, time_now, cur_interval, target_interval);
    if (sleep_sec > 0.000 && frame_sleep != 0) {
      io::system.usleep(static_cast{uint}((sleep_sec - 0.000) * 1000000.0));
      // sdl_log("sleep", sleep_sec);
      time_prev = time_now + static_cast{ulonglong}(sleep_sec * static_cast{double}(time_den));
      frame_speed_mul = static_cast{float}(target_interval * 60.0);
    } else {
      time_prev = time_now;
      frame_speed_mul = static_cast{float}(cur_interval * 60.0);
    }
  }
}

private struct mainloop_internal(ptr{pgl3d_application} const& app,
  pgl3d_config const& conf)
<mainloop_i>
{
  main_ctrl ctrl = main_ctrl(app, conf);
  public function bool step()
  {
    return ctrl.step_internal(ctrl);
  }
}

private interface main_ctrl_export_i
{
  public function glm::uvec2 get_window_size();
}

private struct main_ctrl(ptr{pgl3d_application} const& app0,
  pgl3d_config const& conf)
<app_ctrl_i>
{
  private ptr{pgl3d_application} app = app0;
  private sdlcontext sdlc = sdlcontext(conf);
  private shader_config sconf = shader_config(sdlc.gles_flag, sdlc.glmajor,
    sdlc.glminor, sdlc.enable_msaa, conf);
  private drawer_shared ds;
  private varray{ptr{pgldrawer_export_i}} drawsteps
    = app->on_init_drawstep(sconf, ds);
  private pglshader pgs = pglshader(sconf, ds, drawsteps,
    sdlc.init_w, sdlc.init_h);
  private node_factory nfac;
  private option{ptr{motion_thread_client}} motion_thr;
  private size_t saved_stat_num_objects;
  private frame_stat_log mutable fr = frame_stat_log(
    conf.get("framestat_threshold", 0.0, 0.0, 10.0));
  private framerate_control mutable frctl = framerate_control(sdlc.vsync,
    conf.get("fps", 60.0, 1.0, 3600.0),
    conf.get("frame_sleep", 1, 0, 1));
  private int dummy_flip = conf.get("dummy_flip", 0, 0, 4);
  private int fullscreen = 0;
  private int saved_w = 0;
  private int saved_h = 0;
  private Uint32 saved_window_flags = 0;
  private bool async_motion_thread =
    conf.get("async_motion_thread", 1, 0, 1) == 1;
  private bool glfinish = conf.get("glfinish", 0, 0, 1) == 1;
  private bool done = false;
  private bool paused = false;
  private varray{joystick_state} joysticks;
  // private varray{uchar} console_input;
  /*
  private varray{short} joy_axes;
  private varray{bool} joy_buttons;
  private varray{uchar} joy_hats;
  */
  private int target_tick = 0;
  private bool engine_status = true;
  init();
  private function void init()
  {
    sdl_log("PGL3D main");
    sdl_log("shader config", sconf);
    // SDL_EventState(SDL_KEYDOWN, 0); // FIXME
    SDL_EventState(SDL_KEYUP, 0);
    SDL_EventState(SDL_TEXTEDITING, 0);
    SDL_EventState(SDL_TEXTINPUT, 0);
    SDL_JoystickEventState(0);
    if (m::or{is_android, is_ios}) {
      SDL_EventState(SDL_MOUSEBUTTONDOWN, 0);
      SDL_EventState(SDL_MOUSEBUTTONUP, 0);
      SDL_EventState(SDL_MOUSEMOTION, 0);
    }
    if (m::ne{is_macos, 0}) {
      SDL_EventState(SDL_FINGERDOWN, 0);
      SDL_EventState(SDL_FINGERUP, 0);
      SDL_EventState(SDL_FINGERMOTION, 0);
    }
    sdl_log("PGL3D init0");
    app->on_build_vertices(pgs);
    pgs.prepare(nfac);
    update_window_size();

    app->on_joystick_changed(sdlc.joysticks);

    /* spawn motion thread */
    motion_thr.some = make_ptr{motion_thread_client}(nfac,
      pgs.ddata.local_whole_instances, app->get_scene_shared(), pgs.pidft,
      async_motion_thread);
    if (async_motion_thread) {
      motion_thr.some->start();
    }
  }
  private function void update_fullscreen()
  {
    if (fullscreen != 0) {
      saved_window_flags = SDL_GetWindowFlags(sdlc.sdl_window);
      debug_log("window flags", saved_window_flags, SDL_WINDOW_MAXIMIZED);
      int w;
      int h;
      SDL_GetWindowSize(sdlc.sdl_window, address(w), address(h));
      // 最大化されたウインドウをもとに戻す。最大化されたままフルスクリーンに
      // するとAlt-Tabで切り替えた時にサイズがおかしくなる。
      SDL_RestoreWindow(sdlc.sdl_window);
      SDL_GetWindowSize(sdlc.sdl_window, address(saved_w), address(saved_h));
      SDL_SetWindowSize(sdlc.sdl_window, w, h);
    } else {
    }
    SDL_Enum flag = 0;
    if (m::ne{is_macos, 0}) {
      flag = SDL_WINDOW_FULLSCREEN_DESKTOP;
    } else {
      flag = SDL_WINDOW_FULLSCREEN;
    }
    SDL_SetWindowFullscreen(sdlc.sdl_window, fullscreen != 0 ? flag : 0);
    if (fullscreen == 0) {
      if (saved_w != 0) {
	SDL_SetWindowSize(sdlc.sdl_window, saved_w, saved_h);
      }
      if ((saved_window_flags & SDL_WINDOW_MAXIMIZED) != 0) {
	SDL_MaximizeWindow(sdlc.sdl_window);
      }
    }
  }
  private function void toggle_fullscreen()
  {
    fullscreen = fullscreen != 0 ? 0 : 1;
    sdl_log("fullscreen=", fullscreen);
    update_fullscreen();
  }
  private function void reload_shaders()
  {
    engine_status = pgs.reload_shaders();
  }
  private function void update_window_size()
  {
    pgs.resize_screen();
    frctl.start();
    sdl_log("update_window_size");
  }
  /*
  private function void read_console_input(app_ctrl_i mutable& actrl)
  {
    while (true) {
      int ch = pgl3d::engine::console::getch_nb();
      if (ch > 0) {
        console_input.push_back(static_cast{uchar}(ch));
        // sdl_log("console: ", ch);
      } else {
        return;
      }
    }
  }
  */
  public function bool step_internal(app_ctrl_i mutable& actrl)
  {
    fr.save_ticks("ini");
    // read_console_input(actrl);
    // bool scene_next_flag = false;
    SDL_Event ev;
    while (SDL_PollEvent(address(ev)) != 0) {
      const etype = ev.type;
      /*
      sdl_log("event", cast_int(ev.type));
       */
      if (etype == SDL_WINDOWEVENT) {
	if (ev.window.event == SDL_WINDOWEVENT_RESIZED) {
	  update_window_size();
	} else if (ev.window.event == SDL_WINDOWEVENT_HIDDEN) {
	  sdl_log("hidden ", ev.window.windowID);
	} else if (ev.window.event == SDL_WINDOWEVENT_MINIMIZED) {
	  sdl_log("minimized ", ev.window.windowID);
	} else if (ev.window.event == SDL_WINDOWEVENT_FOCUS_LOST) {
	  paused = true;
	  sdl_log("focuslost ", ev.window.windowID);
	  sdlc.pause();
	} else if (ev.window.event == SDL_WINDOWEVENT_RESTORED) {
	  sdl_log("restored ", ev.window.windowID);
	} else if (ev.window.event == SDL_WINDOWEVENT_FOCUS_GAINED) {
	  sdl_log("focusgained ", ev.window.windowID);
	  paused = false;
	  sdlc.resume();
	  // sdlc.make_current();
	  sdl_log("gl version ", sdlc.get_gl_version());
	  if (sconf.auto_reload) {
	    reload_shaders();
	  }
	  // シェーダのリロードが成功したかどうかをdata1にセットする
	  ev.window.data1 = engine_status ? 1 : 0;
	  debug_log("reload: engine status", ev.window.data1);
	  frctl.start();
          fr.reset();
	} else {
	  /*
	  sdl_log("window event ", cast_int(ev.window.event));
	  */
	}
      } else if (etype == SDL_QUIT) {
	sdl_log("quit");
	done = true;
	break;
      }
      /* invoke event handler */
      app->on_event(ev, actrl, frctl.frame_speed_mul);
    }
    // fr.save_ticks("event");
    // if (!sdlc.joysticks.empty()) {
    {
      sdlc.update_joystick_info(); // FIXME? 
      SDL_JoystickUpdate();
      if (sdlc.joysticks.size() != joysticks.size()) {
	joysticks.resize(sdlc.joysticks.size(), joystick_state());
      }
    }
    for (const i: 0 .. joysticks.size()) {
      const& hnd = *sdlc.joystick_handles[i];
      const& inf = sdlc.joysticks[i];
      mutable& st = joysticks[i];
      if (st.axes.size() != inf.num_axes) {
	st.axes.resize(inf.num_axes, 0);
      }
      if (st.buttons.size() != inf.num_buttons) {
	st.buttons.resize(inf.num_buttons, false);
      }
      if (st.hats.size() != inf.num_hats) {
	st.hats.resize(inf.num_hats, 0);
      }
      for (const j: 0 .. inf.num_axes) {
	const v = SDL_JoystickGetAxis(hnd.get(), static_cast{int}(j));
	st.axes[j] = v;
      }
      for (const j: 0 .. inf.num_buttons) {
	const v = SDL_JoystickGetButton(hnd.get(), static_cast{int}(j));
	st.buttons[j] = (v != 0);
      }
      for (const j: 0 .. inf.num_hats) {
	const v = SDL_JoystickGetHat(hnd.get(), static_cast{int}(j));
	st.hats[j] = v;
      }
      // debug_log(i, "axes", st.axes, "btns", st.buttons, "hats", st.hats);
    }
    // fr.save_ticks("joy");
    {
      int numkeys;
      const ksp = SDL_GetKeyboardState(address(numkeys));
      const ks = ksp.to_cslice(static_cast{size_t}(numkeys));
      /* invoke key handler */
      app->on_scankeys(ks, joysticks, frctl.frame_speed_mul);
    }
    fr.save_ticks("keys");
    app->on_frame();
    fr.save_ticks("app_on_frame");
    if (paused) {
      SDL_Delay(10);
      return done;
    }
    /* motion and prepare instance data */
    {
//debug_log(fr.fps, "fps");
      const mess = string_join{" "}(fr.fps, frctl.frame_speed_mul,
	0.0f,
	saved_stat_num_objects);
      if (async_motion_thread) {
	motion_thr.some->finish();
	{
	  mutable& mts = *motion_thr.some->shared;
	  // mts.cam = pgs.cam;
	  mts.frame_speed_mul = frctl.frame_speed_mul;
	  mts.message = mess;
	  pgs.ddata.local_whole_instances.swap(mts.whole_instances);
	  saved_stat_num_objects = mts.stat_num_objects;
          app->on_motion_post();
          app->on_motion_pre();
	}
	motion_thr.some->start();
      } else {
	{
	  mutable& mts = *motion_thr.some->shared;
	  // mts.cam = pgs.cam;
	  mts.frame_speed_mul = frctl.frame_speed_mul;
	  mts.message = mess;
	  pgs.ddata.local_whole_instances.swap(mts.whole_instances);
          app->on_motion_pre();
	}
	motion_thr.some->start();
	motion_thr.some->finish();
	{
	  mutable& mts = *motion_thr.some->shared;
	  pgs.ddata.local_whole_instances.swap(mts.whole_instances);
	  saved_stat_num_objects = mts.stat_num_objects;
          app->on_motion_post();
	}
      }
    }
    // FIXME: shadowmapping
    {
      // const cam_inv = cam_drawing_frame.cam.conjugate().to_mat3();
      /*
      const cam_inv = cam_drawing_frame.camera.angle.to_mat3().inverse(); // TODO:slow
      mutable pers = cam_drawing_frame.camera_pers;
      pers.far /= 10.0f;
      const w2 = pers.width * pers.far / pers.near;
      const h2 = pers.height * pers.far / pers.near;
      farray{glm::vec3, 8} arr;
      arr[0] = cam_inv * glm::make_vec3(-pers.width, -pers.height, pers.near);
      arr[1] = cam_inv * glm::make_vec3( pers.width, -pers.height, pers.near);
      arr[2] = cam_inv * glm::make_vec3( pers.width,  pers.height, pers.near);
      arr[3] = cam_inv * glm::make_vec3(-pers.width,  pers.height, pers.near);
      arr[4] = cam_inv * glm::make_vec3(-w2, -h2, pers.far);
      arr[5] = cam_inv * glm::make_vec3( w2, -h2, pers.far);
      arr[6] = cam_inv * glm::make_vec3( w2,  h2, pers.far);
      arr[7] = cam_inv * glm::make_vec3(-w2,  h2, pers.far);
      glm::vec3 mi = arr[0];
      glm::vec3 mx = arr[0];
      for (size_t i: 1 .. 8) {
	mi.x = min(mi.x, arr[i].x);
	mi.y = min(mi.y, arr[i].y);
	mi.z = min(mi.z, arr[i].z);
	mx.x = max(mx.x, arr[i].x);
	mx.y = max(mx.y, arr[i].y);
	mx.z = max(mx.z, arr[i].z);
      }
      */
      /*
      debug_log("mi", mi.to_cslice(), "mx", mx.to_cslice());
      */
      /*
      cam_drawing_frame.sm_projection =
	glm::ortho(mi.x, mx.x, mi.y, mx.y, mi.z, mx.z);
      */
      /*
      debug_log("lipos", cam_drawing_frame.light.position.to_slice());
      debug_log("liang", cam_drawing_frame.light.angle.to_slice());
      debug_log("capos", cam_drawing_frame.camera.position.to_slice());
      debug_log("caang", cam_drawing_frame.camera.angle.to_slice());
      */
      // cam_drawing_frame.light.position = glm::make_vec3(0.0f, -60.0f, 0.0f);
      // cam_drawing_frame.light.angle = glm::make_quat_wxyz(0.70711f, 0.70711f, 0.0f, 0.0f);
      /*
      */
// FIXME : here
    }
    fr.save_ticks("motion");
    pgs.frame_begin();
    {
      /* draw frame */
      varray{uint} tick_draw;
      tick_draw = pgs.draw_frame();
      if (tick_draw.size() >= 2) {
	fr.save_ticks_value(tick_draw[0], "dr0");
	fr.save_ticks_value(tick_draw[1], "dr1");
      } else {
	fr.save_ticks("dr0");
	fr.save_ticks("dr1");
      }
    }
    frctl.rate_control();
    fr.save_ticks("ratectrl");
    app->on_draw_finished();
    SDL_GL_SwapWindow(sdlc.sdl_window);
    fr.save_ticks("swapwindow");
    if (frctl.vsync != 0 && dummy_flip == 0) {
      // vsync有効でdummy_flipが0のときは自動でdummy_flipを入れる
      int ti = static_cast{int}(SDL_GetTicks()) * 60;
      int flip_count = 0;
      debug_log("target_tick,ti,delay", target_tick, ti, ti - target_tick);
      if (target_tick - ti < -20000) {
	target_tick = ti + 1000;
	debug_log("adjusting prev_tick = ti - 20000");
      } else if (target_tick - ti > 20000) {
	target_tick = ti + 1000;
	debug_log("adjusting prev_tick = ti + 20000");
      } else {
	flip_count = max((ti - 5000 - target_tick) / 1000, 0);
	target_tick += (flip_count + 1) * 1000;
      }
      debug_log("flip_count", flip_count);
      if (flip_count > 2) {
	flip_count = 2;
      }
      for (int i: 0 .. flip_count) {
	pgs.draw_frame_lastpass();
	SDL_GL_SwapWindow(sdlc.sdl_window);
      }
      frctl.frame_speed_mul = static_cast{float}(flip_count + 1);
    } else {
      // dummy_flipが2以上のときはdummy_flipを入れる
      for (const i: 1 .. dummy_flip) {
	pgs.draw_frame_lastpass();
	SDL_GL_SwapWindow(sdlc.sdl_window);
      }
    }
    pgs.frame_end();
    // debug_log("swapwindow");
    if (glfinish) {
      // debug_log("glfinish");
      // glFlush();
      glFinish();
      // vsync有効のときglFinishを入れたほうが60fpsぎりぎり間に合うばあいに
      // フレームが乱れなくなる
    }
    fr.save_ticks("glfinish");
    fr.next_ent();
    // if (scene_next_flag) { frctl.start(); }
    return done;
  }
  /* app_ctrl_i methods */
  public function glm::uvec2 get_drawable_size() const
  {
    int w;
    int h;
    SDL_GL_GetDrawableSize(sdlc.sdl_window, address(w), address(h));
    return glm::make_uvec2(static_cast{uint}(w), static_cast{uint}(h));
  }
  public function glm::uvec2 get_window_size() const
  {
    int w;
    int h;
    SDL_GetWindowSize(sdlc.sdl_window, address(w), address(h));
    return glm::make_uvec2(static_cast{uint}(w), static_cast{uint}(h));
  }
  public function void set_param(string const& k, string const& v)
  {
    if (k == "vsync") {
      frctl.toggle_vsync();
    } else if (k == "fullscreen") {
      toggle_fullscreen();
    } else if (k == "reload") {
      reload_shaders();
    } else if (k == "dummy_flip") {
      dummy_flip = (dummy_flip + 1) % 5;
      debug_log("dummy_flip", dummy_flip);
    } else {
      debug_log("unknown command:", k, v);
    }
  }
  public function void geometry_changed()
  {
    update_window_size();
  }
}

