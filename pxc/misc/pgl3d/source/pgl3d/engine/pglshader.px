private namespace pgl3d::engine::pglshader "export-unsafe";
public import common -;
public import pointer::raw -;
public import pointer::raw_unsafe -;
public import numeric::fpmath -;
public import glm;
public import glm::raw;
public import io::time -;
public import exception -;
public import meta m;
public import pointer::tfuncptr -;
public import opengl::compat -;
public import pgl3d::geometry::funcs -;
public import pgl3d::opengl::glresource -;
public import pgl3d::opengl::glshader -;
public import pgl3d::opengl::glbuffer -;
public import pgl3d::opengl::shader_config -;
public import pgl3d::opengl::aggregated_ibuffer -;
public import pgl3d::opengl::resource_pool -;
public import pgl3d::opengl::framebuffer -;
public import pgl3d::drawer::base -;
public import pgl3d::engine::pglbase -;
public import pgl3d::engine::intern_pool -;

public struct
pglshader(shader_config const& sconf0, drawer_shared const& ds0,
  varray{ptr{pgldrawer_export_i}} const& drawsteps0, int width0,
  int height0)
<make_vertices_i>
{
  public shader_config const glc = sconf0;
  public drawer_shared ds = ds0;
  public ptr{resource_pool} const respool =
    pointer_downcast{ptr{resource_pool}}(ds.gl_resources);
  public draw_data ddata = draw_data(glc);
    // 頂点データのコピー、インスタンスデータを保持
  public varray{ptr{drawstep_i}} drawsteps = downcast_drawsteps(drawsteps0);
  public tree_map{vbid_t, ptr{drawstep_i}} drawsteps_by_vbid =
    get_drawsteps_by_vbid(ds, drawsteps0);
    // vbidからdrawstepを返す。vbidにinvalidを返すdrawstepは含まない。
    // 同じvbidを返すdrawstepが複数あるときは最初のものだけが入る。
  public tptr{prepinstf_table} const pidft = make_tptr{prepinstf_table}();
  private auto_vertexarray vtxarr;
  init();
  // resize_screen(width0, height0, width0, height0);
  public function void set_vertex_buffer(vbid_t vbid,
    ptr{vertex_buffer} const& p) {
    if (ddata.vertex_buffers.size() <= static_cast{size_t}(vbid)) {
      ddata.vertex_buffers.resize(vbid + 1u,
        make_ptr{vertex_buffer}(0u, false, false));
    }
    ddata.vertex_buffers[vbid] = p;
  }
  private function void init()
  {
    sdl_log("pglshader init");
    /*
    {
      int val;
      glGetIntegerv(GL_MAX_VERTEX_UNIFORM_VECTORS, address(val));
      sdl_log("GL_MAX_VERTEX_UNIFORM_VECTORS", val);
    }
    */
    /*
    {
      int val;
      glGetIntegerv(GL_DEPTH_BITS, address(val));
      sdl_log("depth bits", val);
    }
    */
    if (m::is_true{is_gl3_or_gles3}) {
      vtxarr.generate();
      glBindVertexArray(vtxarr.get());
      sdl_log("glBindVertexArray", vtxarr.get());
    }
    if (m::not{is_gles}) {
      farray{float, 2} arr;
      float step;
      glGetFloatv(GL_POINT_SIZE_RANGE, arr.to_rawptr());
      glGetFloatv(GL_POINT_SIZE_GRANULARITY, address(step));
      sdl_log("GL_POINT_SIZE_RANGE", arr, step);
    }
    if (m::and{is_gl3_or_gles3, m::not{is_gles}}) {
      if (glc.enable_msaa != 0) {
	glEnable(GL_MULTISAMPLE);
      }
    }
    /*
    */
    if (m::not{is_gles}) {
      if (!glc.is_gl3_or_gles3()) {
	glEnable(GL_POINT_SPRITE);
	sdl_log("GL_POINT_SPRITE enabled");
      }
      glEnable(GL_VERTEX_PROGRAM_POINT_SIZE);
    }
    for (const vbid, const& p: drawsteps_by_vbid) {
      mutable& pidftv = *pidft;
      size_t j = vbid;
      if (pidftv.size() <= j) {
        pidftv.resize(j + 1, make_tfuncptr{prepare_instance_data_noop}());
      }
      pidftv[j] = p->get_prepare_instance_data_funcptr();
      set_vertex_buffer(vbid, p->make_vertex_buffer());
    }
    sdl_log("pglshader init done");
  }
  public function void prepare(node_factory mutable& nfac_r)
  {
    prepare_builtin_vertex_sets();
    prepare_vertex_buffers();
    prepare_whole_instances();
    prepare_node_factory(nfac_r);
  }
  private function void prepare_builtin_vertex_sets()
  {
    for (const vbid, const& p: drawsteps_by_vbid) {
      const name = p->builtin_vertex_set_name();
      if (name.empty()) {
	continue;
      }
      const vtx = make_vertices(vbid, name);
      p->make_builtin_vertex_sets(vtx);
      debug_log("make builtin vertex set", name);
    }
  }
  private function void prepare_vertex_buffers()
  {
    for (const i, const& bo: ddata.vertex_buffers) {
      bo->create_vbo();
    }
  }
  private function void prepare_whole_instances()
  {
    ddata.local_whole_instances.resize(
      ddata.vertex_buffers.size(), bo_instances_type());
    for (const i, const& bo: ddata.vertex_buffers) {
      mutable& instances = ddata.local_whole_instances[i];
      for (const j: 0 .. bo->vs_arr.size()) {
	instances.push_back(instance_data());
      }
    }
  }
  private function void prepare_node_factory(node_factory mutable& nf) const
  {
    for (const vbid, const& bop: ddata.vertex_buffers) {
      for (const& n, const id: bop->vs_names) {
	if (bop->is_sub_drawer) {
	  // sub_drawer vbid must not used for joint_id
	  debug_log("is_sub_drawer skipped", n, "vbid=", vbid);
	  continue;
	}
	joint_id_type jid;
	jid.vbid = static_cast{vbid_t}(vbid);
	jid.vsid = id;
	mutable& ent = nf.name_to_id[n];
	if (ent.vbid != vbid_invalid()) {
	  debug_log("warning: duplicated node name", n, ent, jid);
	}
	ent = jid;
	// nf.name_to_id[n] = jid;
      }
      nf.binfo.push_back(node_buffer_info());
      node_buffer_info mutable& nbi = nf.binfo[nf.binfo.size() - 1];
      for (const i, const& vsp: bop->vs_arr) {
	nbi.vs_arr.push_back(node_vs_info());
	node_vs_info mutable& nvi = nbi.vs_arr[nbi.vs_arr.size() - 1];
	for (const j, const& nj: vsp->vtxs->joints) {
	  node_joint_info nji;
	  nji.joint_id = find_joint_id_by_name(nj.joint_name);
	  nji.trans = nj.trans;
	  nvi.joints.push_back(nji);
	}
      }
    }
  }
  public function joint_id_type find_joint_id_by_name(cstrref const& name)
    const
  {
    joint_id_type scene_id;
    for (const i, const& bo: ddata.vertex_buffers) {
      // sub-drawer vbid must not used for joint_id
      if (!bo->is_sub_drawer && bo->has_name(name)) {
        scene_id.vbid = static_cast{vbid_t}(i);
        scene_id.vsid = bo->get_id_by_name(name);
        break;
      }
    }
    return scene_id;
  }
  public function cptr{vertices} get_nonempty_vertices(cstrref const& name)
    const
  {
    joint_id_type scene_id;
    for (const i, const& bo: ddata.vertex_buffers) {
      // allow sub-drawer vbid
      if (bo->has_name(name)) {
        scene_id.vbid = static_cast{vbid_t}(i);
        scene_id.vsid = bo->get_id_by_name(name);
	if (!ddata.vertex_buffers[scene_id.vbid]->get_vertices(scene_id.vsid)
	    ->vertex_values.empty()) {
	  break;
	}
      }
    }
    return ddata.vertex_buffers[scene_id.vbid]
      ->get_vertices(scene_id.vsid);
  }
  public function joint_id_type get_joint_id(cstrref const& name) const {
    return find_joint_id_by_name(name);
  }
  public function tree_map{string, joint_id_type} get_name_to_joint_id() const
  {
    tree_map{string, joint_id_type} r;
    for (const vbid, const& vb: ddata.vertex_buffers) {
      for (const& vsname, const vsid: vb->vs_names) {
	joint_id_type jid;
	jid.vbid = static_cast{vbid_t}(vbid);
	jid.vsid = vsid;
	r.insert(vsname, jid);
      }
    }
    return r;
  }
  public function ptr{vertices} make_vertices(vbid_t vbid,
    cstrref const& shape_name)
  {
    // debug_log("make_vertices", name, vbid);
    return ddata.vertex_buffers[vbid]->make_if(shape_name)->vtxs;
  }
  public function void make_vertex_set(cslice{string} const& dr_names,
    cstrref const& shape_name, gf_poly const& expr)
  {
    // make vertex set by geometry expression
    // TODO: dr_names[0]はsubdrawerであってはならず、残りはsubdrawer
    // でなければならない。さもないと頂点セットの名前からvsidを引くとき
    // の一意性がなくなる。
    // TODO: shape_nameは未使用のものでなくてはならない。
    varray{ptr{vertices}} vptrs;
    varray{dgf_filler} fillers;
    for (const i, const& dr_name: dr_names) {
      const vbid = ds.vbid_pool->to_id(dr_name);
      debug_log("make_vertex_set", dr_name);
      const dp = *drawsteps_by_vbid.equal_range(vbid);
      ptr{vertices} vptr = make_vertices(vbid, shape_name);
      dgf_filler filler = dp->make_filler(vptr);
      vptrs.push_back(vptr);
      fillers.push_back(filler);
    }
    // debug_log("make_vertex_set", shape_name);
    ptr{build_context_i} ctx = make_ptr{build_context_impl}(vptrs, fillers);
    expr(*ctx, poly_t(), mesh_index());
  }
  public function void make_vertex_set_by_triangles(string const& dr_name,
    cstrref const& shape_name, cslice{vertex_attr} const& vattrs,
    cslice{float} const& verts, size_t nfpv, cslice{uint} const& elems)
  {
    const vbid = ds.vbid_pool->to_id(dr_name);
    ptr{vertices} vptr = make_vertices(vbid, shape_name);
    vptr->set_triangles(vattrs, verts, nfpv, elems);
  }
  public function texture_info get_texture_info(cstrref const& name) const
  {
    texture_info r;
    for (const vbid, const& p: drawsteps_by_vbid) {
      r = p->get_texture_info(name);
      if (r.surface_w != 0) {
	break;
      }
    }
    return r;
  }
  public function vbid_t get_vbid(cstrref const& name) const
  {
    if (ds.vbid_pool->exists(name)) {
      return ds.vbid_pool->to_id(name);
    } else {
      return vbid_invalid();
    }
  }
  public function void resize_screen()
  {
    /*
    const virt_scale = glc.conf.get("virt_scale", 1.0f, 0.125f, 16.0f);
    const virt_width = static_cast{int}(static_cast{float}(disp_width)
      / virt_scale);
    const virt_height = static_cast{int}(static_cast{float}(disp_height)
      / virt_scale);
    const sm_size = glc.shadowmap_resolution;
    sdl_log("disp size", disp_width, disp_height);
    sdl_log("virt size", virt_width, virt_height);
    */
    /*
    cam.virt_width = virt_width;
    cam.virt_height = virt_height;
    cam.display_width = disp_width;
    cam.display_height = disp_height;
    cam.window_width = w_width;
    cam.window_height = w_height;
    cam.shadowmap_size = sm_size;
    */
    for (const i, const& pd: drawsteps) {
      pd->resize_screen(glc);
    }
    /*
    update_mvp(glc, cam);
    */
  }
  public function bool reload_shaders()
  {
    bool r = true;
    for (const i, const& pd: drawsteps) {
      bool x = pd->reload_shaders(glc);
      r = r && x;
    }
    return r;
  }
}

public function varray{uint}
pglshader_draw_frame(pglshader mutable& pgs)
{
  return pglshader_draw_frame_internal(false, pgs);
}

public function varray{uint}
pglshader_draw_frame_lastpass(pglshader mutable& pgs)
{
  return pglshader_draw_frame_internal(true, pgs);
}

public function void
pglshader_frame_begin(pglshader mutable& pgs)
{
  pgs.ddata.agg_ibuffer.frame_begin(pgs.ddata.local_whole_instances);
}

public function void
pglshader_frame_end(pglshader mutable& pgs)
{
  pgs.ddata.agg_ibuffer.frame_end();
}

function varray{uint}
pglshader_draw_frame_internal(bool lastpass, pglshader mutable& pgs)
{
  // TODO: lastpassが真なら、ディスプレイ直近のフレームバッファからの描画のみを
  // 実行する。これはdummy_flipのために使う。それ以外の描画ではlastpassは偽。
  const tick1 = SDL_GetTicks();
  int saved_fb = 0;
  glGetIntegerv(GL_FRAMEBUFFER_BINDING, address(saved_fb));
  pgs.ddata.toplevel_fb = static_cast{uint}(saved_fb);
  for (const i, const& ds: pgs.drawsteps) {
    ds->draw_drawstep(pgs.ddata);
  }
  const tick2 = SDL_GetTicks();
  return make_varray{uint}(tick1, tick2);
}

/* private */

private function tree_map{vbid_t, ptr{drawstep_i}}
get_drawsteps_by_vbid(drawer_shared const& ds,
  varray{ptr{pgldrawer_export_i}} const& drawsteps)
{
  tree_map{vbid_t, ptr{drawstep_i}} r;
  for (const i: 0 .. drawsteps.size()) {
    const p = pointer_downcast{ptr{drawstep_i}}(drawsteps[i]);
    const vbid = p->get_vbid();
    if (vbid != vbid_invalid()) {
      r.insert(vbid, p); // 同じvbidがすでにあった場合はinsertされない
    }
  }
  return r;
}

private function varray{ptr{drawstep_i}}
downcast_drawsteps(varray{ptr{pgldrawer_export_i}} const& drawsteps)
{
  varray{ptr{drawstep_i}} r;
  for (const i, const& e: drawsteps) {
    r.push_back(pointer_downcast{ptr{drawstep_i}}(e));
  }
  return r;
}

private threaded struct
build_context_impl(varray{ptr{vertices}} mutable& vptrs0,
  varray{dgf_filler} mutable& fillers0)
  <build_context_i>
{
  public varray{ptr{vertices}} vptrs;
  public varray{dgf_filler} fillers;
  vptrs.swap(vptrs0);
  fillers.swap(fillers0);
  function void fill(bool flat_flag, bool polyjoint, size_t n,
    string const& joint_name, poly_t const& poly, mesh_index const& mp) const
  {
    if (joint_name.empty()) {
      // debug_log("fill n=", n);
      fillers[n](flat_flag, poly, mp);
    } else if (polyjoint) {
      // debug_log("polyjoint n=", joint_name);
      for (const i, const& vptr: vptrs) {
	dgf_poly_joint_internal(vptr, joint_name, poly, mp);
      }
    } else {
      // debug_log("pointjoint n=", joint_name);
      for (const i, const& vptr: vptrs) {
	dgf_point_joint_internal(vptr, joint_name, poly, mp);
      }
    }
  }
}

private threaded function void
dgf_poly_joint_internal(ptr{vertices} const& vptr, string const& joint_name,
  poly_t const& poly, mesh_index const& mp)
{
  // calculates normal/tangent from poly
  if (poly.size() < 1) { return; }
  node_joint e;
  e.trans = poly_trans(poly);
  e.joint_name = joint_name;
  vptr->push_joint(e);
}

private threaded function void
dgf_point_joint_internal(ptr{vertices} const& vptr, string const& joint_name,
  poly_t const& poly, mesh_index const& mp)
{
  if (poly.size() < 1) { return; }
  const p = poly[0].pos;
  const ex = poly[0].nor.normalize();
  const ey = poly[0].tan.normalize();
  const ez = glm::cross(ex, ey);
  node_joint e;
  e.trans = glm::make_mat4(
    ex.x, ex.y, ex.z,  0.0,
    ey.x, ey.y, ey.z,  0.0,
    ez.x, ez.y, ez.z,  0.0,
     p.x,  p.y,  p.z,  1.0);
  e.joint_name = joint_name;
  vptr->push_joint(e);
}

