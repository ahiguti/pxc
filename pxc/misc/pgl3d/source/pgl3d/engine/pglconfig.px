public threaded namespace pgl3d::engine::pglconfig "use-unsafe";
public import common -;
public import pointer::raw -;
public import numeric::fpmath -;
public import glm;
public import io::time -;
public import exception -;
public import meta m;
public import text::positional -;
private import opengl::compat -;
private import pointer::raw_unsafe -;

public metafunction string_map tree_map{string, string};

public valuetype struct pgl3d_config(cstrref const& confstr)
{
  private string_map m;
  /*
  public function string_map get_all() const
  {
    return m;
  }
  */
  public function {t} t get(string const& key, t const& defval, t const& mi,
    t const& mx) const
  {
    if (const& v: m[key]) {
      const r = from_string{t}(v);
      if (mi != mx) {
	if (r < mi) {
	  return mi;
	}
	if (r > mx) {
	  return mx;
	}
      }
      return r;
    } else {
      return defval;
    }
  }
  init(confstr);
  function void init(cstrref const& confstr)
  {
    // println(cnf);
    threaded function void ln(cstrref const& line)
    {
      const a = make_farray_split{2}(line, '=');
      if (!a[0].empty()) {
	m[a[0]] = a[1];
      }
    }
    split_foreach{ln}(confstr, '\n');
    debug_log("config", m);
  }
}

