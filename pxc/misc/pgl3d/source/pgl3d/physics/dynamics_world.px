public namespace pgl3d::physics::dynamics_world "use-unsafe";
public import common -;
public import exception -;
public import pointer::raw -;
public import meta m;
public import meta::vararg va;
public import pgl3d::engine::scene_node -;
public import numeric::fpmath -;
public import procedure::thread::async_task -;
public import glm;
public import pgl3d::physics::collision_shape -;
private import meta::platform mp;
private import bullet_physics::base -;
private import bullet_physics::constants -;
private import bullet_physics::api +;
private import bullet_physics::all -;
private import pointer::raw_unsafe -;
private import pgl3d::texture::editable_voxel -;
private import pgl3d::physics::grid_broadphase -;
private import pgl3d::physics::collision_gjk -;

public threaded interface
rigid_body_i rigid_body
{
  public function joint_id_type get_joint_id() const;
  public function float get_mass() const;
  public function void apply_central_impulse(float x, float y, float z);
  public function void apply_torque_impulse(float x, float y, float z);
  public function void set_linear_velocity(float x, float y, float z);
  public function void set_angular_velocity(float x, float y, float z);
  public function void get_world_transform_mat4(glm::mat4 mutable& m);
  public function bool get_collide() const;
    // TODO: 単なるフラグではなく詳細な情報をとれるようにする
}

public threaded function ptr{rigid_body_i}
make_rigid_body(joint_id_type const& joint_id,
  ptr{collision_shape_i} const& shape, float mass, cslice{float} const& t)
{
  const m3 = btMatrix3x3_(
    t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]);
  const v3 = btVector3_(t[12], t[13], t[14]);
  const btr = btTransform_(m3, v3);
  const sh = pointer_downcast{ptr{collision_shape_i}}(shape);
  return make_ptr{rigid_body}(joint_id, sh, mass, btr);
}

public threaded interface
dynamic_object_i
{
  public function void on_collide();
  public function void on_step(float speed);
}

public multithreaded interface
swarm_i
{
  public function size_t size() const;
  public function uint get(size_t i, glm::vec3 mutable& pos_r,
    float mutable& radius_r) const;
  public function void on_collide(size_t i, size_t dynobj_id);
  public function void on_step(float speed);
}

private tsvaluetype struct grid_rbinfo
{
  public btTransform trans;
  public crawptr{collision_shape_i} colshape;
  public function glm::vec3 get_aabb_min() const {
    const& org = trans.cgetOrigin();
    const radius = colshape->get_radius();
    return glm::make_vec3(
      org.x() - radius,
      org.y() - radius,
      org.z() - radius);
  }
  public function glm::vec3 get_aabb_max() const {
    const& org = trans.cgetOrigin();
    const radius = colshape->get_radius();
    return glm::make_vec3(
      org.x() + radius,
      org.y() + radius,
      org.z() + radius);
  }
}

private multithreaded struct
grid_bp_shared(size_t i0, size_t n0, tptr{texture_edit} const& tex0,
  tptr{texture_updates} const& tu0, bool exec_voxel_collision0)
{
  public size_t const split_i = i0; // unused
  public size_t const split_n = n0; // unused
  public tptr{texture_edit} const tex = tex0; // FIXME: ロック集中しないか
  public tptr{texture_updates} const tu = tu0; // FIXME: 同じく
  public rawptr{grid_rbinfo} grid_rbinfo_array_ptr;
  public size_t grid_rbinfo_array_size;
    // grid_rbinfo_array_ptrとsizeはdynamics_worldのgrid_rbinfo_arrayを
    // さしている。grid_bp_thread_object::call__を子スレッドで実行中は
    // dynamics_worldのgrid_rbinfo_arrayを変更してはならない。
    // TODO: rwlockを使うと安全になる。
  public float grid_mesh_size = 1.0f;
  public varray{tptr{swarm_i}} swarms;
  public bool exec_voxel_collision = exec_voxel_collision0;
  public varray{uint} col_to_voxel; // voxelへ衝突したgrid_rbinfo
  /*
  public bool run_flag = false;
  public bool term_flag = false;
  */
  public double tm0;
  public double tm1;
  public double tm2;
  public double tm3;
}

private threaded struct
grid_bp_thread_object(tptr{grid_bp_shared} const& shared0)
<callable{void, m::nil}>
{
  public grid_broadphase mutable grid_bp = grid_broadphase(6, 10.0f);
  public varray{bool} grid_bp_work_near;
  public varray{uint} grid_bp_work_near_ents;
  public tptr{grid_bp_shared} sharedp = shared0;
  public function void call__()
  {
    mutable& shared = *sharedp;
    if (shared.exec_voxel_collision) {
      do_voxel_collision(shared);
      return;
    }
    // debug_log("grid_bp_thread_object::call__", shared.swarms.size());
    // grid_bp.set_mesh_size(shared.grid_mesh_size);
    grid_bp.set_mesh_size(10.0f);
    const grid_rbinfo_array = shared.grid_rbinfo_array_ptr.to_slice(
      shared.grid_rbinfo_array_size); // create slice from rawptr and size
    shared.tm1 = io::debug_system().high_resolution_timer_double();
    if (shared.tm1 - shared.tm0 > 0.1) {
      // debug_log("step t0", t0 - shared.tm1, grid_rbinfo_array.size());
    }
    /* この処理は同じ内容を全スレッドで実行している。一つにまとめた
     * ほうが速いか？ */
    grid_bp.add_objects(grid_rbinfo_array);
    shared.tm2 = io::debug_system().high_resolution_timer_double();
    /*
    debug_log("fillings", rad_avg, grid_rbinfo_array.size(),
      grid_bp.fillings.size());
    */
    glm::vec3 pos;
    float radius;
    // collision_gjk gjk;
    size_t bp_count = 0;
    size_t bp1_count = 0;
    size_t np_count = 0;
    size_t np1_count = 0;
    if (grid_bp_work_near.size() < grid_rbinfo_array.size()) {
      grid_bp_work_near.resize(grid_rbinfo_array.size(), false);
    }
    for (const i, const& swp: shared.swarms) {
      mutable& sw = *swp;
      // debug_log("i", i);
      for (const j: 0 .. sw.size()) {
	// debug_log("j", j);
	/*
	if (j + 1 < sz) {
	  // prefetch
	  if (sw.get(j + 1, pos, radius) != 0U) {
	    const btpos = btVector3_(pos.x, pos.y, pos.z);
	    const d = glm::make_vec3(radius, radius, radius);
	    grid_bp.prefetch(pos - d, pos + d);
	  }
	}
	*/
	if (sw.get(j, pos, radius) != 0U) {
	  const btpos = btVector3_(pos.x, pos.y, pos.z);
	  const d = glm::make_vec3(radius, radius, radius);
	  threaded function bool near_cb(col_id_type col_id) {
	    ++bp_count;
	    if (!grid_bp_work_near[col_id]) {
	      grid_bp_work_near[col_id] = true;
	      grid_bp_work_near_ents.push_back(col_id);
	    }
	    return false;
	  }
	  grid_bp.find{near_cb}(pos - d, pos + d);
	  bp1_count += grid_bp_work_near_ents.size();
	  for (const k, const col_id: grid_bp_work_near_ents) {
	    grid_bp_work_near[col_id] = false;
	    // sw.on_collide(j, col_id);
	    const& rbi = grid_rbinfo_array[col_id];
	    const& rbpos = rbi.trans.cgetOrigin();
	    const rel = glm::make_vec3(pos.x - rbpos.x(), pos.y - rbpos.y(),
	      pos.z - rbpos.z());
	    const reldist2 = glm::dot(rel, rel);
	    const radsum = rbi.colshape->get_radius() + radius;
	    if (reldist2 >= radsum * radsum) {
	      continue;
	    }
	    ++np_count;
	    /*
	    const p = rbi.shape.dynamic_cast{btConvexShape}();
	    if (!gjk.collide_convex_sphere(*p, rbi.trans, radius, btpos)) {
	      continue;
	    }
	    */
	    ++np1_count;
	    if (rbi.colshape->has_near_collision()) {
	      const trinv = rbi.trans.inverse(); // FIXME: don't use inverse()
	      // FIXME: ただしこのinverseはmat4の逆行列計算ほどは遅くないはず
	      // FIXME: avoid conversion between btVector and vec3
	      const lpos = op_mul{btTransform, btVector3, btVector3}(trinv,
		btVector3_(pos.x, pos.y, pos.z));
	      if (!rbi.colshape->near_collision(
		glm::make_vec3(lpos.x(), lpos.y(), lpos.z()), radius,
		  shared.tex, shared.tu)) {
		//debug_log("near_collision: false");
		continue;
	      } else {
		//debug_log("near_collision: true");
	      }
	    }
	    sw.on_collide(j, col_id);
	  }
	  grid_bp_work_near_ents.clear();
	}
      }
    }
    // debug_log("bp", bp_count, bp1_count, "np", np_count, np1_count);
    shared.tm3 = io::debug_system().high_resolution_timer_double();
    /*
    debug_log("bp", shared.split_i,
      shared.tm1 - shared.tm0,
      shared.tm2 - shared.tm1,
      shared.tm3 - shared.tm2);
    */
    if (shared.tm3 - shared.tm1 > 0.1) {
      // debug_log("step t1", t1 - shared.tm1);
    }
    grid_bp.clear();
  }
  function void do_voxel_collision(grid_bp_shared mutable& shared)
  {
    // swarmではないオブジェクトとvoxelオブジェクトの衝突判定
    const grid_rbinfo_array = shared.grid_rbinfo_array_ptr.to_slice(
      shared.grid_rbinfo_array_size); // create slice from rawptr and size
    // voxelとそうでないものの衝突判定
    shared.col_to_voxel.clear();
    for (const i, const& vrbi: grid_rbinfo_array) {
      const& vcolshape = *vrbi.colshape;
      if (!vcolshape.is_voxel()) {
	continue;
      }
      // debug_log("do_voxel_collision: voxel", i);
      const& vrbpos = vrbi.trans.cgetOrigin();
      const trinv = vrbi.trans.inverse();
      const vrad = vcolshape.get_radius();
      for (const j, const& rbi: grid_rbinfo_array) {
	const& jcolshape = *rbi.colshape;
	if (jcolshape.is_voxel()) {
	  continue;
	}
	// debug_log("do_voxel_collision: not voxel", j);
	const& jpos = rbi.trans.cgetOrigin();
	const jrad = jcolshape.get_radius();
	const d = op_sub{btVector3, btVector3, btVector3}(jpos, vrbpos);
	const dist2 = d.dot(d);
	const rad = vrad + jrad;
	const rad2 = rad * rad;
	if (dist2 > rad2) {
	  // debug_log("dist > rad", dist2, rad2);
	  continue;
	}
	// グローバル座標jposをvrbiのオブジェクト座標系へ
	const lpos = op_mul{btTransform, btVector3, btVector3}(trinv, jpos);
	if (!vrbi.colshape->near_collision(
	  glm::make_vec3(lpos.x(), lpos.y(), lpos.z()), jrad, shared.tex,
	  shared.tu)) {
	  // debug_log("near_collision: false");
	  continue;
	}
	shared.col_to_voxel.push_back(static_cast{uint}(j));
	// debug_log("col_to_voxel", j);
      }
    }
    // FIXME FIXME FIXME HERE
  }
}

private multithreaded struct
grid_bp_thread_factory(tptr{grid_bp_shared} const& shared0)
<async_task_factory_i>
{
  tptr{grid_bp_shared} shared = shared0;
  public function ptr{callable{void, m::nil}} call__()
  {
    return make_ptr{grid_bp_thread_object}(shared);
  }
}

private threaded struct
grid_bp_task(size_t i, size_t n, tptr{texture_edit} const& tex,
  tptr{texture_updates} const& tu, bool exec_voxel_collision)
{
  public tptr{grid_bp_shared} const shared
    = make_tptr{grid_bp_shared}(i, n, tex, tu, exec_voxel_collision);
  public task_executor executor = task_executor(
    make_tptr{grid_bp_thread_factory}(shared));
}

public threaded struct
dynamics_world(size_t num_grid_bp_tasks0, tptr{texture_edit} const& tex0,
  tptr{texture_updates} const& tu0)
{
  private metafunction broadphase_to_use
    m::cond{mp::platform_emscripten, 1, 2};
  private size_t num_grid_bp_tasks = num_grid_bp_tasks0;
  private btDefaultCollisionConfiguration mutable collisionConfiguration 
    = btDefaultCollisionConfiguration(btDefaultCollisionConstructionInfo());
  private btCollisionDispatcher mutable dispatcher
    = btCollisionDispatcher(address(collisionConfiguration));
  expand(s: m::seq{m::eq{broadphase_to_use, 2}}) {
  private btSimpleBroadphase mutable broadphase
    = btSimpleBroadphase(65536U, rawptr{btOverlappingPairCache}());
  }
  expand(s: m::seq{m::eq{broadphase_to_use, 1}}) {
  private btDbvtBroadphase mutable broadphase
    = btDbvtBroadphase(rawptr{btOverlappingPairCache}());
  }
  expand(s: m::seq{m::eq{broadphase_to_use, 0}}) {
  private bt32BitAxisSweep3 mutable broadphase
    = bt32BitAxisSweep3_(
      btVector3_(-1000.0f, -1000.0f, -1000.0f),
      btVector3_( 1000.0f,  1000.0f,  1000.0f),
      65536U, rawptr{btOverlappingPairCache}(), false);
  }
  private btSequentialImpulseConstraintSolver mutable solver;
  private btDiscreteDynamicsWorld mutable dynamicsWorld
    = btDiscreteDynamicsWorld(address(dispatcher), address(broadphase),
      address(solver), address(collisionConfiguration));
  private varray{ptr{rigid_body}} rigid_bodies;
  private varray{grid_rbinfo} grid_rbinfo_array; // same size as rigid_bodies
  private varray{ptr{grid_bp_task}} grid_bp_tasks;
  private option{ptr{grid_bp_task}} grid_bp_task_voxel_collision;
  /*
  private tptr{grid_bp_shared} const grid_bp_sharedp =
    make_tptr{grid_bp_shared}();
  private task_executor grid_bp_cli = task_executor(
    make_tptr{grid_bp_thread_factory}(grid_bp_sharedp));
  */
  private bool grid_bp_thread_running = false;
  private tptr{texture_edit} const tex_edit = tex0;
  private tptr{texture_updates} const tex_up = tu0;
  init();
  private function void init() {
    dynamicsWorld.setForceUpdateAllAabbs(false);
    // dynamicsWorld.getSimulationIslandManager()->setSplitIslands(false);
    // collision tasks for swarm objects
    for (const i: 0 .. num_grid_bp_tasks) {
      grid_bp_tasks.push_back(make_ptr{grid_bp_task}(i, num_grid_bp_tasks,
	tex_edit, tex_up, false));
    }
    // collision task for voxel objects
    grid_bp_task_voxel_collision.some = make_ptr{grid_bp_task}(0u, 0u,
      tex_edit, tex_up, true);
  }
  private function ~
  {
    clear();
  }
  public function size_t rigid_bodies_size() const {
    return rigid_bodies.size();
  }
  public function void set_gravity(float x, float y, float z)
  {
    dynamicsWorld.setGravity(btVector3_(x, y, z));
  }
  private function void check_grid_bp_thread_is_not_running() const
  {
    // grid_rbinfo_array must not be modified while grid_bp_thread is running
    if (grid_bp_thread_running) {
      throw runtime_error_template{"grid_bp thread is running"}("");
    }
  }
  public function void clear()
  {
    check_grid_bp_thread_is_not_running();
    for (size_t i, const& rb: rigid_bodies) {
      dynamicsWorld.removeCollisionObject(address(rb->rigidBody));
    }
    rigid_bodies.clear();
    grid_rbinfo_array.clear();
    for (const i, const& bpt: grid_bp_tasks) {
      bpt->shared->swarms.clear();
    }
  }
  public function void add_swarm(tptr{swarm_i} const& s, size_t num_bp)
  {
    // debug_log("add_swarm");
    grid_bp_tasks[num_bp]->shared->swarms.push_back(s);
  }
  public function void add_rigid_body(ptr{rigid_body_i} const& rb)
  {
    check_grid_bp_thread_is_not_running();
    const rb1 = pointer_downcast{ptr{rigid_body}}(rb);
    if (rb1->offset != static_cast{size_t}(-1)) {
      return; // すでにrigid_bodiesの中に登録されている
    }
    rb1->offset = rigid_bodies.size();
    grid_rbinfo rbi;
    rbi.colshape = address(*rb1->shape);
    /*
    rbi.radius = rb1->shape->get_radius();
    rbi.shape = rb1->shape->get();
    */
    // massが負のときはbtのdynamicsWorldに登録しない。0か正のときは登録する。
    // grid_rbinfo_arrayにはmassにかかわらず登録する(衝突判定だけは有効)。
    // rigid_bodiesにはmassにかかわらず登録する。
    rigid_bodies.push_back(rb1);
    grid_rbinfo_array.push_back(rbi);
    if (rb1->mass >= 0.0f) {
      dynamicsWorld.addRigidBody(address(rb1->rigidBody));
    }
  }
  public function void remove_rigid_body(ptr{rigid_body_i} const& rb)
  {
    check_grid_bp_thread_is_not_running();
    const rb1 = pointer_downcast{ptr{rigid_body}}(rb);
    const offset = rb1->offset;
    if (offset == static_cast{size_t}(-1)) {
      return; // rigid_bodiesの中に登録されていない
    }
    const sz = rigid_bodies.size();
    if (sz > 1) {
      swap(rigid_bodies[offset], rigid_bodies[sz - 1]);
      swap(grid_rbinfo_array[offset], grid_rbinfo_array[sz - 1]);
      rigid_bodies[offset]->offset = offset;
    }
    rigid_bodies.erase(sz - 1, sz);
    grid_rbinfo_array.erase(sz - 1, sz);
    if (rb1->mass >= 0.0f) {
      dynamicsWorld.removeCollisionObject(address(rb1->rigidBody));
    }
  }
  public function {f} void rigid_bodies_foreach()
  {
    for (const i, const& obj: rigid_bodies) {
      f(i, obj);
    }
  }
  public function void step_simulation(bool paused, float timestep,
    int max_sub_steps, float fixed_timestep)
  {
    const t0 = io::debug_system().high_resolution_timer_double();
    start_grid_collision();
    const t1 = io::debug_system().high_resolution_timer_double();
    if (!paused) {
      dynamicsWorld.stepSimulation(timestep, max_sub_steps, fixed_timestep);
    }
    const t2 = io::debug_system().high_resolution_timer_double();
    finish_grid_collision();
    const t3 = io::debug_system().high_resolution_timer_double();
    // debug_log("step_simulation", t1 - t0, t2 - t1, t3 - t2);
    // if (t3 - t0 > 0.001) { debug_log("slow", t1 - t0, t2 - t1, t3 - t2); }
  }
  private function void start_grid_collision()
  {
    grid_bp_thread_running = true;
    float rad_sum = 0.0f;
    // update position from rigid bodies
    {
      const rbisli = grid_rbinfo_array.range();
      for (const i, const& obj: rigid_bodies) {
	mutable& rbi = rbisli[i];
	rbi.trans = obj->rigidBody.cgetWorldTransform();
	rad_sum += rbi.colshape->get_radius();
      }
    }
    const rad_avg = rad_sum / static_cast{float}(rigid_bodies.size());
    for (const i, mutable& bpt: grid_bp_tasks) {
      {
	mutable& gsh = *bpt->shared;
	gsh.grid_rbinfo_array_ptr = grid_rbinfo_array.range().to_rawptr();
	gsh.grid_rbinfo_array_size = grid_rbinfo_array.size();
	gsh.grid_mesh_size = rad_avg * 4.0f;
	gsh.tm0 = io::debug_system().high_resolution_timer_double();
      }
      bpt->executor.start();
    }
    {
      const bpt = grid_bp_task_voxel_collision.some;
      mutable& gsh = *bpt->shared;
      gsh.grid_rbinfo_array_ptr = grid_rbinfo_array.range().to_rawptr();
      gsh.grid_rbinfo_array_size = grid_rbinfo_array.size();
      gsh.grid_mesh_size = rad_avg * 4.0f;
      bpt->executor.start();
    }
  }
  private function void finish_grid_collision()
  {
    for (const i, mutable& bpt: grid_bp_tasks) {
      bpt->executor.finish();
    }
    grid_bp_task_voxel_collision.some->executor.finish();
    grid_bp_thread_running = false;
    const& col_to_voxel = grid_bp_task_voxel_collision.some->shared
      ->col_to_voxel;
    for (const i, const id: col_to_voxel) {
      mutable& rb = *rigid_bodies[id];
      rb.collide_flag = true;
    }
  }
}

/* private */

private threaded struct
rigid_body(joint_id_type const& joint_id0,
  ptr{collision_shape_i} const& shape0, btScalar mass0,
  btTransform const& tr0)
<rigid_body_i>
{
  public joint_id_type const joint_id = joint_id0;
  public ptr{collision_shape_i} const shape = shape0;
  public btRigidBody rigidBody = makeRigidBody(shape->get(), tr0, mass0);
  public size_t offset = static_cast{size_t}(-1);
  public float const mass = mass0;
  public bool collide_flag = false;
  init();
  function void init() {
    // massが0のときはkinematic object。負のときはdynamics worldに登録しない。
    // 正のときはdynamic。
    if (mass == 0.0f) {
      rigidBody.setCollisionFlags(rigidBody.getCollisionFlags() |
	CF_KINEMATIC_OBJECT);
      rigidBody.setActivationState(DISABLE_DEACTIVATION);
    }
  }
  public function joint_id_type get_joint_id() const
  {
    return joint_id;
  }
  public function float get_mass() const
  {
    return mass;
  }
  public function void apply_central_impulse(float x, float y, float z)
  {
    rigidBody.applyCentralImpulse(btVector3_(x, y, z));
  }
  public function void apply_torque_impulse(float x, float y, float z)
  {
    rigidBody.applyTorqueImpulse(btVector3_(x, y, z));
  }
  public function void set_linear_velocity(float x, float y, float z)
  {
    rigidBody.setLinearVelocity(btVector3_(x, y, z));
  }
  public function void set_angular_velocity(float x, float y, float z)
  {
    rigidBody.setAngularVelocity(btVector3_(x, y, z));
  }
  public function void get_world_transform_mat4(glm::mat4 mutable& m)
  {
    const sli = m.to_slice();
    rigidBody.getWorldTransform().getOpenGLMatrix(sli.to_rawptr());
  }
  public function bool get_collide() const
  {
    return collide_flag;
  }
}

private threaded function btRigidBody makeRigidBody(
  crawptr{btCollisionShape} shape, btTransform const& tr0, btScalar mass)
{
  const isDynamic = (mass != 0.0f);
  mutable localInertia = btVector3_(0.0f, 0.0f, 0.0f);
  if (isDynamic) {
    shape->calculateLocalInertia(mass, localInertia);
  }
  mutable rbInfo = btRigidBody_btRigidBodyConstructionInfo(mass,
    rawptr{btDefaultMotionState}(), shape.const_cast(), localInertia);
  rbInfo.m_startWorldTransform = tr0;
  // rbInfo.m_friction = 0.0f;
  // rbInfo.m_rollingFriction = 0.0f;
  // rbInfo.m_restitution = 0.0f;
  const r = btRigidBody(rbInfo);
  return r;
}

