public namespace pgl3d::physics::bullet_test "use-unsafe";
public import common -;
public import pointer::raw -;
private import bullet_physics::base -;
private import bullet_physics::constants -;
private import bullet_physics::api -;
private import bullet_physics::all -;
private import pointer::raw_unsafe -;
private import io::time -;

{
  timing_vec3{100}();
  timing_vec3{1000}();
  timing_vec3{10000}();
  timing_vec3{100000}();
  timing_vec3{1000000}();
  timing_mat3{100}();
  timing_mat3{1000}();
  timing_mat3{10000}();
  timing_mat3{100000}();
  timing_mat3{1000000}();
}

public threaded function {size} void timing_vec3()
{
  ptr{farray{btVector3, size}} varrp = make_ptr{farray{btVector3, size}}();
  mutable& varr = *varrp;
  for (const i, mutable& v: varr) {
    const x = static_cast{float}(i + 1);
    v.setX(x);
    v.setY(x);
    v.setZ(x);
  }
  const t0 = io::debug_system().high_resolution_timer_double();
  mutable x = btVector3_(1.0f, 1.0f, 1.0f);
  float y = 1.0f;
  for (const j: 0 .. 100000 * 10000 / size) {
    for (const i, mutable& v: varr) {
      y += x.dot(v);
    }
  }
  const t1 = io::debug_system().high_resolution_timer_double();
  debug_log("timing_vec3", size, y, t1 - t0);
}

public threaded function {size} void timing_mat3()
{
  ptr{farray{btMatrix3x3, size}} marrp = make_ptr{farray{btMatrix3x3, size}}();
  mutable& marr = *marrp;
  for (const i, mutable& m: marr) {
    const x = static_cast{float}(i + 1) / static_cast{float}(marr.size() + 1);
    m.setEulerZYX(x * 0.1f, x * 0.2f, x * 0.3f);
  }
  const t0 = io::debug_system().high_resolution_timer_double();
  btMatrix3x3 mutable x;
  x.setIdentity();
  float y = 1.0f;
  for (const j: 0 .. 10000 * 10000 / size) {
    for (const i, mutable& m: marr) {
      x = op_mul{btMatrix3x3, btMatrix3x3, btMatrix3x3}(x, m);
    }
  }
  const t1 = io::debug_system().high_resolution_timer_double();
  debug_log("timing_mat3", size, x.determinant(), t1 - t0);
}

