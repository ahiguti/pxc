private threaded namespace pgl3d::drawer::dbgui "export-unsafe";
public import common -;
public import pgl3d::drawer::base -;
public import meta m;

private tsvaluetype struct dbgui_vertex_attributes()
{
  public glm::vec2 vert;
}

private tsvaluetype struct dbgui_instance_attributes()
{
  public glm::vec4 idata; // x0, y0, dx, dy
}

private tsvaluetype struct dbgui_uniforms()
{
  public int sampler_sm; // array
}

public struct drawer_dbgui(shader_config const& glc0,
  drawer_shared const& ds)
<drawstep_i>
{
  shader_config const glc = glc0;
  metafunction tattr dbgui_vertex_attributes;
  ptr{resource_pool} res = pointer_downcast{ptr{resource_pool}}(
    ds.gl_resources);
  varray{cptr{gl_framebuffer}} shadowmap_fbs;
  option{dbgui_shader_ptr} sdr_di;
  vbid_t const vbid_dbgui = ds.vbid_pool->intern("vbid_generic_filter");
  init();
  private function void init()
  {
    reload_shaders(glc);
  }
  public function vbid_t get_vbid() const { return vbid_dbgui; }
  public function vbid_t get_instances_vbid() const { return vbid_dbgui; }
  public function vbid_t get_vertices_vbid() const { return vbid_dbgui; }
  public function prepare_instance_data_funcptr
  get_prepare_instance_data_funcptr() const {
    return make_tfuncptr{prepare_instance_data_dbgui}();
  }
  public function ptr{vertex_buffer} make_vertex_buffer() const {
    return make_tattr_vertex_buffer{tattr}(false, false);
  }
  public function string builtin_vertex_set_name() const {
    return "generic_filter"; }
  public function void make_builtin_vertex_sets(ptr{vertices} const& vptr)
    const
  {
    farray{vertex_attr, 4} dummy_vattr;
    farray{dbgui_vertex_attributes, 4} vs;
    vs[0].vert = glm::make_vec2(0.0, 0.0);
    vs[1].vert = glm::make_vec2(1.0, 0.0);
    vs[2].vert = glm::make_vec2(1.0, 1.0);
    vs[3].vert = glm::make_vec2(0.0, 1.0);
    vptr->push_polygon_distinct{dbgui_vertex_attributes, 0}(dummy_vattr, vs);
  }
  public function dgf_filler make_filler(ptr{vertices} const& vptr) const
  {
    return make_dgf_noop(vptr);
  }
  public function texture_info get_texture_info(cstrref const& name) const
  {
    return texture_info();
  }
  public function void resize_screen(shader_config const& glc0, int width,
    int height)
  { 
    uint i;
    while (true) {
      const name = "sm" + to_string(i);
      if (const f: res->framebuffers[name]) {
	shadowmap_fbs.push_back(f);
      } else {
	break;
      }
      ++i;
    }
  }
  public function bool reload_shaders(shader_config const& glc0)
  {
    option{dbgui_shader_ptr} s0;
    try {
      s0.some = init_dbgui_shader(glc);
    } catch (runtime_error ex) {
      debug_log("reload failed: " + ex.message());
      return false;
    }
    sdr_di.some = s0.some;
    return true;
  }
  public function void draw_drawstep(draw_data mutable& ddata)
  {
    glDisable(GL_DEPTH_TEST);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    mutable& sdr = *sdr_di.some;
    glUseProgram(sdr.program);
    darrayst{int} sampler_smarr = darrayst{int}(
          static_cast{size_t}(glc.num_shadowmaps), 0);
    for (const i: 0 .. shadowmap_fbs.size()) {
      glActiveTexture(static_cast{GLenum}(
        static_cast{int}(GL_TEXTURE8) + static_cast{int}(i)));
      glBindTexture(GL_TEXTURE_2D, shadowmap_fbs[i]->texture_depth.get());
      sampler_smarr[i] = 8 + static_cast{int}(i);
    }
    glUniform1iv(sdr.u_sampler_sm, glc.num_shadowmaps,
      caddress(sampler_smarr[0]));
    ddata.draw(sdr, get_vertices_vbid(), get_instances_vbid());
  }
  public function option{ptr{edit_mode_i}} get_edit_mode() const
  {
    return option{ptr{edit_mode_i}}();
  }
}

metafunction dbgui_shader_ptr
  ptr{glshader{
    dbgui_uniforms, dbgui_instance_attributes, dbgui_vertex_attributes}};

function dbgui_shader_ptr
init_dbgui_shader(shader_config const& g)
{
  tree_map{string, string} bnd;
  bnd["smsz"] = g.num_shadowmaps_str();
  bnd["shdowmap_resolution"] = to_string(g.shadowmap_resolution);
  const v = load_shader_program(g, bnd, "dbgui.vsh");
  const f = load_shader_program(g, bnd, "dbgui.fsh");
  return make_glshader_ptr{dbgui_uniforms, dbgui_instance_attributes,
    dbgui_vertex_attributes}(v, f, "idata", g.debug_level, "dbgui");
  /*
  string v;
  string f;
  v += g.prepend();
  v += g.vert_in() + "vec2 vert;\n";
  v += g.decl_instance_attr("vec4", "idata");
  v += "void main(void) {\n";
  v += "vec4 idata_i = " + g.instance_attr("idata") + ";\n";
  v += "vec2 screen_pos = idata_i.xy + idata_i.zw * vert;\n";
  v += "gl_Position = vec4(screen_pos, 0.0, 1.0);\n";
  v += "}\n";
  f += g.prepend();
  f += g.decl_fragcolor();
  f += "void main(void) {\n";
  f += g.fragcolor() + " = vec4(1.0, 1.0, 1.0, 0.3);\n";
  f += "}\n";
  return make_glshader_ptr{dbgui_uniforms, dbgui_instance_attributes,
    dbgui_vertex_attributes}(v, f, "idata", g.debug_level, "dbgui");
  */
}

private threaded function void prepare_instance_data_dbgui(
  scene_node const& sn, node_common_data mutable& ncd,
  instance_data mutable& idata)
{
  const sli = sn.trans.value.to_cslice();
  idata.instance_buffer.append(sli[0 .. 4]);
}

