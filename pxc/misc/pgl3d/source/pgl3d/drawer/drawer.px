public threaded namespace pgl3d::drawer::drawer "use-unsafe";
public import common -;
private import pgl3d::opengl::shader_config -;
private import pgl3d::opengl::resource_pool -;
private import pgl3d::drawer::base -;
private import pgl3d::drawer::triangles -;
private import pgl3d::drawer::lineparticle -;
private import pgl3d::drawer::particle -;
private import pgl3d::drawer::particle_bb -;
private import pgl3d::drawer::rect2d -;
private import pgl3d::drawer::dbgui -;
private import pgl3d::drawer::dbgui2 -;
private import pgl3d::drawer::font2 -;
private import pgl3d::drawer::skybox -;
private import pgl3d::drawer::fxaa -;
private import pgl3d::drawer::blur -;
private import pgl3d::drawer::motion_blur -;
private import pgl3d::drawer::passthrough -;
private import pgl3d::drawer::aberration -;
private import pgl3d::drawer::capture -;
private import pgl3d::drawer::setfb -;
private import pgl3d::drawer::chgmode -;
private import pgl3d::drawer::edit_mode -;

public metafunction prepare_instance_data_funcptr
  pgl3d::drawer::base::prepare_instance_data_funcptr;

public metafunction prepare_instance_data_noop
  pgl3d::drawer::base::prepare_instance_data_noop;

public metafunction prepinstf_table
  pgl3d::drawer::base::prepinstf_table;

public metafunction drawer_shared
  pgl3d::drawer::base::drawer_shared;

public metafunction textures_ptr
  pgl3d::drawer::base::textures_ptr;

public metafunction make_textures_ptr
  pgl3d::drawer::base::make_textures_ptr;

public metafunction tiled_voxel_texture
  pgl3d::drawer::base::tiled_voxel_texture;

public metafunction tiled_voxel_texture_load_file
  pgl3d::drawer::edit_mode::tiled_voxel_texture_load_file;

public metafunction tiled_voxel_texture_save_file
  pgl3d::drawer::edit_mode::tiled_voxel_texture_save_file;

public metafunction tiled_voxel_texture_update_mipmap
  pgl3d::drawer::edit_mode::tiled_voxel_texture_update_mipmap;

public function void
make_drawstep_triangles_surface(shader_config const& glc,
  drawer_shared const& ds, ptr{projection_info} const& pj,
  string const& smname, int num_shadowmaps,
  varray{drawer_ptr} mutable& solid_r, 
  varray{varray{drawer_ptr}} mutable& shadow_r, 
  varray{drawer_ptr} mutable& zpre_r)
{
  make_drawer_triangles_stype(glc, ds, pj, 0, 1, smname, num_shadowmaps,
    solid_r, shadow_r, zpre_r);
}

public function void
make_drawstep_raycast(shader_config const& glc,
  drawer_shared const& ds, ptr{projection_info} const& pj,
  string const& smname, int num_shadowmaps,
  int num_ssubtypes, varray{drawer_ptr} mutable& solid_r, 
  varray{varray{drawer_ptr}} mutable& shadow_r, 
  varray{drawer_ptr} mutable& zpre_r)
{
  make_drawer_triangles_stype(glc, ds, pj, 1, num_ssubtypes, smname,
    num_shadowmaps, solid_r, shadow_r, zpre_r);
}

public function drawer_ptr
make_drawstep_setfb(shader_config const& glc, drawer_shared const& ds,
  ptr{glm::uvec2} const& src_size, ptr{glm::uvec2} const& dst_size,
  string const& fbname, bool owner_flag, bool color_tex, bool depth_tex)
{
  return make_ptr{drawer_setfb}(glc, ds, src_size, dst_size, fbname,
    owner_flag, color_tex, depth_tex);
}

public function drawer_ptr
make_drawstep_chgmode(shader_config const& glc, drawer_shared const& ds,
  string const& mode)
{
  return make_ptr{drawer_chgmode}(glc, ds, mode);
}

public function drawer_ptr
make_drawstep_lineparticle(shader_config const& glc, drawer_shared const& ds,
  ptr{projection_info} const& proj)
{ return make_ptr{drawer_lineparticle}(glc, ds, proj); }

public function drawer_ptr
make_drawstep_particle(shader_config const& glc, drawer_shared const& ds,
  ptr{glm::uvec2} const& psize)
{ return make_ptr{drawer_particle}(glc, ds, psize); }

public function drawer_ptr
make_drawstep_particle_bb(shader_config const& glc, drawer_shared const& ds,
  ptr{projection_info} const& proj)
{ return make_ptr{drawer_particle_bb}(glc, ds, proj); }

public function drawer_ptr
make_drawstep_rect2d(shader_config const& glc, drawer_shared const& ds)
{ return make_ptr{drawer_rect2d}(glc, ds); }

public function drawer_ptr
make_drawstep_dbgui(shader_config const& glc, drawer_shared const& ds,
  string const& sm_name)
{ return make_ptr{drawer_dbgui}(glc, ds, sm_name); }

public function drawer_ptr
make_drawstep_dbgui2(shader_config const& glc, drawer_shared const& ds,
  string const& sm_name)
{ return make_ptr{drawer_dbgui2}(glc, ds, sm_name); }

public function drawer_ptr
make_drawstep_font2(shader_config const& glc, drawer_shared const& ds,
  ptr{glm::uvec2} const& psize)
{ return make_ptr{drawer_font2}(glc, ds, psize); }

public function drawer_ptr
make_drawstep_skybox(shader_config const& glc, drawer_shared const& ds,
  ptr{projection_info} const& pj)
{ return make_ptr{drawer_skybox}(glc, ds, pj); }

public metafunction drawer_fxaa_params pgl3d::drawer::fxaa::drawer_fxaa_params;

public function drawer_ptr
make_drawstep_fxaa(shader_config const& glc, drawer_shared const& ds,
  ptr{drawer_fxaa_params} const& params, string const& src_fbname)
{ return make_ptr{drawer_fxaa}(glc, ds, params, src_fbname); }

public metafunction drawer_blur_params pgl3d::drawer::blur::drawer_blur_params;

public function drawer_ptr
make_drawstep_blur(shader_config const& glc, drawer_shared const& ds,
  ptr{drawer_blur_params} const& params, string const& src_fbname)
{ return make_ptr{drawer_blur}(glc, ds, params, src_fbname); }

public function drawer_ptr
make_drawstep_motion_blur(shader_config const& glc, drawer_shared const& ds,
  string const& src_fbname)
{ return make_ptr{drawer_motion_blur}(glc, ds, src_fbname); }

public function drawer_ptr
make_drawstep_passthrough(shader_config const& glc, drawer_shared const& ds,
  string const& src_fbname)
{ return make_ptr{drawer_passthrough}(glc, ds, src_fbname); }

public function drawer_ptr
make_drawstep_aberration(shader_config const& glc, drawer_shared const& ds,
  string const& src_fbname)
{ return make_ptr{drawer_aberration}(glc, ds, src_fbname); }

public function drawer_ptr
make_drawstep_capture(shader_config const& glc, drawer_shared const& ds,
  ptr{glm::uvec2} const& psize, string const& src_fbname,
  ptr{varray{uchar}} const& capt_data0)
{ return make_ptr{drawer_capture}(glc, ds, psize, src_fbname, capt_data0); }

