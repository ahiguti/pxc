private threaded namespace pgl3d::drawer::triangles "export-unsafe";
public import common -;
public import meta m;
public import pgl3d::drawer::base -;
public import pgl3d::drawer::edit_mode -;

private tsvaluetype struct triangles_uniforms()
{
  public glm::mat4 view_projection_matrix;
  public int sampler_dpat;
  public int sampler_pmpat;
  public int sampler_tilemap;
  public int sampler_noise;
  public int sampler_env;
  public int sampler_voxtmap;
  public int sampler_voxtmax;
  public int sampler_voxtpat;
  public int sampler_voxtpax;
  public int sampler_depth_rd;
  public int sampler_sm; // array
  public glm::vec3 camera_pos;
  public glm::vec3 light_dir;
  public float light_on;
  public float ndelta_scale; // 0.02 / 40. if light_fixed, 0.02 otherwise
  public glm::mat4 shadowmap_vp; // array
  public float exposure;
  public float random_seed;
  public float option_value;
  public float option_value2;
}

private tsvaluetype struct triangles_vertex_attributes()
{
  public glm::vec3 position;
  public glm::vec3 normal;
  public glm::vec3 tangent;
  public glm::vec3 uvw;
  public glm::vec4 aabb_or_tconv;
  public glm::vec3 aabb_min;
  public glm::vec3 aabb_max;
}

private tsvaluetype struct zprepass_vertex_attributes()
{
  public glm::vec3 position;
  public glm::vec3 normal;
  public glm::vec3 tangent;
  public glm::vec3 uvw;
  public glm::vec4 aabb_or_tconv;
  public glm::vec3 aabb_min;
  public glm::vec3 aabb_max;
}

private tsvaluetype struct shadowmap_vertex_attributes()
{
  public glm::vec3 position;
  public glm::vec3 normal;
  public glm::vec3 tangent;
  public glm::vec3 uvw;
  public glm::vec4 aabb_or_tconv;
  public glm::vec3 aabb_min;
  public glm::vec3 aabb_max;
}

private tsvaluetype struct triangles_instance_attributes()
{
  public glm::mat4 model_matrix;
}

private tsvaluetype struct zprepass_uniforms()
{
  public glm::mat4 view_projection_matrix;
  public glm::vec3 camera_pos;
  public int sampler_voxtmap;
  public int sampler_voxtpat;
}

private tsvaluetype struct shadowmap_uniforms()
{
  public glm::mat4 shadowmap_vp;
  public glm::vec3 light_dir;
  public glm::vec3 camera_pos;
  public glm::vec3 trans; // used if light_fixed
  public float scale;     // used if light_fixed
  public int sampler_voxtmap;
  public int sampler_voxtpat;
}

public function void
make_drawer_triangles_stype(shader_config const& glc,
  drawer_shared const& ds, ptr{projection_info} const& pj,
  int stype, int num_subtypes, string const& smname, int num_shadowmaps,
  varray{drawer_ptr} mutable& solid_r,
  varray{varray{drawer_ptr}} mutable& shadow_r,
  varray{drawer_ptr} mutable& zpre_r)
{
  const maindr = make_ptr{drawer_triangles}(glc, ds, pj, stype, smname,
    num_shadowmaps);
  for (int i: 0 .. num_subtypes) {
    solid_r.push_back(make_ptr{drawstep_triangles}(
      maindr, stype, num_subtypes - i - 1, draw_step_solid, 0u));
  }
  for (int i: 0 .. num_subtypes) {
    zpre_r.push_back(make_ptr{drawstep_triangles}(
      maindr, stype, num_subtypes - i - 1, draw_step_zprepass, 0u));
  }
  for (int j: 0 .. num_shadowmaps) {
    varray{drawer_ptr} s;
    for (int i: 0 .. num_subtypes) {
      s.push_back(make_ptr{drawstep_triangles}(
        maindr, stype, num_subtypes - i - 1, draw_step_shadowmapping,
        static_cast{uint}(j)));
    }
    shadow_r.push_back(s);
  }
}

private struct drawstep_triangles(ptr{drawer_triangles} const& drawer_tr0,
  int stype0, int ssubtype0, draw_step step0, uint sm_index0)
<drawstep_i>
{
  public ptr{drawer_triangles} main_drawer = drawer_tr0;
  public int const stype = stype0;
  public int const ssubtype = ssubtype0;
  public draw_step const step = step0;
  public uint const sm_index = sm_index0;
  vbid_t const vbid_self = main_drawer->ds.vbid_pool->intern(
    "vbid_triangles_" + to_string(main_drawer->stype) + "_"
      + to_string(ssubtype));
  public function vbid_t get_vbid() const {
    return vbid_self;
  }
  public function vbid_t get_instances_vbid() const {
    return get_vbid();
  }
  public function vbid_t get_vertices_vbid() const {
    return main_drawer->get_vertices_vbid();
  }
  public function prepare_instance_data_funcptr
  get_prepare_instance_data_funcptr() const {
    return main_drawer->get_prepare_instance_data_funcptr();
  }
  public function ptr{vertex_buffer} make_vertex_buffer() const {
    return main_drawer->make_vertex_buffer();
  }
  public function string builtin_vertex_set_name() const {
    return main_drawer->builtin_vertex_set_name();
  }
  public function void make_builtin_vertex_sets(ptr{vertices} const& vptr)
    const {
    main_drawer->make_builtin_vertex_sets(vptr);
  }
  public function dgf_filler make_filler(ptr{vertices} const& vptr) const
  {
    return main_drawer->make_filler(vptr);
  }
  public function texture_info get_texture_info(cstrref const& name) const
  {
    return main_drawer->get_texture_info(name);
  }
  public function void resize_screen(shader_config const& glc)
  {
    if (ssubtype == 0 && step == draw_step_solid) {
      main_drawer->resize_screen(glc);
    }
  }
  public function bool reload_shaders(shader_config const& glc)
  {
    if (ssubtype == 0 && step == draw_step_solid) {
      return main_drawer->reload_shaders(glc);
    }
    return true;
  }
  public function void draw_drawstep(draw_data mutable& ddata)
  {
    return main_drawer->draw_sub_step(ssubtype, step, sm_index, ddata,
      get_vertices_vbid(), get_instances_vbid());
  }
  public function option{ptr{edit_mode_i}} get_edit_mode() const
  {
    return main_drawer->get_edit_mode();
  }
}

public struct drawer_triangles(shader_config const& glc0,
  drawer_shared const& ds0, ptr{projection_info} const& pj0,
  int stype0, string const& smname0, int num_shadowmaps0)
{
  /* stype==0 は三角形をそのまま描画する。
   * stype==1 は直方体の内部をraycastで描画する。
   * stype==2 は三角形をzprepass/shadowmapだけ描画する。これはstype==1の底面
   *          に使うためのものだが現在使っていない。
   */
  shader_config glc = glc0;
  public drawer_shared const ds = ds0;
  public ptr{projection_info} pj = pj0;
  public int const stype = stype0;
  public string const smname = smname0;
  public size_t const num_shadowmaps = static_cast{size_t}(num_shadowmaps0);
  metafunction tattr triangles_vertex_attributes;
  textures_ptr textures = ds.textures;
  tptr{tiled_voxel_texture} tvt = ds.tvt;
  ptr{resource_pool} res = pointer_downcast{ptr{resource_pool}}(
    ds.gl_resources);
  varray{cptr{gl_framebuffer}} shadowmap_fbs;
  ptr{edit_mode_texture} emt = ds.emt;
  option{triangles_shader_ptr} sdr_solid;
  option{zprepass_shader_ptr} sdr_zp;
  option{shadowmap_shader_ptr} sdr_shadow;
  ivec3 voxtile_size;
  ptr{gl_texture} texture_dpat = make_ptr{gl_texture}();
  ptr{gl_texture} texture_pmpat = make_ptr{gl_texture}();
  ptr{gl_texture} texture_tilemap = make_ptr{gl_texture}();
  ptr{gl_texture} texture_noise = make_ptr{gl_texture}();
  ptr{gl_texture} texture_env = make_ptr{gl_texture}();
  ptr{gl_texture} texture_depth_rd = make_ptr{gl_texture}();
  option{ptr{edit_mode_i}} edit_mode_ptr;
  bool const raycast_cull_front =
    (glc.conf.get("raycast_cull_front", 1, 0, 1) != 0);
  bool const update_frag_depth =
    (glc.conf.get("update_frag_depth", 1, 0, 1) != 0);
  bool const enable_raycast_zprepass =
    (glc.conf.get("enable_raycast_zprepass", 0, 0, 1) != 0);
  bool const debug_zprepass =
    (glc.conf.get("debug_zprepass", 0, 0, 1) != 0);
  bool const raycast_sort =
    (glc.conf.get("raycast_sort", 1, 0, 1) != 0);
  bool const large_shadow =
    (glc.conf.get("large_shadow", 0, 0, 1) != 0);
  rand_generator_ptr rand_generator = make_rand_generator(123u);
  vbid_t vbid_triangles;
  vbid_t vbid_instances;
  vbid_t vbid_vertices;
  init();
  private function void init()
  {
    debug_log("drawer_triangles init ", stype);
    vbid_triangles = ds.vbid_pool->intern(
      "vbid_triangles_" + to_string(stype) + "_0");
    vbid_instances = vbid_triangles;
    vbid_vertices = (stype == 1)
      ? ds.vbid_pool->intern("vbid_triangles_1_0") : vbid_triangles;
    const tex_col = *textures->equal_range("triangles.tile_color");
    const tex_dep = *textures->equal_range("triangles.tile_depth");
    const tex_map = *textures->equal_range("triangles.tile_map");
    const tex_noise = *textures->equal_range("triangles.noise");
    texture_data_to_gl_texture(GL_TEXTURE_2D, *texture_dpat, tex_col,
      GL_RGBA, GL_RGBA, GL_NEAREST);
    texture_data_to_gl_texture(GL_TEXTURE_2D, *texture_pmpat, tex_dep,
      GL_RGBA, GL_RGBA, GL_NEAREST);
    texture_data_to_gl_texture(GL_TEXTURE_2D, *texture_tilemap, tex_map,
      GL_RGBA, GL_RGBA, GL_NEAREST);
    texture_data_to_gl_texture(GL_TEXTURE_2D, *texture_noise, tex_noise,
      GL_RED, GL_RGBA, GL_NEAREST);
    res->textures.insert("tile_color", texture_dpat);
    res->textures.insert("tile_parallax", texture_pmpat);
    res->textures.insert("tile", texture_tilemap);
    if (stype == 1) {
      if (emt->vox.voxtile.size() <= 1u) {
	emt->vox = *tvt;
	debug_log("vox tpat", emt->vox.tpat_edit->data_pri.size());
	debug_log("vox tmap", emt->vox.tmap_edit->data_pri.size());
	if (glc.is_gl3_or_gles3()) {
	  texture_data_array_to_gl_texture(GL_TEXTURE_3D, *emt->glt_voxtpat,
	    emt->vox.tpat_edit->data_pri, GL_RGBA, GL_RGBA, GL_NEAREST);
	  texture_data_array_to_gl_texture(GL_TEXTURE_3D, *emt->glt_voxtpax,
	    emt->vox.tpat_edit->data_sec, GL_RGBA, GL_RGBA, GL_NEAREST);
	  texture_data_array_to_gl_texture(GL_TEXTURE_3D, *emt->glt_voxtmap,
	    emt->vox.tmap_edit->data_pri, GL_RGBA, GL_RGBA, GL_NEAREST);
	  texture_data_array_to_gl_texture(GL_TEXTURE_3D, *emt->glt_voxtmax,
	    emt->vox.tmap_edit->data_sec, GL_RGBA, GL_RGBA, GL_NEAREST);
	} else {
	  texture_data_array_to_gl_texture(GL_TEXTURE_3D, *emt->glt_voxtpat,
	    emt->vox.tpat_edit->data_pri[0 .. 1], GL_RGBA, GL_RGBA, GL_NEAREST);
	  texture_data_array_to_gl_texture(GL_TEXTURE_3D, *emt->glt_voxtpax,
	    emt->vox.tpat_edit->data_sec[0 .. 1], GL_RGBA, GL_RGBA, GL_NEAREST);
	  texture_data_array_to_gl_texture(GL_TEXTURE_3D, *emt->glt_voxtmap,
	    emt->vox.tmap_edit->data_pri[0 .. 1], GL_RGBA, GL_RGBA, GL_NEAREST);
	  texture_data_array_to_gl_texture(GL_TEXTURE_3D, *emt->glt_voxtmax,
	    emt->vox.tmap_edit->data_sec[0 .. 1], GL_RGBA, GL_RGBA, GL_NEAREST);
	}
      }
      const& voxtile = emt->vox.voxtile;
      voxtile_size.x = static_cast{int}(voxtile.get_width());
      voxtile_size.y = static_cast{int}(voxtile.get_height());
      voxtile_size.z = static_cast{int}(voxtile.get_depth());
      if (glc.conf.get("edit_mode", 0, 0, 1) != 0) {
        edit_mode_ptr.some = make_ptr{edit_mode}(emt);
        debug_log("create edit_mode instance");
      } else {
        edit_mode_ptr.some = make_ptr{noedit_mode}(emt);
        debug_log("create noedit_mode instance");
      }
    }
    debug_log("drawer_triangles init ", stype, "done", vbid_triangles,
      vbid_vertices);
  }
  public function vbid_t get_vbid() const { return vbid_triangles; }
  public function vbid_t get_instances_vbid() const { return vbid_instances; }
  public function vbid_t get_vertices_vbid() const { return vbid_vertices; }
  public function prepare_instance_data_funcptr
  get_prepare_instance_data_funcptr() const {
    return make_tfuncptr{prepare_instance_data_triangles}();
  }
  public function ptr{vertex_buffer} make_vertex_buffer() const {
    return make_tattr_vertex_buffer{tattr}(false, stype == 2);
  }
  public function string builtin_vertex_set_name() const { return ""; }
  public function void make_builtin_vertex_sets(ptr{vertices} const& vptr)
    const { }
  public function dgf_filler make_filler(ptr{vertices} const& vptr) const
  {
    bool override_uvw = (stype != 1);
    return make_dgf_polygon_filler{tattr}(vptr, override_uvw);
  }
  public function texture_info get_texture_info(cstrref const& name) const
  {
    texture_info r;
    if (name == "main") {
      r.surface_w = texture_dpat->surface_w;
      r.surface_h = texture_dpat->surface_h;
    }
    return r;
  }
  public function void resize_screen(shader_config const& glc0)
  {
    {
      shadowmap_fbs.clear();
      uint i;
      while (true) {
        const name = smname + to_string(i);
        if (const f: res->framebuffers[name]) {
          shadowmap_fbs.push_back(f);
          debug_log("found sm" + to_string(i));
        } else {
          break;
        }
        ++i;
      }
      if (shadowmap_fbs.size() != num_shadowmaps) {
        debug_log("WARNING: triangles: shadowmap size mismatch",
          num_shadowmaps, shadowmap_fbs.size());
        throw runtime_error_template{"triangles"}("shadow map size mismatch");
      }
    }
    if (stype == 1) {
      // デプスバッファのコピーを格納するためのテクスチャを作り、depth_rdの
      // 名前でシェーダ間で共有する。
      // vsmはとりあえずサポートしない
      // FIXME: depth_rdテクスチャ共有はもう使っていない。sampler_depth_rdには
      //   描画対象フレームバッファと同じものを渡し、glTextureBarrierを使った
      //   上書きをする実装に変更した。このコードはもう要らない。
      /*
      glActiveTexture(GL_TEXTURE0);
      if (texture_depth_rd->texture_id.get() == 0) {
	texture_depth_rd->texture_id.generate();
      }
      glBindTexture(GL_TEXTURE_2D, texture_depth_rd->texture_id.get());
      texture_depth_rd->surface_w = static_cast{uint}(width);
      texture_depth_rd->surface_h = static_cast{uint}(height);
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,
	static_cast{int}(GL_NEAREST));
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
	static_cast{int}(GL_NEAREST));
      glTexImage2D(GL_TEXTURE_2D, 0, static_cast{int}(GL_DEPTH_COMPONENT24),
	width, height,
	0, GL_DEPTH_COMPONENT, GL_UNSIGNED_INT, offset_to_void_cp(0));
      if (!res->textures.exists("depth_rd")) {
	res->textures.insert("depth_rd", texture_depth_rd);
      }
      debug_log("create depth_rd");
      */
    }
    if (const e: sdr_solid.none) {
      reload_shaders(glc);
    }
  }
  public function bool reload_shaders(shader_config const& glc0)
  {
    function {t} string ivec3_string(t v) {
      return "ivec3(" + to_string(v.x) + ", " + to_string(v.y) + ", "
	+ to_string(v.z) + ")";
    }
    metafunction ivec3_log2 map{ivec3, integral_log2{int}};
    debug_log("triangles reload_shaders init", stype);
    option{triangles_shader_ptr} s0;
    option{zprepass_shader_ptr} s1;
    option{shadowmap_shader_ptr} s2;
    try {
      metafunction si static_cast{int};
      tree_map{string, string} bnd;
      bnd["stype"] = to_string(stype);
      // bnd["ssubtype"] = to_string(ssubtype);
      bnd["tile3_size"] = ivec3_string(voxtile_size);
      bnd["tile3_size_log2"] = ivec3_string(ivec3_log2(voxtile_size));
      ivec3 voxtpat_size;
      ivec3 voxtmap_size;
      int virt3_size;
      if (stype == 1 && !emt->vox.tpat_edit->data_pri.empty()) {
	voxtpat_size = make_ivec3(
	  si(emt->vox.tpat_edit->data_pri[0].get_width()),
	  si(emt->vox.tpat_edit->data_pri[0].get_height()),
	  si(emt->vox.tpat_edit->data_pri[0].get_depth()));
	debug_log("voxtpat_size", voxtpat_size);
	voxtpat_size = map{ivec3, operator::div}(voxtpat_size, voxtile_size);
	voxtpat_size = map{ivec3, power_of_2}(voxtpat_size);
	voxtmap_size = make_ivec3(
	  si(emt->vox.tmap_edit->data_pri[0].get_width()),
	  si(emt->vox.tmap_edit->data_pri[0].get_height()),
	  si(emt->vox.tmap_edit->data_pri[0].get_depth()));
	voxtmap_size = map{ivec3, power_of_2}(voxtmap_size);
	const virt_size = map{ivec3, operator::mul}(voxtile_size,
	  voxtmap_size);
	virt3_size = fold_list{max}(0, virt_size);
      }
      debug_log("stype: ", stype);
      debug_log("pat3_size: ", voxtpat_size);
      debug_log("map3_size: ", voxtmap_size);
      debug_log("virt3_size: ", virt3_size);
      bnd["pat3_size"] = ivec3_string(voxtpat_size);
      bnd["pat3_size_log2"] = ivec3_string(ivec3_log2(voxtpat_size));
      bnd["map3_size"] = ivec3_string(voxtmap_size);
      bnd["map3_size_log2"] = ivec3_string(ivec3_log2(voxtmap_size));
      bnd["virt3_size"] = "ivec3(" + to_string(virt3_size) + ")";
      bnd["virt3_size_log2"] = "ivec3(" + to_string(integral_log2(virt3_size))
	+ ")";
      bnd["smsz"] = to_string(num_shadowmaps);
      bnd["raycast_cull_front"] = to_string(raycast_cull_front ? 1 : 0);
      bnd["update_frag_depth"] = to_string(update_frag_depth ? 1 : 0);
      bnd["check_frag_depth"] = to_string(
	(enable_raycast_zprepass || raycast_sort) ? 1 : 0);
      bnd["debug_zprepass"] = to_string(debug_zprepass ? 1 : 0);
      bnd["shadowmap_resolution"] = to_string(glc.shadowmap_resolution);
      bnd["shaodwmap_scale"] = to_string(
	static_cast{int}(glc.shadowmap_scale + 0.5f));
      bnd["shadowmap_max_distance"] = to_string(
	pow(glc.shadowmap_scale, static_cast{float}(num_shadowmaps - 1))
	* glc.shadowmap_distance);
      s0.some = init_triangles_shader(glc, bnd, stype);
      s1.some = init_zprepass_shader(glc, bnd, stype);
      s2.some = init_shadowmap_shader(glc, bnd, stype);
      debug_log("triangles virt", virt3_size);
    } catch (runtime_error ex) {
      debug_log("reload failed: " + ex.message());
      return false;
    }
    sdr_solid = s0;
    sdr_zp = s1;
    sdr_shadow = s2;
    debug_log("triangles reload_shaders done");
    return true;
  }
  public function void draw_sub_step(int ssubtype, draw_step step, size_t iter,
    draw_data const& ddata, vbid_t vbid_v, vbid_t vbid_i)
  {
    const& cam_df = *pj;
    const& bo = *ddata.vertex_buffers[vbid_v];
    const& bo_ib = ddata.local_whole_instances[vbid_i];
    if (!has_instance_to_draw(bo, bo_ib)) {
      return;
    }
    //debug_log("draw_sub_step", stype, ssubtype, static_cast{int}(step), iter);
    if (step == draw_step_shadowmapping) {
      //debug_log("triangles draw step sm stype=", stype, "iter=", iter);
      glUseProgram(sdr_shadow.some->program);
      if (stype == 1) {
	if (ssubtype != 1 && raycast_sort && !large_shadow) { return; }
	  // 大きいオブジェクトがssubtype >= 2で描かれる。
	  // large_shadowが偽なら影は差さない
	if (raycast_cull_front) {
	  // glEnable(GL_CULL_FACE);
	  glCullFace(GL_FRONT);
	}
	glActiveTexture(GL_TEXTURE5);
	glBindTexture(GL_TEXTURE_3D, emt->glt_voxtpat->texture_id.get());
	glUniform1i(sdr_shadow.some->u_sampler_voxtpat, 5);
	/*
	debug_log("sampler_voxtpat", stype, ssubtype, iter,
	  sdr_shadow.some->u_sampler_voxtpat,
	  static_cast{int}(emt->glt_voxtpat->texture_id.get()),
	  static_cast{int}(glGetError()));
	*/
	glActiveTexture(GL_TEXTURE6);
	glBindTexture(GL_TEXTURE_3D, emt->glt_voxtmap->texture_id.get());
	glUniform1i(sdr_shadow.some->u_sampler_voxtmap, 6);
      }
      const sm_view = cam_df.light.to_mat4().inverse();
      const sm_vp = cam_df.sm_projection[iter] * sm_view;
      float scale = 1.0f / glc.shadowmap_distance;
      for (const i: 0 .. iter) {
	scale /= glc.shadowmap_scale;
      }
      if (glc.light_fixed) {
	//debug_log("scale", scale);
	const trans = -cam_df.camera.position;
	glUniform3fv(sdr_shadow.some->u_trans, 1, trans.to_crawptr());
	glUniform1f(sdr_shadow.some->u_scale, scale);
      } else {
	glUniformMatrix4fv(sdr_shadow.some->u_shadowmap_vp, 1, 0,
	  sm_vp.to_crawptr());
      }
      glUniform3fv(sdr_shadow.some->u_light_dir, 1,
	(cam_df.light.angle * glm::make_vec3(0.0, 0.0, 1.0)).to_crawptr());
      glUniform3fv(sdr_shadow.some->u_camera_pos, 1,
	cam_df.camera.position.to_crawptr());
      ddata.draw(*sdr_shadow.some, vbid_v, vbid_i);
      if (stype == 1) {
	if (raycast_cull_front) {
	  glCullFace(GL_BACK);
	}
      }
    } else if (step == draw_step_zprepass) {
      if (stype == 1 && !enable_raycast_zprepass) {
	return;
      }
      // debug_log("zprepass " + to_string(stype));
      if (debug_zprepass) {
	// debug_zprepassが有効のときはzprepassシェーダで色を塗り、solidは
	// 実行しない
	glColorMask(1, 1, 1, 1);
      }
      const& vp = cam_df.view_projection;
      mutable& sdr = *sdr_zp.some;
      glUseProgram(sdr.program);
      glUniformMatrix4fv(sdr.u_view_projection_matrix, 1, 0,
	vp.to_crawptr());
      glUniform3fv(sdr.u_camera_pos, 1,
	cam_df.camera.position.to_crawptr());
      if (stype == 1) {
	glActiveTexture(GL_TEXTURE5);
	glBindTexture(GL_TEXTURE_3D, emt->glt_voxtpat->texture_id.get());
	glUniform1i(sdr.u_sampler_voxtpat, 5);
	glActiveTexture(GL_TEXTURE6);
	glBindTexture(GL_TEXTURE_3D, emt->glt_voxtmap->texture_id.get());
	glUniform1i(sdr.u_sampler_voxtmap, 6);
      }
      ddata.draw(sdr, vbid_v, vbid_i);
    } else if (step == draw_step_solid) {
      if (stype == 2) { return; }
      if (stype == 1 && ssubtype == 0 && raycast_sort) {
	// ssubtype==0のシェーダはsolidを描画しない(何故？)
	return;
      }
      // if (debug_zprepass) { return; }
      const& vp = cam_df.view_projection;
      const red = make_farray{float}(0.8, 0.1, 0.0, 1.0);
      mutable& sdr = *sdr_solid.some;
      glUseProgram(sdr.program);
      if (glc.light_fixed) {
	glUniform3fv(sdr.u_light_dir, 1,
	  glm::make_vec3(0.0, 0.0, -1.0).to_crawptr());
      } else {
	glUniform3fv(sdr.u_light_dir, 1,
	  (cam_df.light.angle * glm::make_vec3(0.0, 0.0, 1.0)).to_crawptr());
      }
      glUniform3fv(sdr.u_camera_pos, 1,
	cam_df.camera.position.to_crawptr());
      glActiveTexture(GL_TEXTURE0);
      glBindTexture(GL_TEXTURE_2D, texture_dpat->texture_id.get());
      glActiveTexture(GL_TEXTURE1);
      glUniform1i(sdr.u_sampler_dpat, 0);
      glBindTexture(GL_TEXTURE_2D, texture_pmpat->texture_id.get());
      glUniform1i(sdr.u_sampler_pmpat, 1);
      glActiveTexture(GL_TEXTURE2);
      glBindTexture(GL_TEXTURE_2D, texture_tilemap->texture_id.get());
      glUniform1i(sdr.u_sampler_tilemap, 2);
      if (texture_env->texture_id.get() == 0) { // TODO: cleanup
	if (const te: res->textures["environ"]) {
	  texture_env = te;
	  // debug_log("texture_env", texture_env);
	}
      }
      if (texture_env->texture_id.get() != 0) {
	glActiveTexture(GL_TEXTURE3);
	glBindTexture(GL_TEXTURE_CUBE_MAP, texture_env->texture_id.get());
	glUniform1i(sdr.u_sampler_env, 3);
      }
      if (stype == 1) {
	// debug_log("solid triangles", stype, ssubtype);
	if (raycast_cull_front) {
	  glCullFace(GL_FRONT);
	}
	glActiveTexture(GL_TEXTURE4);
	glBindTexture(GL_TEXTURE_2D, texture_noise->texture_id.get());
	glUniform1i(sdr.u_sampler_noise, 4);
	glActiveTexture(GL_TEXTURE5);
	glBindTexture(GL_TEXTURE_3D, emt->glt_voxtpat->texture_id.get());
	glUniform1i(sdr.u_sampler_voxtpat, 5);
	glActiveTexture(GL_TEXTURE6);
	glBindTexture(GL_TEXTURE_3D, emt->glt_voxtpax->texture_id.get());
	glUniform1i(sdr.u_sampler_voxtpax, 6);
	glActiveTexture(GL_TEXTURE7);
	glBindTexture(GL_TEXTURE_3D, emt->glt_voxtmap->texture_id.get());
	glUniform1i(sdr.u_sampler_voxtmap, 7);
	glActiveTexture(GL_TEXTURE8);
	glBindTexture(GL_TEXTURE_3D, emt->glt_voxtmax->texture_id.get());
	glUniform1i(sdr.u_sampler_voxtmax, 8);
	if ((enable_raycast_zprepass || raycast_sort) && update_frag_depth) {
          /*
	  // enable_raycast_zpreassフラグは読む必要ないのでは？
	  if (texture_depth_rd->texture_id.get() == 0) {
	    if (const te: res->textures["depth_rd"]) {
              // 全シェーダで共有しているテクスチャ
	      texture_depth_rd = te;
	    }
	  }
	  if (texture_depth_rd->texture_id.get() != 0) {
	    const& tex = *texture_depth_rd;
	    glActiveTexture(GL_TEXTURE9);
	    glBindTexture(GL_TEXTURE_2D, tex.texture_id.get());
	    glUniform1i(sdr.u_sampler_depth_rd, 9);
	    // debug_log("ssubtype", ssubtype, "depth_rd", tex.texture_id.get(),
	    //   tex.surface_w, tex.surface_h);
	    // if (ssubtype != 0)
	    {
              // 現在のフレームバッファのデプスバッファの内容をdepth_rdに
              // コピーする。シェーダからはそれをsampler_depth_rdとして
              // 参照し、early depth testのために使う。
	      glCopyTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 0, 0,
		static_cast{GLint}(tex.surface_w),
		static_cast{GLint}(tex.surface_h));
	    }
	  }
          */
          if (const& fb: ddata.cur_target_fb.some) {
            // 描画対象のフレームバッファ
            const texid = fb->texture_depth.get();
	    glActiveTexture(GL_TEXTURE9);
	    glBindTexture(GL_TEXTURE_2D, texid);
	    glUniform1i(sdr.u_sampler_depth_rd, 9);
            //debug_log("got cur_target_fb");
          } else if (const fb: res->framebuffers["first_pp"]) {
            // 最初のpostprocessのフレームバッファ。これはmain描画の対象
            // となるフレームバッファなので、これのdepthテクスチャを
            // sampler_depth_rdとしてセットする。
            const texid = fb->texture_depth.get();
            // debug_log("depth_rd texid", texid);
	    glActiveTexture(GL_TEXTURE9);
	    glBindTexture(GL_TEXTURE_2D, texid);
	    glUniform1i(sdr.u_sampler_depth_rd, 9);
            //debug_log("got first_pp");
          }
	}
      }
      darrayst{int} sampler_smarr = darrayst{int}(num_shadowmaps, 0);
      for (const i: 0 .. num_shadowmaps) {
	glActiveTexture(static_cast{GLenum}(
	  static_cast{int}(GL_TEXTURE10) + static_cast{int}(i)));
	glBindTexture(GL_TEXTURE_2D, shadowmap_fbs[i]->texture_depth.get());
	sampler_smarr[i] = 10 + static_cast{int}(i);
      }
      glUniform1iv(sdr.u_sampler_sm, static_cast{int}(num_shadowmaps),
	caddress(sampler_smarr[0]));
      if (glc.light_fixed) {
	glUniform1f(sdr.u_ndelta_scale,
	  static_cast{float}(8192 / cam_df.shadowmap_size)
	    * 0.02f / glc.shadowmap_distance);
      } else {
	const sm_view = cam_df.light.to_mat4().inverse();
	// TODO: sm_viewの中心をカメラのもっと前方に置くことができる。
	darrayst{glm::mat4} sm_vparr = darrayst{glm::mat4}(
          num_shadowmaps, glm::mat4());
	for (const i: 0 .. num_shadowmaps) {
	  sm_vparr[i] = cam_df.sm_projection[i] * sm_view;
	}
	glUniformMatrix4fv(sdr.u_shadowmap_vp,
          static_cast{int}(num_shadowmaps), 0, sm_vparr[0].to_crawptr());
	glUniform1f(sdr.u_ndelta_scale,
	  static_cast{float}(8192 / cam_df.shadowmap_size) * 0.02);
      }
      glUniform1f(sdr.u_exposure, cam_df.exposure);
      glUniform1f(sdr.u_random_seed, 0.0f);
      /*
      glUniform1f(sdr.u_random_seed,
	static_cast{float}(rand_generator->generate()) / 65536.0f);
      */
      mutable opval = static_cast{int}(cam_df.option_value);
      opval /= 2;
      opval %= 4;
      glUniform1f(sdr.u_option_value, static_cast{float}(opval));
      mutable opval2 = cam_df.option_value2;
      glUniform1f(sdr.u_option_value2, opval2);
      glUniformMatrix4fv(sdr.u_view_projection_matrix, 1, 0, vp.to_crawptr());
      ddata.draw(sdr, vbid_v, vbid_i);
      if (stype == 1) {
	if (raycast_cull_front) {
	  glCullFace(GL_BACK);
	}
        if (m::is_true{is_gl45}) {
          glTextureBarrier();
          // デプスバッファへの書き込みを次回のdepth_rd読み出しに反映させる。
          // これをしないと次回のearly depth testによる計算省略がおきず遅く
          // なる(未定義動作のはず)。glTextureBarrier()を挟めば各フラグメント
          // でread/modify/write処理してもよい。
          // https://www.khronos.org/opengl/wiki/Memory_Model#Texture_barrier
          // ... The third thing this functionality changes is that you are
          // permitted to perform a single read/modify/write operation
          // between a texel fetch and a framebuffer image under the
          // following conditions: ...
        }
      }
    }
  }
  public function option{ptr{edit_mode_i}} get_edit_mode() const
  {
    return edit_mode_ptr;
  }
}

private threaded function void prepare_instance_data_triangles(
  scene_node const& sn, node_common_data mutable& ncd,
  instance_data mutable& idata)
{
  buffer_append(idata.instance_buffer, sn.trans); /* model matrix */
}

private threaded function {tattr} void
dgf_polygon_filler_tattr(ptr{vertices} const& vptr, bool override_uvw,
  bool flat_flag, poly_t const& poly, mesh_index const& mp)
{
  dgf_fill_tattr_internal{tattr}(vptr, flat_flag, override_uvw, poly, mp);
}

private threaded function {tattr} dgf_filler
make_dgf_polygon_filler(ptr{vertices} const& vptr, bool override_uvw)
{
  return make_callable_ptr{dgf_polygon_filler_tattr{tattr}, 2}(vptr,
    override_uvw);
}

private metafunction shadowmap_shader_ptr
  ptr{glshader{
    shadowmap_uniforms, triangles_instance_attributes,
    shadowmap_vertex_attributes}};

private function shadowmap_shader_ptr
init_shadowmap_shader(shader_config const& g,
  tree_map{string, string} const& bnd, int stype)
{
  const v = load_shader_program(g, bnd, "triangles-sm.vsh");
  const f = load_shader_program(g, bnd, "triangles-sm.fsh");
  //debug_log("shadowmap_vsh", v);
  //debug_log("shadowmap_fsh", f);
  return make_glshader_ptr{
    shadowmap_uniforms,
    triangles_instance_attributes,
    shadowmap_vertex_attributes
  }(v, f, "model_matrix", g.debug_level, "triangles-sm-" + to_string(stype));
}

private metafunction zprepass_shader_ptr
  ptr{glshader{
    zprepass_uniforms, triangles_instance_attributes,
    zprepass_vertex_attributes}};

private function zprepass_shader_ptr
init_zprepass_shader(shader_config const& g,
  tree_map{string, string} const& bnd, int stype)
{
  const v = load_shader_program(g, bnd, "triangles-zp.vsh");
  const f = load_shader_program(g, bnd, "triangles-zp.fsh");
  //debug_log("zp_vsh", v);
  //debug_log("zp_fsh", f);
  return make_glshader_ptr{
    zprepass_uniforms,
    triangles_instance_attributes,
    zprepass_vertex_attributes
  }(v, f, "model_matrix", g.debug_level, "triangles-zp-" + to_string(stype));
}

private metafunction triangles_shader_ptr
  ptr{glshader{
    triangles_uniforms, triangles_instance_attributes,
    triangles_vertex_attributes}};

private function triangles_shader_ptr
init_triangles_shader(shader_config const& g,
  tree_map{string, string} const& bnd, int stype)
{
  const v = triangles_shader_vert(g, bnd);
  const f = triangles_shader_frag(g, bnd);
  return
    make_glshader_ptr{
      triangles_uniforms,
      triangles_instance_attributes,
      triangles_vertex_attributes
    }(v, f, "model_matrix", g.debug_level, "triangles-" + to_string(stype));
}

private function string
triangles_shader_vert(shader_config const& g,
  tree_map{string, string} const& bnd)
{
  const v = load_shader_program(g, bnd, "triangles.vsh");
  //debug_log("triangles_vsh", v);
  return v;
}

private function string triangles_shader_frag(shader_config const& g,
  tree_map{string, string} const& bnd)
{
  const f = load_shader_program(g, bnd, "triangles.fsh");
  //debug_log("triangles fsh", f);
  return f;
}

private function bool has_instance_to_draw(vertex_buffer const& bo,
  bo_instances_type const& bo_ib)
{
  for (const vsid: 0 .. bo.num_vs()) {
    if (bo_ib.size() <= static_cast{size_t}(vsid)) {
      break;
    }
    const& instance = bo_ib[vsid];
    const& arr = instance.instance_buffer;
    if (!arr.empty()) {
      return true;
    }
  }
  return false;
}

