private threaded namespace pgl3d::drawer::ssao "export-unsafe";
public import common -;
public import pgl3d::drawer::base -;
public import meta m;

private tsvaluetype struct ssao_vertex_attributes()
{
  public glm::vec2 vert;
}

private tsvaluetype struct ssao_instance_attributes()
{
}

private tsvaluetype struct ssao_uniforms()
{
  public glm::vec2 pixel_delta;
  public int sampler_tex;
  public int sampler_tex_depth;
  public float option_value;
  public glm::vec3 near_far_right;
}

public struct drawer_ssao_params(ptr{projection_info} const& proj0) {
  public float option_value;
  public ptr{projection_info} proj = proj0;
}

public struct drawer_ssao(shader_config const& glc,
  drawer_shared const& ds, ptr{drawer_ssao_params} const& params0,
  string const& src_fbname0)
<drawstep_i>
{
  metafunction tattr ssao_vertex_attributes;
  ptr{drawer_ssao_params} const params = params0;
  string const src_fbname = src_fbname0;
  option{cptr{gl_framebuffer}} srcfbo;
  ssao_shader_ptr sdr_re = init_ssao_shader(glc);
  vbid_t const vbid_ssao = ds.vbid_pool->intern("vbid_generic_filter");
  init(ds);
  function void init(drawer_shared const& ds) {
    const respool = pointer_downcast{ptr{resource_pool}}(ds.gl_resources);
    if (!src_fbname.empty()) {
      srcfbo.some = *respool->framebuffers.equal_range(src_fbname);
    }
  }
  public function vbid_t get_vbid() const { return vbid_ssao; }
  public function vbid_t get_instances_vbid() const { return vbid_ssao; }
  public function vbid_t get_vertices_vbid() const { return vbid_ssao; }
  public function prepare_instance_data_funcptr
  get_prepare_instance_data_funcptr() const {
    return make_tfuncptr{prepare_instance_data_default}();
  }
  public function ptr{vertex_buffer} make_vertex_buffer() const {
    return make_tattr_vertex_buffer{tattr}(false, false);
  }
  public function string builtin_vertex_set_name() const {
    return "generic_filter"; }
  public function void make_builtin_vertex_sets(ptr{vertices} const& vptr)
    const
  {
    farray{vertex_attr, 4} dummy_vattr;
    farray{ssao_vertex_attributes, 4} vs;
    vs[0].vert = glm::make_vec2(-1.0, -1.0);
    vs[1].vert = glm::make_vec2( 1.0, -1.0);
    vs[2].vert = glm::make_vec2( 1.0,  1.0);
    vs[3].vert = glm::make_vec2(-1.0,  1.0);
    vptr->push_polygon_distinct{ssao_vertex_attributes, 0}(dummy_vattr, vs);
  }
  public function dgf_filler make_filler(ptr{vertices} const& vptr) const
  {
    return make_dgf_noop(vptr);
  }
  public function texture_info get_texture_info(cstrref const& name) const
  {
    return texture_info();
  }
  public function void resize_screen(shader_config const& glc)
  {
  }
  public function bool reload_shaders(shader_config const& glc)
  {
    return true;
  }
  public function void draw_drawstep(draw_data mutable& ddata)
  {
    // debug_log("ssao draw");
    glDisable(GL_DEPTH_TEST);
    glDepthMask(0);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, srcfbo.some->texture_color[0].get());
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, srcfbo.some->texture_depth.get());
    mutable& sdr = *sdr_re;
    glUseProgram(sdr.program);
    glUniform1i(sdr.u_sampler_tex, 0);
    glUniform1i(sdr.u_sampler_tex_depth, 1);
    const pixel_delta = glm::make_vec2(
      1.0f / static_cast{float}(srcfbo.some->width),
      1.0f / static_cast{float}(srcfbo.some->height));
    // debug_log("delta", pixel_delta);
    glUniform2fv(sdr.u_pixel_delta, 1, pixel_delta.to_crawptr());
    const near_far_right = glm::make_vec3(
      params->proj->camera_pers.near,
      params->proj->camera_pers.far,
      params->proj->camera_pers.width);
    glUniform3fv(sdr.u_near_far_right, 1, near_far_right.to_crawptr());
    mutable opval = static_cast{int}(params->option_value);
    opval %= 2;
    glUniform1f(sdr.u_option_value, static_cast{float}(opval));
    const& bo = *ddata.vertex_buffers[get_vertices_vbid()];
    bo.draw(0, sdr);
  }
  public function option{ptr{edit_mode_i}} get_edit_mode() const
  {
    return option{ptr{edit_mode_i}}();
  }
}

metafunction ssao_shader_ptr
  ptr{glshader{
    ssao_uniforms, ssao_instance_attributes, ssao_vertex_attributes}};

function ssao_shader_ptr
init_ssao_shader(shader_config const& g)
{
  tree_map{string, string} bnd;
  bnd["ssao_param"] = to_string(g.conf.get("ssao_param", 0.7, 0.334, 1.0));
  const v = load_shader_program(g, bnd, "ssao.vsh");
  const f = load_shader_program(g, bnd, "ssao.fsh");
  return make_glshader_ptr{ssao_uniforms, ssao_instance_attributes,
    ssao_vertex_attributes}(v, f, "", g.debug_level, "ssao");
}

