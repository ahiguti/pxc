private threaded namespace pgl3d::opengl::gltexture "export-unsafe";
public import common -;
public import pointer::raw -;
public import pointer::raw_unsafe -;
public import numeric::fpmath -;
public import glm;
public import glm::raw;
public import io::time -;
public import exception -;
public import meta m;
public import pointer::tfuncptr -;
public import GL::compat -;
public import pgl3d::opengl::glresource -;
public import pgl3d::opengl::glshader -;
public import pgl3d::geometry::funcs -;
public import pgl3d::opengl::glbuffer -;
public import pgl3d::opengl::shader_config -;
public import pgl3d::opengl::aggregated_ibuffer -;
public import pgl3d::sdl::sdlutil -;
public import pgl3d::texture::texture -;
public import pgl3d::texture::voxel -;
public import pgl3d::engine::pglbase -;
public import pgl3d::engine::intern_pool -;
public import pgl3d::engine::util -;

public threaded struct gl_texture()
{
  public uint surface_w;
  public uint surface_h;
  public uint surface_d;
  public uint char_w;
  public uint char_h;
  public varray{uint} char_x; // for variable width font
  public auto_texture texture_id;
}

public function void
load_gl_texture_fixedwidth_font(gl_texture mutable& fnt,
  cslice{string} const& fnames)
{
  check_byteorder();
  sdl_log("loading fonts");
  scoped_nullable{TTF_CloseFont} font;
  for (size_t i, const& fn0: fnames) {
    string fn = fn0;
    const p = TTF_OpenFont(fn.c_str(), 18);
    sdl_log("openfont", fn, p.to_size_t());
    font.reset(p);
    if (font.get() != rawptr{TTF_Font}()) {
      break;
    }
  }
  if (font.get() == rawptr{TTF_Font}()) {
    sdl_log("failed to load font");
    throw runtime_error_template{"load font"}("1");
  }
  sdl_log("loading fonts: loaded");
  SDL_Color mutable fg;
  fg.r = 255;
  fg.g = 255;
  fg.b = 255;
  fg.a = 255;
  uint hmax = 0;
  uint wmax = 0;
  // uint wtotal = 0;
  varray{ptr{SDL_Surface_Scoped}} sur_arr;
  for (const i: 0 .. 0x60) {
    farray{uchar, 2} z;
    z[0] = static_cast{uchar}(i + 0x20);
    z[1] = 0u;
    const sur = make_ptr{SDL_Surface_Scoped}();
    sur->reset(TTF_RenderUTF8_Blended(font,
      z.range().to_crawptr().to_ccharptr(), fg));
    // sdl_log(z, sur.W(), sur.H());
    sur_arr.push_back(sur);
    const sur_ref = sur->get().to_slice(1);
    hmax = max(hmax, static_cast{uint}(sur_ref->h));
    wmax = max(wmax, static_cast{uint}(sur_ref->w));
  }
  SDL_Surface_Scoped sur_chars;
  sur_chars.reset(SDL_CreateRGBSurface(0,
    cast_int(power_of_2(wmax * 0x60u)),
    cast_int(power_of_2(hmax)), 32, 0, 0, 0, 0));
  sdl_log("wmax, hmax", wmax, hmax);
  fnt.char_x.clear();
  uint xcur = 0;
  for (const i, const ep: sur_arr) {
    const& e = *ep->get().to_slice(1);
    SDL_Rect r0;
    SDL_Rect r1;
    r0.x = 0;
    r0.y = 0;
    r0.w = e.w;
    r0.h = e.h;
    r1.x = cast_int(xcur);
    r1.y = 0;
    r1.w = r0.w;
    r1.h = r1.h;
    const v = SDL_UpperBlit(*ep, caddress(r0), sur_chars, address(r1));
    xcur += cast_uint(wmax);
    fnt.char_x.push_back(xcur);
  }
  fnt.char_w = wmax;
  fnt.char_h = hmax;
  const& sur_chars_ref = *sur_chars.get().to_slice(1);
  fnt.surface_w = static_cast{uint}(sur_chars_ref.w);
  fnt.surface_h = static_cast{uint}(sur_chars_ref.h);
  const sur_chars_buf = sur_chars_ref.pixels.reinterpret_cast{uchar}()
    .to_slice(static_cast{size_t}(sur_chars_ref.pitch * sur_chars_ref.h));
  for (const x: 0 .. sur_chars_ref.w) {
    for (const y: 0 .. sur_chars_ref.h) {
      const i = static_cast{size_t}((y * sur_chars_ref.w + x) * 4);
      sur_chars_buf[i+0] = 255;
      sur_chars_buf[i+1] = 255;
      sur_chars_buf[i+2] = 255;
    }
  }
  glActiveTexture(GL_TEXTURE0);
  fnt.texture_id.generate();
  sdl_log("font_texture_id", fnt.texture_id.get());
  glBindTexture(GL_TEXTURE_2D, fnt.texture_id.get());
  glTexImage2D(GL_TEXTURE_2D, 0, cast_int(GL_RGBA),
    sur_chars_ref.w, sur_chars_ref.h,
    0, GL_RGBA, GL_UNSIGNED_BYTE, sur_chars_ref.pixels);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,
    cast_int(GL_NEAREST));
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
    cast_int(GL_NEAREST));
}

function varray{ptr{texture_data}}
to_varray(ptr{texture_data} const& td)
{
  varray{ptr{texture_data}} tds;
  tds.push_back(td);
  return tds;
}

public function void
load_gl_texture_cube(gl_texture mutable& ctex, cslice{string} const& fnames)
{
  sdl_log("load_cube_texture");
  glActiveTexture(GL_TEXTURE0);
  ctex.texture_id.generate();
  glBindTexture(GL_TEXTURE_CUBE_MAP, ctex.texture_id.get());
  for (const i: 0 .. 6) {
    const td = load_texture_data(fnames[static_cast{uint}(i)]);
    ctex.surface_w = td->get_width();
    ctex.surface_h = td->get_height();
    const tgt = static_cast{GLenum}(
      static_cast{int}(GL_TEXTURE_CUBE_MAP_POSITIVE_X) + i);
    set_gl_texture(to_varray(td), ctex, tgt, GL_RGBA, GL_RGBA, GL_LINEAR);
  }
  glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER,
    cast_int(GL_LINEAR));
  glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER,
    cast_int(GL_LINEAR));
  glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S,
    cast_int(GL_CLAMP_TO_EDGE));
  glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T,
    cast_int(GL_CLAMP_TO_EDGE));
  if (m::is_true{is_gl3_or_gles3}) {
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R,
      cast_int(GL_CLAMP_TO_EDGE));
  }
  sdl_log("load_cube_texture done");
}

public function void
load_gl_texture_2d(gl_texture mutable& tx, string const& fname)
{
  const td = load_texture_data(fname);
  texture_data_to_gl_texture(GL_TEXTURE_2D, tx, td, GL_RGBA, GL_RGBA,
    GL_NEAREST);
}

public function void
texture_data_to_gl_texture(GLenum target, gl_texture mutable& tx,
  ptr{texture_data} const& td, GLenum iformat, GLenum format, GLenum filter)
{
  glActiveTexture(GL_TEXTURE0);
  tx.texture_id.generate();
  glBindTexture(target, tx.texture_id.get());
  tx.surface_w = td->get_width();
  tx.surface_h = td->get_height();
  tx.surface_d = td->get_depth();
  set_gl_texture(to_varray(td), tx, target, iformat, format, filter);
}

public function void
texture_data_array_to_gl_texture(GLenum target, gl_texture mutable& tx,
  cslice{ptr{texture_data}} const& tds, GLenum iformat, GLenum format,
  GLenum filter)
{
  glActiveTexture(GL_TEXTURE0);
  tx.texture_id.generate();
  glBindTexture(target, tx.texture_id.get());
  tx.surface_w = tds[0]->get_width();
  tx.surface_h = tds[0]->get_height();
  tx.surface_d = tds[0]->get_depth();
  set_gl_texture(tds, tx, target, iformat, format, filter);
}

/* private */

metafunction SDL_Surface_Scoped scoped_nullable{SDL_FreeSurface};

function void dump_buf(varray{uint} const& buf)
{
  debug_log("dump_buf_begin");
  for (const i, const& v: buf) {
    debug_log(i, v);
  }
  debug_log("dump_buf_end");
}

function void set_gl_texture(cslice{ptr{texture_data}} const& tds,
  gl_texture mutable& ti, GLenum target, GLenum iformat, GLenum format,
  GLenum filter)
{
  int const dim = (target == GL_TEXTURE_3D) ? 3 : 2;
  for (size_t i: 0 .. tds.size()) {
    const& td = *tds[i];
    const crawp = td.get_crawptr();
    uint tex_w = td.get_width();
    uint tex_h = td.get_height();
    uint tex_d = td.get_depth();
    int mipmap_level = cast_int(i);
    // dump_buf(uibuf);
    if (sdl_byteorder() != sdl_lil_endian()) {
      throw runtime_error_template{"set_gl_texture"}("");
    }
    if (dim == 3) {
      // debug_log("3dtex", tex_w, tex_h, tex_d);
      glTexImage3D(target, mipmap_level, cast_int(iformat),
	cast_int(tex_w), cast_int(tex_h), cast_int(tex_d),
	0, format, GL_UNSIGNED_BYTE, crawp.to_cvoidptr());
    } else {
      glTexImage2D(target, mipmap_level, cast_int(iformat),
	cast_int(tex_w), cast_int(tex_h),
	0, format, GL_UNSIGNED_BYTE, crawp.to_cvoidptr());
    }
  }
  if (target == GL_TEXTURE_2D || target == GL_TEXTURE_3D)
  {
    mutable min_filter = filter;
    if (filter == GL_NEAREST && tds.size() > 1) {
      min_filter = GL_NEAREST_MIPMAP_NEAREST;
    }
    glTexParameteri(target, GL_TEXTURE_MAG_FILTER, cast_int(filter));
    glTexParameteri(target, GL_TEXTURE_MIN_FILTER, cast_int(min_filter));
    if (m::is_true{is_gl3_or_gles3}) {
      if (tds.size() > 1) {
	glTexParameteri(target, GL_TEXTURE_BASE_LEVEL, 0);
	glTexParameteri(target, GL_TEXTURE_MAX_LEVEL,
	  cast_int(tds.size() - 1));
      }
    }
  }
}

