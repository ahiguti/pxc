private threaded namespace pgl3d::edit_mode::sync_gl "use-unsafe";
public import common -;
public import meta m;
private import pgl3d::edit_mode::base -;
private import pgl3d::edit_mode::vecutil -;

public function {t} void
texture_data_sync_gl(t const& tex, int level, uvec3 const& spos,
  uvec3 const& sz, ptr{gl_texture} const& gltex)
{
  mutable buf = darray{uint}(static_cast{size_t}(sz.x * sz.y * sz.z), 0u);
    /* TODO: 毎回ヒープ割り当てするのをやめる */
  uint i;
  for (const z: 0 .. sz.z) {
    for (const y: 0 .. sz.y) {
      for (const x: 0 .. sz.x) {
        buf[i] = tex.get(spos.x + x, spos.y + y, spos.z + z);
        ++i;
      }
    }
  }
  // debug_log("TexSubImage3D", sz.x, sz.y, sz.z);
  glActiveTexture(GL_TEXTURE0);
  glBindTexture(GL_TEXTURE_3D, gltex->texture_id.get());
  glTexSubImage3D(GL_TEXTURE_3D, level, si(spos.x), si(spos.y), si(spos.z),
    si(sz.x), si(sz.y), si(sz.z), GL_RGBA, GL_UNSIGNED_BYTE,
    buf.to_crawptr().to_cvoidptr());
}

public function void
texture_data_mip_sync_gl(texture_reshaped const& tex0,
  texture_data_mip const& mip, uvec3 const& spos, uvec3 const& sz,
  ptr{gl_texture} const& gltex)
{
  /* miplevel0だけtex0、残りはmip[i]をgltextureに書き込む */
  uvec3 pos_a = spos;
  uvec3 pos_b = spos + sz;
  for (const i, const& tex: mip) {
    uvec3 const msz = pos_b - pos_a;
    // debug_log("mip", i, pos_a, pos_b, msz);
    if (i == 0) {
      texture_data_sync_gl(tex0, si(i), pos_a, msz, gltex);
    } else {
      texture_data_sync_gl(tex, si(i), pos_a, msz, gltex);
    }
    // pos_a = pos_a + make_uvec3(1u, 1u, 1u); // FIXME: なんで?
    pos_b = pos_b + make_uvec3(1u, 1u, 1u);
    pos_a = map{uvec3, operator::div}(pos_a, make_uvec3(2u, 2u, 2u));
    pos_b = map{uvec3, operator::div}(pos_b, make_uvec3(2u, 2u, 2u));
  }
}

