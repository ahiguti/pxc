private threaded namespace pgl3d::edit_mode::procedural "use-unsafe";
public import common -;
public import meta m;
private import pgl3d::edit_mode::base -;
private import pgl3d::edit_mode::vecutil -;
private import pgl3d::texture::generator -;

private valuetype struct dir2_mask
{
  public bool xn; // x-1が壁
  public bool xp; // x+1が壁
  public bool yn; // y-1が壁
  public bool yp; // y+1が壁
  public int count;
}

private threaded function {t} dir2_mask
get_space_dir(t const& tex, uvec3 const& p)
{
  const sz = tex.get_size_uvec3();
  threaded function texel_value get(uint x, uint y, uint z)
  {
    if (x >= sz.x || y >= sz.y || z >= sz.z) {
      return make_space_voxel();
    }
    return tex.get(x, y, z);
  }
  dir2_mask r;
  const vxn = is_space_voxel(get(p.x - 1u, p.y, p.z));
  const vxp = is_space_voxel(get(p.x + 1u, p.y, p.z));
  const vyn = is_space_voxel(get(p.x, p.y - 1u, p.z));
  const vyp = is_space_voxel(get(p.x, p.y + 1u, p.z));
  r.xn = vxn & (!vxp); // x-1
  r.xp = (!vxn) & vxp; // x+1
  r.yn = vyn & (!vyp); // y-1
  r.yp = (!vyn) & vyp; // y+1
  r.count = (vxn ? 1 : 0) + (vxp ? 1 : 0) + (vyn ? 1 : 0) + (vyp ? 1 : 0);
  return r;
}

// procedural.px
private threaded function {t} dir2_mask
get_wall_dir(t const& tex, uvec3 const& p)
{
  const sz = tex.get_size_uvec3();
  threaded function texel_value get(uint x, uint y, uint z)
  {
    if (x >= sz.x || y >= sz.y || z >= sz.z) {
      return make_space_voxel();
    }
    return tex.get(x, y, z);
  }
  dir2_mask r;
  const vxn = is_filled(get(p.x - 1u, p.y, p.z));
  const vxp = is_filled(get(p.x + 1u, p.y, p.z));
  const vyn = is_filled(get(p.x, p.y - 1u, p.z));
  const vyp = is_filled(get(p.x, p.y + 1u, p.z));
  r.xn = vxn & (!vxp); // x-1が壁
  r.xp = (!vxn) & vxp; // x+1が壁
  r.yn = vyn & (!vyp); // y-1が壁
  r.yp = (!vyn) & vyp; // y+1が壁
  r.count = (vxn ? 1 : 0) + (vxp ? 1 : 0) + (vyn ? 1 : 0) + (vyp ? 1 : 0);
  return r;
}

// procedural.px
public threaded function void
spline_postprocess(pgen_context mutable& ctx)
{
  mutable tex = ctx.tex[0]; // copy
  const sz = tex.get_size_uvec3();
  range_foreach{pp_one}(sz);
  range_foreach{pp_copy_back}(sz);
  tex = ctx.tex[0]; // copy again
  range_foreach{pp_right_angle_one}(sz);
  threaded function void pp_copy_back(uint x, uint y, uint z)
  {
    const v = get(x, y, z);
    if (!is_space_voxel(v)) {
      ctx.tex[0].set(x, y, z, v);
    }
  }
  threaded function texel_value get(uint x, uint y, uint z)
  {
    if (x >= sz.x || y >= sz.y || z >= sz.z) {
      return make_space_voxel();
    }
    return tex.get(x, y, z);
  }
  threaded function void pp_right_angle_one(uint x, uint y, uint z)
  {
    const v = get(x, y, z);
    if (!is_filled(v)) {
      return;
    }
    const pos = make_uvec3(x, y, z);
    dir2_mask sd = get_space_dir(tex, pos);
    if (sd.count == 4) {
      // 四方が空白
      const sz = make_uvec3(1u, 1u, 1u);
      pgen_fill_value(pos, sz, make_space_voxel(), ctx);
      return;
    }
    if (sd.count < 2) {
      // 一方が空白
      return;
    }
    if (sd.xn == sd.xp) {
      // 左右両方が空白か、左右両方が非空白
      return;
    }
    plane_param pp;
    pp.dist = -2;
    pp.nor.x = sd.xn ? 1 : -1;
    pp.nor.y = sd.yn ? 2 : -2;
    pp.nor.z = 0;
    const sz = make_uvec3(1u, 1u, 1u);
    pgen_fill_plane(pos, sz, pp, ctx);
  }
  threaded function void pp_one(uint x, uint y, uint z)
  {
    const v = get(x, y, z);
    if (is_filled(v)) {
      return;
    }
    dir2_mask wd = get_wall_dir(tex, make_uvec3(x, y, z));
    if (wd.count >= 3) {
      // 三方以上が壁
      pgen_fill_filled(
        make_uvec3(x, y, z),
        make_uvec3(1u, 1u, 1u),
        ctx);
      return;
    }
    if (!((wd.xn || wd.xp) && (wd.yn || wd.yp))) {
      return;
    }
    // 空白の二方が壁
    const int dx = wd.xn ? 1 : -1;
    const int dy = wd.yn ? 1 : -1;
    int ax;
    int ay;
    bool axw;
    bool ayw;
    // x方向へ壁の終点を探す
    for (ax = si(x); ax >= 0 && ax < si(sz.x); ax += dx) {
      const av = get(ui(ax), y, z);
      if (is_filled(av)) {
        // 壁に当たった
        axw = true;
        break;
      }
      const awd = get_wall_dir(tex, make_uvec3(ui(ax), y, z));
      if ((wd.yn && !awd.yn) || (wd.yp && !awd.yp)) {
        // y方向にあった壁が途切れた
        axw = false;
        break;
      }
    }
    // y方向へ壁の終点を探す
    for (ay = si(y); ay >= 0 && ay < si(sz.y); ay += dy) {
      const av = get(x, ui(ay), z);
      if (is_filled(av)) {
        // 壁に当たった
        ayw = true;
        break;
      }
      const awd = get_wall_dir(tex, make_uvec3(x, ui(ay), z));
      if ((wd.xn && !awd.xn) || (wd.xp && !awd.xp)) {
        // x方向にあった壁が途切れた
        ayw = false;
        break;
      }
    }
    ivec3 nor = make_ivec3(ax - si(x), ay - si(y), 0);
    if (axw) {
      nor.x /= 3;
      if (nor.x == 0) {
        // return;
      }
      ax = si(x) + nor.x;
    }
    if (ayw) {
      nor.y /= 3;
      if (nor.y == 0) {
        // return;
      }
      ay = si(y) + nor.y;
    }
    ax -= dx;
    ay -= dy;
    const xmi = min(si(x), ax);
    const xmx = max(si(x), ax);
    const ymi = min(si(y), ay);
    const ymx = max(si(y), ay);
    const xsz = xmx - xmi + 1;
    const ysz = ymx - ymi + 1;
    if (nor.x == 0 || nor.y == 0) {
      // 壁との間が狭すぎる
      pgen_fill_filled(
        make_uvec3(ui(xmi), ui(ymi), z),
        make_uvec3(ui(xsz), ui(ysz), 1u),
        ctx);
    } else {
      pgen_set_plane_dir(
        make_uvec3(ui(xmi), ui(ymi), z),
        make_uvec3(ui(xsz), ui(ysz), 1u),
        make_ivec3(dx, dy, 0),
        ctx);
    }
  }
}

// procedural.px
private threaded function void pgen_range(uvec3 const& pos, uvec3 const& sz,
  pgen_context mutable& ctx)
{
  const sz_min = fold_list{min}(sz.x, sz);
  if (sz_min < 1u) {
    return;
  }
  ++ctx.rec_count;
  const rv = ctx.rndp->generate() % 256u;
  if (sz_min == 1u) {
    pgen_fill_filled(pos, sz, ctx);
  } else if (rv < 32u) {
    pgen_millefeuille(pos, sz, ctx);
  } else {
    const dvx = ctx.rndp->generate() % 4u + 2u;
    const dvy = ctx.rndp->generate() % 4u + 2u;
    const dvz = ctx.rndp->generate() % 4u + 2u;
    pgen_split_range_div(pos, sz, make_uvec3(dvx, dvy, dvz), ctx);
  }
  --ctx.rec_count;
}

// procedural.px
private threaded function int gcd(int x, int y)
{
  if (x < y) {
    swap(x, y);
  }
  while (true) {
    const d = x % y;
    if (d == 0) {
      break;
    }
    x = y;
    y = d;
  }
  return y;
}

////////////////////////////////////////

// procedural.px
private threaded function void gen_frag1(texture_reshaped mutable& tex_pri,
  texture_reshaped mutable& tex_sec, uvec3 const& pos, uvec3 const& sz,
  ivec3 const& center2, ivec3 const scale2, uint radius2)
{
  // center2は中心オフセットの2倍。szと同じ値のとき領域の中心が球の中心
  // scale2は拡大率の逆数。2のとき1倍。0のときその軸を中心とする円柱になる。
  // radius2は半径の二倍(scale2が2のとき)
  for (const iy: 0 .. sz.y) {
    for (const iz: 0 .. sz.z) {
      for (const ix: 0 .. sz.x) {
        const offset = map{ivec3, operator::mul}(
          make_ivec3(si(ix * 2), si(iy * 2), si(iz * 2))
            + make_ivec3(1, 1, 1) - center2,
          map{ivec3, sgn}(scale2));
        sphere_param sp;
        sp.scale = scale2;
        sp.dist = si(radius2);
        const v = make_sphere_node(sp, offset, 1, 0);
        tex_pri.set(pos.x + ix, pos.y + iy, pos.z + iz, v);
        tex_sec.set(pos.x + ix, pos.y + iy, pos.z + iz, 0x00808080u);
      }
    }
  }
}

// procedural.px
private threaded function void pgen_millefeuille(uvec3 const& p,
  uvec3 const& s, pgen_context mutable& ctx)
{
  if (s.x <= 3 || s.y <= 3 || s.z <= 0) {
    return;
  }
  const rndp = ctx.rndp;
  for (const iz: 0 .. s.z) {
    // 縦方向の大きさを決める
    {
      const szy = rndp->generate() % ui(s.y / 2 - 1) + ui(s.y) / 2;
      const szx = rndp->generate() % ui(s.x / 2 - 1) + ui(s.x) / 2;
      if (szx == 0u || szy == 0u) {
        continue;
      }
      const szx_mi = (ui(s.x) - szx) / 2;
      const szx_mx = szx_mi + szx;
      const szy_mi = (ui(s.y) - szy) / 2;
      const szy_mx = szy_mi + szy;
      // y方向にイテレート、x方向の面を塗る
      draw_side(make_uvec3(p.x, p.y, p.z), make_uvec3(s.x, s.y, s.z),
        szx_mi, szx_mx, szy_mi, szy_mx, false);
      // x方向にイテレート、y方向の面を塗る
      draw_side(make_uvec3(p.y, p.x, p.z), make_uvec3(s.y, s.x, s.z),
        szy_mi, szy_mx, szx_mi, szx_mx, true);
    }
    threaded function void draw_side(uvec3 const& pos, uvec3 const& sz,
      uint szx_mi, uint szx_mx, uint szy_mi, uint szy_mx, bool swap_xy)
    {
      threaded function {t} void swap_xy_if(t mutable& vec)
      {
        if (swap_xy) {
          swap(vec.x, vec.y);
        }
      }
      const szx_rm0 = szx_mi;
      const szx_rm1 = ui(sz.x) - szx_mx;
      uint szx0_prev = szx_mi;
      uint szx1_prev = szx_mx;
      bool prev_flat0 = true;
      bool prev_flat1 = true;
      for (const iy: szy_mi .. szy_mx) {
        mutable szx0 = (iy == szy_mx - 1)
          ? szx_mi
          : (rndp->generate() % 16 < 8)
            ? szx0_prev
            : (rndp->generate() % szx_rm0);
        mutable szx1 = (iy == szy_mx - 1)
          ? szx_mx
          : (rndp->generate() % 16 < 8)
            ? szx1_prev
            : ui(sz.x) - (rndp->generate() % szx_rm1);
        if (!prev_flat0 || iy == szy_mx - 2) {
          szx0 = szx0_prev;
        }
        if (!prev_flat1 || iy == szy_mx - 2) {
          szx1 = szx1_prev;
        }
        // debug_log("szy_mi+szy", szy_mi + szy, "iy", iy, "szx0", szx0,
        // "prev_flat0", prev_flat0);
        prev_flat0 = true;
        prev_flat1 = true;
        for (const ix: szx0 .. szx1) {
          mutable fpos = make_uvec3(ix + pos.x, iy + pos.y, iz + pos.z);
          swap_xy_if(fpos);
          ctx.tex[0].set(fpos.x, fpos.y, fpos.z, make_filled_voxel());
          ctx.tex[1].set(fpos.x, fpos.y, fpos.z, 0x00808080u);
        }
        threaded function void clamp_plane_param(plane_param mutable& pp)
        {
          pp.fit();
          /*
          pp.nor.x = clamp(pp.nor.x, -7, 7);
          pp.nor.y = clamp(pp.nor.y, -7, 7);
          pp.nor.z = clamp(pp.nor.z, -7, 7);
          */
        }
        if (szx0_prev < szx0) {
          const xd = si(szx0 - szx0_prev);
          plane_param pp;
          pp.nor = make_ivec3(1, -xd, 0);
          mutable po = make_uvec3(szx0_prev + pos.x, iy + pos.y, iz + pos.z);
          mutable sz = make_uvec3(szx0 - szx0_prev, 1u, 1u);
          swap_xy_if(pp.nor);
          swap_xy_if(po);
          swap_xy_if(sz);
          clamp_plane_param(pp);
          pgen_fill_plane(po, sz, pp, ctx);
          prev_flat0 = false;
        }
        if (szx0_prev > szx0) {
          const xd = si(szx0_prev - szx0);
          plane_param pp;
          pp.nor = make_ivec3(1, xd, 0);
          mutable po = make_uvec3(szx0 + pos.x, iy + pos.y, iz + pos.z);
          mutable sz = make_uvec3(szx0_prev - szx0, 1u, 1u);
          swap_xy_if(pp.nor);
          swap_xy_if(po);
          swap_xy_if(sz);
          clamp_plane_param(pp);
          pgen_fill_plane(po, sz, pp, ctx);
          prev_flat0 = false;
        }
        if (szx1_prev < szx1) {
          const xd = si(szx1 - szx1_prev);
          plane_param pp;
          pp.nor = make_ivec3(-1, xd, 0);
          mutable po = make_uvec3(szx1_prev + pos.x, iy + pos.y, iz + pos.z);
          mutable sz = make_uvec3(szx1 - szx1_prev, 1u, 1u);
          swap_xy_if(pp.nor);
          swap_xy_if(po);
          swap_xy_if(sz);
          clamp_plane_param(pp);
          pgen_fill_plane(po, sz, pp, ctx);
          prev_flat1 = false;
        }
        if (szx1_prev > szx1) {
          const xd = si(szx1_prev - szx1);
          plane_param pp;
          pp.nor = make_ivec3(-1, -xd, 0);
          mutable po = make_uvec3(szx1 + pos.x, iy + pos.y, iz + pos.z);
          mutable sz = make_uvec3(szx1_prev - szx1, 1u, 1u);
          swap_xy_if(pp.nor);
          swap_xy_if(po);
          swap_xy_if(sz);
          clamp_plane_param(pp);
          pgen_fill_plane(po, sz, pp, ctx);
          prev_flat1 = false;
        }
        szx0_prev = szx0;
        szx1_prev = szx1;
      }
    }
  }
}

// procedural.px
public threaded struct pgen_context(ptr{rand_generator} rndp0)
{
  public ptr{rand_generator} rndp = rndp0;
  public farray{texture_data, 2} tex;
  public uint rec_count;
}

// procedural.px
private threaded function void pgen_split_range(uvec3 const& pos,
  slice{uint} const& xsz, slice{uint} const& ysz, slice{uint} const& zsz,
  pgen_context mutable& ctx)
{
  // 領域を3軸それぞれn分割し、境界を面取りする。分割数nはxsz等のサイズ。
  // posは変更領域の始点、xsz[i]は各分割終点のposからのオフセットで、最後の
  // 要素が変更領域の終点のposからのオフセットになる。
  for (uint iz: 0 .. ui(zsz.size())) {
    for (uint iy: 0 .. ui(ysz.size())) {
      for (uint ix: 0 .. ui(xsz.size())) {
        const i = make_uvec3(ix, iy, iz);
        mutable posi0 = pos;
        if (ix > 0) { posi0.x += xsz[ix - 1]; }
        if (iy > 0) { posi0.y += ysz[iy - 1]; }
        if (iz > 0) { posi0.z += zsz[iz - 1]; }
        const posi1 = pos + make_uvec3(xsz[ix], ysz[iy], zsz[iz]);
        const isz = posi1 - posi0;
        ivec3 iresgn;
        iresgn.x = (ix + 1u == ui(xsz.size())) ? 1 : (ix == 0u) ? -1 : 0;
        iresgn.y = (iy + 1u == ui(ysz.size())) ? 1 : (iy == 0u) ? -1 : 0;
        iresgn.z = (iz + 1u == ui(zsz.size())) ? 1 : (iz == 0u) ? -1 : 0;
        if (xsz.size() == 1u) { iresgn.x = 0; }
        if (ysz.size() == 1u) { iresgn.y = 0; }
        if (zsz.size() == 1u) { iresgn.z = 0; }
        debug_log("pgen i", i, "iresgn", iresgn, "posi", posi0, "isz", isz);
        pgen_set_plane_dir(posi0, isz, iresgn, ctx);
      }
    }
  }
}

// procedural.px
private threaded function void
pgen_split_range_div(uvec3 const& pos, uvec3 const& sz, uvec3 di,
    pgen_context mutable& ctx)
{
  di = map{uvec3, min}(sz, di); // 断片のサイズが1以上となるようにする
  mutable frag_sz = map{uvec3, operator::div}(sz, di); // 断片のサイズ
  debug_log("pgen fsz", frag_sz);
  // 3軸それぞれの分割位置を計算
  mutable xsz = darray{uint}(di.x, 0u);
  mutable ysz = darray{uint}(di.y, 0u);
  mutable zsz = darray{uint}(di.z, 0u);
  const rem_sz = sz - map{uvec3, operator::mul}(frag_sz, di);
    // 剰余の大きさ
  for (const i: 0 .. di.x) { xsz[i] = frag_sz.x * (i + 1u); }
  for (const i: 0 .. di.y) { ysz[i] = frag_sz.y * (i + 1u); }
  for (const i: 0 .. di.z) { zsz[i] = frag_sz.z * (i + 1u); }
  // 後半のオフセットには剰余の大きさも加える。これによって中央の断片に
  // 剰余の大きさが加算される
  for (const i: di.x / 2 .. di.x) { xsz[i] += rem_sz.x; }
  for (const i: di.y / 2 .. di.y) { ysz[i] += rem_sz.y; }
  for (const i: di.z / 2 .. di.z) { zsz[i] += rem_sz.z; }
  pgen_split_range(pos, xsz, ysz, zsz, ctx);
}

// procedural.px
private threaded function int sgn(int x)
{
  return x > 0 ? 1 : (x < 0 ? -1 : 0);
}

// procedural.px
public threaded function plane_param make_plane_param_dir(ivec3 cdir,
  bool ax3, uint repeat)
{
  plane_param p;
  if (ax3) {
    // どの軸とも平行でない平面で切断
    // キーリピートされた場合は向きを反転
    if ((repeat & 1u) != 0u) {
      cdir.x = -cdir.x;
    }
    if ((repeat & 2u) != 0u) {
      cdir.y = -cdir.y;
    }
    if ((repeat & 4u) != 0u) {
      cdir.z = -cdir.z;
    }
    const sgn = (cdir.x > 0) ^ (cdir.y > 0) ^ (cdir.z > 0) ? -1 : 1;
    p.nor = make_ivec3(cdir.y * cdir.z, cdir.z * cdir.x, cdir.x * cdir.y);
    const di = gcd(gcd(abs(p.nor.x), abs(p.nor.y)), abs(p.nor.z));
    p.nor /= di;
    p.dist = abs(cdir.x) * abs(cdir.y) * abs(cdir.z) / di;
    p.nor *= sgn;
    /*
    p.nor *= sgn;
    const di = gcd(gcd(abs(p.nor.x), abs(p.nor.y)), abs(p.nor.z));
    p.nor /= di;
    p.dist = abs(cdir.x) * abs(cdir.y) * abs(cdir.z) / di;
    */
    debug_log("pp cdir=", cdir, " p=", p);
  } else {
    // 軸に平行な平面で切断, キーリピート
    // repeatが0,4,8のときそれぞれx,y,z方向が0になる
    const rep = repeat % 12;
    const rep1 = (rep & 1u) == 1u;
    const rep2 = (rep & 2u) == 2u;
    if (rep < 4) {
      cdir.x = 0;
      cdir.y = rep1 ? cdir.y : -cdir.y;
      cdir.z = rep2 ? cdir.z : -cdir.z;
      p.nor = make_ivec3(
        0,
        abs(cdir.z) * sgn(cdir.y),
        abs(cdir.y) * sgn(cdir.z));
      p.nor /= gcd(abs(p.nor.y), abs(p.nor.z));
    } else if (rep < 8) {
      cdir.y = 0;
      cdir.z = rep1 ? cdir.z : -cdir.z;
      cdir.x = rep2 ? cdir.x : -cdir.x;
      p.nor = make_ivec3(
        abs(cdir.z) * sgn(cdir.x),
        0,
        abs(cdir.x) * sgn(cdir.z));
      p.nor /= gcd(abs(p.nor.z), abs(p.nor.x));
    } else {
      cdir.z = 0;
      cdir.x = rep1 ? cdir.x : -cdir.x;
      cdir.y = rep2 ? cdir.y : -cdir.y;
      p.nor = make_ivec3(
        abs(cdir.y) * sgn(cdir.x),
        abs(cdir.x) * sgn(cdir.y),
        0);
      p.nor /= gcd(abs(p.nor.x), abs(p.nor.y));
    }
    p.dist = 0;
    debug_log("pp cdir=", cdir, " p=", p);
  }
  // 領域をちょうど切断するようなパラメータを返す。テクスチャエントリ
  // に収まる範囲とはかぎらない。
  return p;
}

// procedural.px
private threaded function void pgen_set_plane_dir(uvec3 const& pos,
  uvec3 const& sz, ivec3 const& iresgn, pgen_context mutable& ctx)
{
  // テクスチャデータの指定された範囲を平面切断パターンで埋める。平面
  // の向きはiresgnの符号で指定される。平面に接しないボクセルはfilledか
  // 空白になる。
  const cdir = map{ivec3, operator::mul}(to_ivec3(sz), iresgn);
  bool ax3 = true;
  uint rep = 0;
  uint zc = 0;
  zc += (cdir.x == 0) ? 1u : 0u;
  zc += (cdir.y == 0) ? 1u : 0u;
  zc += (cdir.z == 0) ? 1u : 0u;
  if (zc > 1u) {
    pgen_range(pos, sz, ctx);
  } else {
    if (cdir.x == 0) {
      rep = 0;
      ax3 = false;
    } else if (cdir.y == 0) {
      rep = 4;
      ax3 = false;
    } else if (cdir.z == 0) {
      rep = 8;
      ax3 = false;
    }
    plane_param pp = make_plane_param_dir(cdir, ax3, rep);
    pp.fit();
    pgen_fill_plane(pos, sz, pp, ctx);
  }
}

// procedural.px
private threaded function {f} void range_foreach(uvec3 const& sz)
{
  for (const z: 0 .. sz.z) {
    for (const y: 0 .. sz.y) {
      for (const x: 0 .. sz.x) {
        f(x, y, z);
      }
    }
  }
}

// procedural.px
private threaded function void pgen_fill_filled(uvec3 const& pos,
  uvec3 const& sz, pgen_context mutable& ctx)
{
  threaded function void ffunc(uint x, uint y, uint z)
  {
    const x1 = pos.x + x;
    const y1 = pos.y + y;
    const z1 = pos.z + z;
    ctx.tex[0].set(x1, y1, z1, make_filled_voxel());
    ctx.tex[1].set(x1, y1, z1, 0x00808080u);
  }
  range_foreach{ffunc}(sz);
}

// procedural.px
private threaded function void pgen_fill_value(uvec3 const& pos,
  uvec3 const& sz, uint value, pgen_context mutable& ctx)
{
  threaded function void ffunc(uint x, uint y, uint z)
  {
    const x1 = pos.x + x;
    const y1 = pos.y + y;
    const z1 = pos.z + z;
    ctx.tex[0].set(x1, y1, z1, value);
    ctx.tex[1].set(x1, y1, z1, 0x00808080u);
  }
  range_foreach{ffunc}(sz);
}

// procedural.px
private threaded function void pgen_fill_plane(uvec3 const& pos,
  uvec3 const& sz, plane_param const& pp, pgen_context mutable& ctx)
{
  debug_log("pgen_fill_plane", sz);
  threaded function void ffunc(uint x, uint y, uint z)
  {
    const x1 = pos.x + x;
    const y1 = pos.y + y;
    const z1 = pos.z + z;
    // const ov = ctx.tex[0].get(x1, y1, z1);
    const v = make_plane_node(pp, make_ivec3(
      si(x * 2 + 1) - si(sz.x),
      si(y * 2 + 1) - si(sz.y),
      si(z * 2 + 1) - si(sz.z)),
      1);
    ctx.tex[0].set(x1, y1, z1, v);
    ctx.tex[1].set(x1, y1, z1, 0x00808080u);
  }
  range_foreach{ffunc}(sz);
}

