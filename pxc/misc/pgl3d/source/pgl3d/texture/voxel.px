public threaded namespace pgl3d::texture::voxel;
public import common -;
public import exception -;
public import meta m;
public import glm -;
public import numeric::fpmath -;
public import pgl3d::engine::util -;
public import pgl3d::texture::texture -;

public metafunction texel_value uint;

public threaded function {t} void
set_distance(bool enable_short_circuit, t mutable& node)
{
  for (const z : 0 .. node.get_depth()) {
    for (const y : 0 .. node.get_height()) {
      for (const x : 0 .. node.get_width()) {
	set_distance_pos(enable_short_circuit, node, si(x), si(y), si(z));
      }
    }
  }
}

public threaded function {t} void
update_distance(bool enable_short_circuit, t mutable& node,
  ivec3 mutable& mod_mi, ivec3 mutable& mod_mx, bool clear_flag)
{
  // clear_flagは範囲はすべて空白になったとわかっているとき真
  ivec3 const mi = map{ivec3, max}(
    map{ivec3, operator::sub}(mod_mi, make_ivec3(15, 15, 15)),
    make_ivec3(0, 0, 0));
  ivec3 const mx = map{ivec3, min}(
    map{ivec3, operator::add}(mod_mx, make_ivec3(15, 15, 15)),
    make_ivec3(
      si(node.get_width() - 1),
      si(node.get_height() - 1),
      si(node.get_depth() - 1)));
  /*
  debug_log("update_distance", mi, mx, "shortcircuit", enable_short_circuit,
    "clear_flag", clear_flag);
  */
  for (const z: mi.z .. mx.z + 1) {
    for (const y: mi.y .. mx.y + 1) {
      for (const x: mi.x .. mx.x + 1) {
	const v = node.get(ui(x), ui(y), ui(z));
	if (!is_space_voxel(v)) {
	  continue;
	}
	dist_3d dv;
	uint done = 0;
	if (in_range3(x, y, z, mod_mi, mod_mx)) {
	  /* 変更があった領域の内部。距離ゼロから計算 */
	  if (enable_short_circuit) {
	    short_circuit(node, dv, x, y, z, 0, -1, 0) ||
	    short_circuit(node, dv, x, y, z, -1, 0, 0) ||
	    short_circuit(node, dv, x, y, z, 0, 0, -1);
	  }
	} else if (clear_flag) {
	  /* クリア。変更があった領域の外側。現在より伸ばせる可能性がある */
	  dv = get_dist_3d(v);
	  const spmi = make_ivec3(x - dv.xn, y - dv.yn, z - dv.zn);
	  const spmx = make_ivec3(x + dv.xp, y + dv.yp, z + dv.zp);
          /* 各方向について計算省略可能かどうかチェックする
             - 伸ばそうとする範囲と変更があった範囲が重ならないならdone
             - 伸ばす方向でない2軸について範囲がすでに重なってないならdone
           */
	  if (!in_range(x + dv.xp + 1, mod_mi.x, mod_mx.x) ||
	    !has_intersect2(spmi.y, spmi.z, spmx.y, spmx.z,
	      mod_mi.y, mod_mi.z, mod_mx.y, mod_mx.z)) { done |= (1u << 0u); }
	  if (!in_range(x - dv.xn - 1, mod_mi.x, mod_mx.x) ||
	    !has_intersect2(spmi.y, spmi.z, spmx.y, spmx.z,
	      mod_mi.y, mod_mi.z, mod_mx.y, mod_mx.z)) { done |= (1u << 1u); }
	  if (!in_range(y + dv.yp + 1, mod_mi.y, mod_mx.y) ||
	    !has_intersect2(spmi.z, spmi.x, spmx.z, spmx.x,
	      mod_mi.z, mod_mi.x, mod_mx.z, mod_mx.x)) { done |= (1u << 2u); }
	  if (!in_range(y - dv.yn - 1, mod_mi.y, mod_mx.y) ||
	    !has_intersect2(spmi.z, spmi.x, spmx.z, spmx.x,
	      mod_mi.z, mod_mi.x, mod_mx.z, mod_mx.x)) { done |= (1u << 3u); }
	  if (!in_range(z + dv.zp + 1, mod_mi.z, mod_mx.z) ||
	    !has_intersect2(spmi.x, spmi.y, spmx.x, spmx.y,
	      mod_mi.x, mod_mi.y, mod_mx.x, mod_mx.y)) { done |= (1u << 4u); }
	  if (!in_range(z - dv.zn - 1, mod_mi.z, mod_mx.z) ||
	    !has_intersect2(spmi.x, spmi.y, spmx.x, spmx.y,
	      mod_mi.x, mod_mi.y, mod_mx.x, mod_mx.y)) { done |= (1u << 5u); }
          // debug_log("clear_flag donemask=", to_hexstring(done));
	} else {
	  /* 非クリア。変更があった領域の外側。距離ゼロから計算 */
	  // TODO: もっと計算省略可能
	  if (enable_short_circuit) {
	    short_circuit(node, dv, x, y, z, 0, -1, 0) ||
	    short_circuit(node, dv, x, y, z, -1, 0, 0) ||
	    short_circuit(node, dv, x, y, z, 0, 0, -1);
	  }
	}
	if (done != (1u << 6u) - 1u) {
	  const wv = distance_pos_dist(node, dv, x, y, z, done);
	  if (wv != v) {
	    node.set(ui(x), ui(y), ui(z), wv);
	    mod_mi = map{ivec3, min}(mod_mi, make_ivec3(x, y, z));
	    mod_mx = map{ivec3, max}(mod_mx, make_ivec3(x, y, z));
	  }
	}
      }
    }
  }
}

public threaded function bool
in_range(int x, int mi, int mx)
{
  return x >= mi && x <= mx;
}

public threaded function bool
in_range3(int x, int y, int z, ivec3 const& mi, ivec3 const& mx)
{
  return x >= mi.x && x <= mx.x && y >= mi.y && y <= mx.y &&
    z >= mi.z && z <= mx.z;
}

public threaded function bool 
has_intersect2(int ax0, int ay0, int ax1, int ay1, int bx0, int by0,
  int bx1, int by1)
{
  return
    has_intersect1(ax0, ax1, bx0, bx1) &&
    has_intersect1(ay0, ay1, by0, by1);
}

public threaded function bool
has_intersect1(int a0, int a1, int b0, int b1)
{
  return max(a0, b0) >= min(a1, b1);
}

metafunction ui static_cast{uint};
metafunction si static_cast{int};

public threaded struct dist_3d
{
  public int xp;
  public int xn;
  public int yp;
  public int yn;
  public int zp;
  public int zn;
}

public threaded function dist_3d
get_dist_3d(texel_value v)
{
  dist_3d dv;
  dv.zp = si((v >> 20u) & 0xfu);
  dv.zn = si((v >> 16u) & 0xfu);
  dv.yp = si((v >> 12u) & 0xfu);
  dv.yn = si((v >> 8u) & 0xfu);
  dv.xp = si((v >> 4u) & 0xfu);
  dv.xn = si((v >> 0u) & 0xfu);
  return dv;
}

public threaded function texel_value
dist_3d_to_texel_value(dist_3d const& dv)
{
  const xv = (dv.xp << 4) + dv.xn;
  const yv = (dv.yp << 4) + dv.yn;
  const zv = (dv.zp << 4) + dv.zn;
  const wv = ui((zv << 16) + (yv << 8) + (xv << 0));
  return wv;
}

threaded function {t} void
set_distance_pos(bool enable_short_circuit, t mutable& node,
  int x, int y, int z)
{
  if (!is_space_voxel(node.get(ui(x), ui(y), ui(z)))) {
    return;
  }
  dist_3d dv;
  if (enable_short_circuit) {
    // 隣接するボクセルのdistanceを読んで無用な計算を省く。
    // xyz昇順に計算していることを前提にしている。
    // 無効のときと結果が一致するとは限らない。
    // TODO: これすると描画少し遅いのはなぜなのかしらべる。
    short_circuit(node, dv, x, y, z, 0, -1, 0) ||
    short_circuit(node, dv, x, y, z, -1, 0, 0) ||
    short_circuit(node, dv, x, y, z, 0, 0, -1);
  }
  const wv = distance_pos_dist(node, dv, x, y, z, 0u);
  node.set(ui(x), ui(y), ui(z), wv);
}

threaded function {t} bool
short_circuit(t mutable&node, dist_3d mutable& dv,
  int x, int y, int z, int xd, int yd, int zd)
{
  int x1 = x + xd;
  int y1 = y + yd;
  int z1 = z + zd;
  if (x1 < 0 || y1 < 0 || z1 < 0) {
    return false;
  }
  if (ui(x1) >= node.get_width() || ui(y1) >= node.get_height()
    || ui(z1) >= node.get_depth()) {
    return false;
  }
  const v = node.get(ui(x1), ui(y1), ui(z1));
  if (!is_space_voxel(v)) {
    return false;
  }
  mutable zp = si((v >> 20u) & 0xfu);
  mutable zn = si((v >> 16u) & 0xfu);
  mutable yp = si((v >> 12u) & 0xfu);
  mutable yn = si((v >> 8u) & 0xfu);
  mutable xp = si((v >> 4u) & 0xfu);
  mutable xn = si((v >> 0u) & 0xfu);
  if (xd < 0 && xp < 1) {
    return false;
  }
  if (yd < 0 && yp < 1) {
    return false;
  }
  if (zd < 0 && zp < 1) {
    return false;
  }
  dv.zp = max(dv.zp, zp - max(0, -zd));
  dv.zn = max(dv.zn, zn - max(0, zd));
  dv.yp = max(dv.yp, yp - max(0, -yd));
  dv.yn = max(dv.yn, yn - max(0, yd));
  dv.xp = max(dv.xp, xp - max(0, -xd));
  dv.xn = max(dv.xn, xn - max(0, xd));
  return true;
}

threaded function {t} texel_value
distance_pos_dist(t const& node, dist_3d mutable& dv,
  int x, int y, int z, uint done)
{
  const n = 15; // min(1 << bshift, 15); // fits 4 bit
  for (int d: 0 .. n) {
    if (dv.xp >= 15) { done |= 1u; }
    if ((done & 1) == 0) {
      done |= check_extend(node, x, y, z, d, dv, 1, 0, 0) << 0;
    }
    if (dv.xn >= 15) { done |= 2u; }
    if ((done & 2) == 0) {
      done |= check_extend(node, x, y, z, d, dv, -1, 0, 0) << 1;
    }
    if (dv.yp >= 15) { done |= 4u; }
    if ((done & 4) == 0) {
      done |= check_extend(node, x, y, z, d, dv, 0, 1, 0) << 2;
    }
    if (dv.yn >= 15) { done |= 8u; }
    if ((done & 8) == 0) {
      done |= check_extend(node, x, y, z, d, dv, 0, -1, 0) << 3;
    }
    if (dv.zp >= 15) { done |= 16u; }
    if ((done & 16) == 0) {
      done |= check_extend(node, x, y, z, d, dv, 0, 0, 1) << 4;
    }
    if (dv.zn >= 15) { done |= 32u; }
    if ((done & 32) == 0) {
      done |= check_extend(node, x, y, z, d, dv, 0, 0, -1) << 5;
    }
    if (done == (1u << 6u) - 1u) {
      break;
    }
  }
  return dist_3d_to_texel_value(dv);
  /*
  const xv = (dv.xp << 4) + dv.xn;
  const yv = (dv.yp << 4) + dv.yn;
  const zv = (dv.zp << 4) + dv.zn;
  const wv = ui((zv << 16) + (yv << 8) + (xv << 0));
  return wv;
  */
  // debug_check{bshift}(node, x, y, z, dv);
  // debug_log("calc_dist", x, y, z, to_hexstring(wv));
  // node.set(ui(x), ui(y), ui(z), wv);
}

threaded function {t} void
debug_check(t const& node, int x, int y, int z,
  dist_3d const& dv)
{
  bool r = node_space(node, x - dv.xn, x + dv.xp, y - dv.yn, y + dv.yp,
    z - dv.zn, z + dv.zp);
  if (!r) {
    throw runtime_error_template{"voxel"}("debug check failed");
  }
}

threaded function {t} bool
node_space(t const& node, int x0, int x1, int y0, int y1,
  int z0, int z1)
{
  metafunction ui static_cast{uint};
  metafunction si static_cast{int};
  int w = si(node.get_width());
  int h = si(node.get_height());
  int d = si(node.get_depth());
  if (x0 < 0 || x1 >= w || y0 < 0 || y1 >= h || z0 < 0 || z1 >= d) {
    return false;
  }
  for (const z: ui(z0) .. ui(z1 + 1)) {
    for (const y: ui(y0) .. ui(y1 + 1)) {
      for (const x: ui(x0) .. ui(x1 + 1)) {
	if (!is_space_voxel(node.get(x, y, z))) {
	  return false;
	}
      }
    }
  }
  return true;
}

threaded function {t} uint
check_extend(t const& node, int x, int y, int z, int d,
  dist_3d mutable& dv, int dx, int dy, int dz)
{
  if (dx > 0) {
    // x positive
    if (dv.xp < d) { return 1; }
    if (node_space(node,
      x + dv.xp + 1, x + dv.xp + 1,
      y - dv.yn, y + dv.yp,
      z - dv.zn, z + dv.zp))
    {
      ++dv.xp;
      return 0;
    }
  } else if (dx < 0) {
    // x negative
    if (dv.xn < d) { return 1; }
    if (node_space(node,
      x - dv.xn - 1, x - dv.xn - 1,
      y - dv.yn, y + dv.yp,
      z - dv.zn, z + dv.zp))
    {
      ++dv.xn;
      return 0;
    }
  } else if (dy > 0) {
    // y positive
    if (dv.yp < d) { return 1; }
    if (node_space(node,
      x - dv.xn, x + dv.xp,
      y + dv.yp + 1, y + dv.yp + 1,
      z - dv.zn, z + dv.zp))
    {
      ++dv.yp;
      return 0;
    }
  } else if (dy < 0) {
    // y negative
    if (dv.yn < d) { return 1; }
    if (node_space(node,
      x - dv.xn, x + dv.xp,
      y - dv.yn - 1, y - dv.yn - 1,
      z - dv.zn, z + dv.zp))
    {
      ++dv.yn;
      return 0;
    }
  } else if (dz > 0) {
    // z positive
    if (dv.zp < d) { return 1; }
    if (node_space(node,
      x - dv.xn, x + dv.xp,
      y - dv.yn, y + dv.yp,
      z + dv.zp + 1, z + dv.zp + 1))
    {
      ++dv.zp;
      return 0;
    }
  } else if (dz < 0) {
    // z negative
    if (dv.zn < d) { return 1; }
    if (node_space(node,
      x - dv.xn, x + dv.xp,
      y - dv.yn, y + dv.yp,
      z - dv.zn - 1, z - dv.zn - 1))
    {
      ++dv.zn;
      return 0;
    }
  }
  return 1;
}

public threaded function bool is_filled(texel_value v)
{
  return (v & 0xff000000) == 0xff000000;
}

public threaded function texel_value make_filled_voxel()
{
  return 0xff000000u;
}

public threaded function bool is_node_reference(texel_value v)
{
  return (v & 0xff000000) == 0x01000000;
}

public threaded function texel_value make_node_reference(texel_value v)
{
  return get_node_reference(v) | 0x01000000;
}

public threaded function uint get_node_reference(texel_value v)
{
  return v & 0x00ffffff;
}

public threaded function bool is_space_voxel(texel_value v)
{
  return (v & 0xff000000) == 0x00000000;
}

public threaded function uint make_space_voxel()
{
  return 0u;
}

public threaded function bool is_plane_node(uint v)
{
  const node_type = v >> 24u;
  return node_type >= 160 && node_type <= 254;
}

public threaded function bool is_sphere_node(uint v)
{
  const node_type = v >> 24u;
  return node_type >= 2 && node_type <= 159;
}

public valuetype struct noderef_param()
{
  public uvec3 rot;
  public uvec3 sgn;
  public uvec3 coord;
}

public threaded function noderef_param decode_noderef_param(uint v)
{
  uint x = v & 0xffu;
  uint y = (v >> 8u) & 0xffu;
  uint z = (v >> 16u) & 0xffu;
  noderef_param p;
  p.rot = make_uvec3(x >> 7u, y >> 7u, z >> 7u);
  p.sgn = make_uvec3((x >> 6u) & 1u, (y >> 6u) & 1u, (z >> 6u) & 1u);
  p.coord = make_uvec3(x & 63u, y & 63u, z & 63u);
  return p;
}

public threaded function uint
encode_noderef_param(noderef_param const& p)
{
  uvec3 v;
  v += map{uvec3, operator::shiftl}(p.rot, make_uvec3(7u, 7u, 7u));
  v += map{uvec3, operator::shiftl}(p.sgn, make_uvec3(6u, 6u, 6u));
  v += p.coord;
  return make_node_reference((v.z << 16u) | (v.y << 8u) | v.x);
}

public threaded function imat3
noderef_param_get_imat3(noderef_param const& p)
{
  // TODO: 速くする
  imat3 m = make_imat3(1, 0, 0, 0, 1, 0, 0, 0, 1);
  if (p.sgn.x != 0) {
    m = m * make_imat3(-1, 0, 0, 0, 1, 0, 0, 0, 1);
  }
  if (p.sgn.y != 0) {
    m = m * make_imat3(1, 0, 0, 0, -1, 0, 0, 0, 1);
  }
  if (p.sgn.z != 0) {
    m = m * make_imat3(1, 0, 0, 0, 1, 0, 0, 0, -1);
  }
  if (p.rot.x != 0) {
    m = make_imat3(0, 1, 0, 1, 0, 0, 0, 0, 1) * m; // swap xy
  }
  if (p.rot.y != 0) {
    m = make_imat3(1, 0, 0, 0, 0, 1, 0, 1, 0) * m; // swap yz
  }
  if (p.rot.z != 0) {
    m = make_imat3(0, 0, 1, 0, 1, 0, 1, 0, 0) * m; // swap zx
  }
  return m;
}

public threaded function void
noderef_param_set_imat3(noderef_param mutable& p, imat3 const& ma)
{
  /*
  xyz -> xyz  -  -  -
  xyz -> yxz  xy -  -
  xyz -> xzy  -  yz -
  xyz -> yzx  xy yz -
  xyz -> zyx  -  -  zx
  xyz -> zxy  xy -  zx
  xyz -> yzx  -  yz zx (unused)
  xyz -> xzy  xy yz zx (unused)
  */
  const& m = ma.to_cslice();
  threaded function void set_sgn(uint i0, uint i1, uint i2)
  {
    p.sgn = make_uvec3(
      m[i0] < 0 ? 1u : 0u,
      m[i1] < 0 ? 1u : 0u,
      m[i2] < 0 ? 1u : 0u);
  }
  if (m[0] != 0) {
    /* x -> x */
    if (m[4] != 0) {
      /* y -> y */
      p.rot = make_uvec3(0, 0, 0); /* xyz -> xyz */
      set_sgn(0, 4, 8);
    } else { /* m[5] != 0 */
      /* z -> y */
      p.rot = make_uvec3(0, 1, 0); /* xyz -> xzy */
      set_sgn(0, 5, 7);
    }
  } else if (m[1] != 0) {
    /* y -> x */
    if (m[3] != 0) {
      /* x -> y */
      p.rot = make_uvec3(1, 0, 0); /* xyz -> yxz */
      set_sgn(1, 3, 8);
    } else { /* m[5] != 0 */
      /* z -> y */
      p.rot = make_uvec3(1, 1, 0); /* xyz -> yzx */
      set_sgn(1, 5, 6);
    }
  } else { /* m[2] != 0 */
    /* z -> x */
    if (m[4] != 0) {
      /* y -> y */
      p.rot = make_uvec3(0, 0, 1); /* xyz -> zyx */
      set_sgn(2, 4, 6);
    } else { /* m[3] != 0 */
      /* x -> y */
      p.rot = make_uvec3(1, 0, 1); /* xyz -> zxy */
      set_sgn(2, 3, 7);
    }
  }
}

public valuetype struct plane_param()
{
  public int dist = 0;
  public ivec3 nor = make_ivec3(-1, -1, -1);
  public function void clamp_param()
  {
    nor.x = clamp(nor.x, -7, 7);
    nor.y = clamp(nor.y, -7, 7);
    nor.z = clamp(nor.z, -7, 7);
    dist = clamp(dist, -48, 48);
  }
  public function void adda__(plane_param const& v)
  {
    nor += v.nor;
    dist += v.dist;
  }
  public function void diva__(uint v)
  {
    nor /= si(v);
    dist /= si(v);
  }
}

public threaded function plane_param decode_plane_node(uint v)
{
  plane_param p;
  if (!is_plane_node(v)) {
    return p;
  }
  int a = si(v >> 24u);
  int r = si(v & 0xffu);
  int g = si((v >> 8u) & 0xffu);
  int b = si((v >> 16u) & 0xffu);
  p.dist = si(a) - 208;
  p.nor.x = ((r >> 4u) & 0x0fu) - 8;
  p.nor.y = ((g >> 4u) & 0x0fu) - 8;
  p.nor.z = ((b >> 4u) & 0x0fu) - 8;
  p.clamp_param();
  return p;
}

private threaded function int mul_div(int a, int m, int d)
{
  // a * m / d 四捨五入
  return (a * m + d / 2) / d;
}

public threaded function void plane_param_fit(plane_param mutable& pp)
{
  // xyzは-7から+7まで有効
  // dは-48から+48まで有効
  const& n = pp.nor;
  const nz = to_vec3(n).normalize();
  int max_xyz = max(max(abs(n.x), abs(n.y)), abs(n.z));
  if (max_xyz <= 7) {
    return;
  }
  threaded function void modify(int v, int mutable& a) {
    mutable a1 = mul_div(a, v, max_xyz);
    if (a1 == 0) {
      a1 = (a > 0) ? 1 : ((a < 0) ? -1 : 0);
    }
    a = a1;
  }
  int v;
  int best_v = 0;
  float best_val = 0.0f;
  ivec3 best_nor;
  // 7から1まで縮小してみて、一番元のベクトルと近いものを採用
  for (v = 7; v != 0; --v) {
    mutable n1 = n;
    modify(v, n1.x);
    modify(v, n1.y);
    modify(v, n1.z);
    const n1z = to_vec3(n1).normalize();
    const p = dot(nz, n1z);
    if (p > best_val) {
      best_v = v;
      best_val = p;
      best_nor = n1;
    }
  }
  // 採用した縮小率を適用
  debug_log("plane_param_fit", pp.nor, best_nor);
  pp.nor = best_nor;
  pp.dist = mul_div(pp.dist, best_v, max_xyz);
}

public threaded function uint encode_plane_node(plane_param pp)
{
  {
    const& n = pp.nor;
    if (n.x == 0 && n.y == 0 && n.z == 0) {
      return 0u;
    }
  }
  plane_param_fit(pp);
  const& n = pp.nor;
  /*
  if (n.x < -7 || n.x > 7 || n.y < -7 || n.y > 7 || n.z < -7 || n.z > 7) {
    return 0u;
  }
  */
  const d = pp.dist;
  // FIXME 208+48=256になるので収まらない
  // どうせそんなにいらない。7+7+7=21までしかつかわない。
  if (d < -48 || d > 48) {
    return 0u;
  }
  const r = ui(n.x + 8) << 4u;
  const g = ui(n.y + 8) << 4u;
  const b = ui(n.z + 8) << 4u;
  const a = ui(d + 208);
  const v = (a << 24u) | (b << 16u) | (g << 8u) | r;
  return v;
}

public threaded function uint make_plane_node(plane_param const& p,
  ivec3 const& offset, int offset_mul)
{
  const& nor = p.nor;
  const int d = p.dist;
  const d1 = d - dot_int(nor, offset) * offset_mul;
    // offsetが0のボクセルの距離パラメタがdのとき、その平面がoffsetだけ
    // 移動した位置のボクセルを切断するような距離パラメタはd1になる
    // offset_mulは1ボクセルあたりのoffset値の変化する量。
  const drange = abs(nor.x) + abs(nor.y) + abs(nor.z);
    // ax+by+czの(x,y,z)が-1,+1の範囲での最小最大は-drange,+drange
  // debug_log("plane_node pre", nor, d, offset, d1, drange);
  if (d1 <= -drange) {
    return 255u << 24u; // d1が小さすぎるので壁
  }
  if (d1 >= drange) {
    return 0u; // d1が大きすぎるので空白
  }
  // debug_log("plane_node", nor, d, offset, d1, drange);
  plane_param pp;
  pp.nor = nor;
  pp.dist = d1;
  return encode_plane_node(pp);
}

public valuetype struct rgb8()
{
  public uint b; // 8bit
  public uint g; // 8bit
  public uint r; // 8bit
}

public valuetype struct color_param()
{
  public uchar metalness; // 1bit
  public uchar emission;  // 1bit
  public uint  roughness; // 4bit
  public rgb8 rgb;
  public function void adda__(color_param const& v) {
    rgb.r += v.rgb.r;
    rgb.g += v.rgb.g;
    rgb.b += v.rgb.b;
    metalness |= v.metalness;
    emission |= v.emission;
    roughness += v.roughness;
  }
  public function void diva__(uint v) {
    rgb.r /= v;
    rgb.g /= v;
    rgb.b /= v;
    roughness /= v;
  }
}

public threaded function color_param decode_color_param(uint v)
{
  color_param p;
  p.metalness = static_cast{uchar}((v >> 31u) & 0x01u);
  p.emission = static_cast{uchar}((v >> 30u) & 0x01u);
  p.roughness = static_cast{uchar}((v >> 24u) & 0x0fu);
  p.rgb.b = static_cast{uchar}((v >> 16u) & 0xffu);
  p.rgb.g = static_cast{uchar}((v >> 8u) & 0xffu);
  p.rgb.r = static_cast{uchar}((v >> 0u) & 0xffu);
  return p;
}

public threaded function uint encode_color_param(color_param const& p0)
{
  mutable p = p0;
  uchar const uc0 = 0u;
  uchar const uc1 = 1u;
  p.metalness = clamp(p.metalness, uc0, uc1);
  p.emission = clamp(p.emission, uc0, uc1);
  p.roughness = clamp(p.roughness, 0u, 15u);
  p.rgb.r = clamp(p.rgb.r, 0u, 255u);
  p.rgb.g = clamp(p.rgb.g, 0u, 255u);
  p.rgb.b = clamp(p.rgb.b, 0u, 255u);
  uint r;
  r |= ui(p.metalness) << 31u;
  r |= ui(p.emission) << 30u;
  r |= ui(p.roughness) << 24u;
  r |= ui(p.rgb.b) << 16u;
  r |= ui(p.rgb.g) << 8u;
  r |= ui(p.rgb.r) << 0u;
  return r;
}

public valuetype struct sphere_param()
{
  public int dist = 1;
  public ivec3 center;
  public ivec3 scale = make_ivec3(2, 2, 2);
  public function void adda__(sphere_param const& v)
  {
    dist += v.dist;
    center += v.center;
    scale = map{ivec3, max}(scale, v.scale);
  }
  public function void diva__(uint v)
  {
    dist /= si(v);
    center /= si(v);
  }
}

threaded function {t} t round(t v)
{
  return v > 0.0 ? (v + 0.5) : (v - 0.5);
}

threaded function {t} t round_bias(t v, t b)
{
  return v > 0.0 ? (v + b) : (v - b);
}

public threaded function uint make_sphere_node(sphere_param const& p,
  ivec3 const& offset, int offset_mul, uint modifier)
{
  const c = p.center -
    map{ivec3, operator::mul}(offset, p.scale) * offset_mul / 2;
    // offset_mulは1ボクセルあたりのoffset値の変化する量。
  threaded function int distance2(ivec3 const pos)
  {
    // posはシェーダでは0.5までの範囲。この関数は1までの範囲なので2倍された値。
    const a_pt = map{ivec3, operator::mul}(p.scale, pos);
      // シェーダのa_vtの二倍の値
    const c_pt = c + c; // シェーダのc_vtの二倍の値
    const ac_pt = c_pt - a_pt;
    const len2_ac_pt = dot_int(ac_pt, ac_pt); // シェーダのlen_2_ac_ptの4倍
    return len2_ac_pt;
  }
  /* 球の内側なら負, 境界上なら0, 外側なら正 */
  threaded function int collision(ivec3 const pos)
  {
    return distance2(pos) - p.dist * p.dist * 4;
  }
  bool has_inside = false;
  bool has_outside = false;
  for (int z: -1 .. 2) {
    for (int y: -1 .. 2) {
      for (int x: -1 .. 2) {
	const ivec3 pos = make_ivec3(x, y, z);
	const v = collision(pos);
	has_inside |= v < 0; // 球の中心からの距離がdistより小さい
	has_outside |= v > 0; // 球の中心からの距離がdistより大きい
      }
    }
  }
  if ((modifier & 12) != 0u) {
    const d2 = distance2(ivec3()); // 球の中心とボクセル中心の距離の2乗
    const r2 = p.dist * p.dist * 4; // 球の半径の2乗
    const rdiff = sqrt(static_cast{double}(d2))
      - sqrt(static_cast{double}(r2));
    const inor = map{ivec3, operator::mul}(c, p.scale);
    // debug_log("sp inor", inor, c, p.scale);
    plane_param pp;
    if (true) {
      /*
      const m = p.dist * 2;
      const mdiv = max((m + 6) / 7, 1);
      pp.nor.x = clamp(inor.x / mdiv, -7, 7);
      pp.nor.y = clamp(inor.y / mdiv, -7, 7);
      pp.nor.z = clamp(inor.z / mdiv, -7, 7);
      debug_log("hoge", p.dist, mdiv);
      */
      pp.nor.x = clamp(inor.x / 4, -7, 7);
      pp.nor.y = clamp(inor.y / 4, -7, 7);
      pp.nor.z = clamp(inor.z / 4, -7, 7);
      /*
      */
    } else {
      const norm2 = sqrt(static_cast{float}(dot_int(inor, inor)));
      const nor = to_vec3(inor) * (7.0f / norm2);
      pp.nor.x = clamp(si(round(nor.x)), -7, 7);
      pp.nor.y = clamp(si(round(nor.y)), -7, 7);
      pp.nor.z = clamp(si(round(nor.z)), -7, 7);
      /*
      {
	ivec3 n;
	n.x = clamp(inor.x / 4, -7, 7);
	n.y = clamp(inor.y / 4, -7, 7);
	n.z = clamp(inor.z / 4, -7, 7);
	debug_log("n,ppnor,nor", n, pp.nor, nor);
      }
      */
    }
    threaded function bool check_one(int x, int y, int z) {
      return abs(pp.nor.x) == x && abs(pp.nor.y) == y && abs(pp.nor.z) == z;
    }
    threaded function void dist_modify_one(int d, int x, int y, int z, int v) {
      if (p.dist != d) {
	return;
      }
      bool r;
      r |= check_one(x, y, z);
      r |= check_one(x, z, y);
      r |= check_one(y, x, z);
      r |= check_one(y, z, x);
      r |= check_one(z, x, y);
      r |= check_one(z, y, x);
      if (r) {
	pp.dist += (pp.dist < 0) ? -v : v;
      }
    }
    const nd = sqrt(static_cast{double}(dot_int(pp.nor, pp.nor)));
    if ((modifier & 8u) != 0) {
      pp.dist = clamp(si(round(rdiff * 2.0)), -21, 21);
    } else {
      pp.dist = clamp(si(round_bias(rdiff * nd / 2.0, 0.4)), -21, 21);
      // 微調整
      dist_modify_one(10, 1, 3, 3, 1);
      dist_modify_one(10, 4, 3, 3, -1);
      dist_modify_one(14, 3, 4, 6, -1);
    }
    const r = make_plane_node(pp, ivec3(), 1);
    /*
    debug_log("sphere_node", p, "offset", offset, offset_mul, "c", c,
      "rdiff", rdiff, "inor", inor, "pp", pp, "r", to_hexstring(r));
    */
    return r;
  }
  if (has_outside && (has_inside || pos3_inside_eq(c, -1, 1))) {
    sphere_param p1 = p;
    p1.center = c;
    // debug_log("msn sph", p, offset);
    return encode_sphere_node(p1);
  } else if (has_outside) {
    return make_space_voxel();
  } else {
    // debug_log("msn wall", p, offset);
    return 255u << 24u; // 壁
  }
}

threaded function {t, tv} bool pos3_inside_eq(t const p, tv mi, tv mx)
{
  return
    p.x >= mi && p.x <= mx &&
    p.y >= mi && p.y <= mx &&
    p.z >= mi && p.z <= mx;
}

public threaded function uint encode_sphere_node(sphere_param const& p)
{
  // debug_log("encode_sphere", p);
  int node_type = p.dist + 1;
  if (node_type < 1 || node_type > 159) {
    return 0u;
  }
  if (p.center.x < -31 || p.center.x > 31 ||
      p.center.y < -31 || p.center.y > 31 ||
      p.center.z < -31 || p.center.z > 31) {
    return 0u;
  }
  if (p.scale.x < 0 || p.scale.x > 3 ||
      p.scale.y < 0 || p.scale.y > 3 ||
      p.scale.z < 0 || p.scale.z > 3) {
    return 0u;
  }
  ivec3 rgb = map{ivec3, operator::mul}(p.scale, make_ivec3(64, 64, 64))
    + p.center + make_ivec3(32, 32, 32);
  uint r = ui(rgb.x);
  uint g = ui(rgb.y);
  uint b = ui(rgb.z);
  uint a = ui(node_type);
  const v = (a << 24u) | (b << 16u) | (g << 8u) | r;
  return v;
}

public threaded function sphere_param decode_sphere_node(uint v)
{
  sphere_param p;
  if (!is_sphere_node(v)) {
    return p;
  }
  int a = si(v >> 24u);
  int r = si(v & 0xffu);
  int g = si((v >> 8u) & 0xffu);
  int b = si((v >> 16u) & 0xffu);
  p.scale = make_ivec3(r >> 6, g >> 6, b >> 6);
  p.center = make_ivec3((r & 0x3f) - 32, (g & 0x3f) - 32, (b & 0x3f) - 32);
  p.dist = a - 1;
  // sp_scaleは座標aを(-0.5,0.5)から何倍に拡大するか
  //   rgbの上位2bit
  // sp_centerは球の中心座標でa*sp_scaleと比較
  //   rgbの下位6bitから32を引く
  // radiusは半径
  //   (node_type - 1)
  return p;
}

