public threaded namespace pgl3d::geometry::midpoint_displacement;
public import common -;
public import pgl3d::geometry::funcs -;
public import pgl3d::texture::texture -;

public threaded function void
midpoint_displacement(texture_data mutable& td, rand_generator mutable& rnd)
{
  uint const w_l2 = td.get_width_l2();
  uint const h_l2 = td.get_height_l2();
  uint const xmax = (1u << w_l2);
  uint const ymax = (1u << w_l2);
  uint const xmask = xmax - 1u;
  uint const ymask = ymax - 1u;
  uint wh = min(xmax, ymax);
  uint zshift = 0u;
  uint x = 0u;
  uint y = 0u;
  for (x = 0u; x < xmax; x += wh) {
    for (y = 0u; y < ymax; y += wh) {
      set(x, y, 0x20000000u);
    }
  }
  while (wh > 1u) {
    const wh2 = wh >> 1u;
    for (x = 0u; x < xmax; x += wh) {
      for (y = 0u; y < ymax; y += wh) {
	set_diagonal(x + wh2, y + wh2, wh2, zshift);
      }
    }
    for (x = 0u; x < xmax; x += wh) {
      for (y = 0u; y < ymax; y += wh) {
	set_adjacent(x + wh2, y, wh2, zshift);
	set_adjacent(x, y + wh2, wh2, zshift);
      }
    }
    zshift += 1u;
    wh >>= 1u;
  }
  threaded function uint avg_rnd(uint a, uint b, uint c, uint d, uint sft)
  {
    uint r = (a/4u + b/4u + c/4u + d/4u);
    uint rv = rnd.generate();
    r += rv >> sft;
    r -= 0x80000000u >> sft;
    // debug_log("avg_rnd", a, b, c, d, sft, rv, r);
    return r;
  }
  threaded function void set(uint x, uint y, uint v)
  {
    x &= xmask;
    y &= ymask;
    // debug_log("set", x, y, v);
    td.set(x, y, 0u, v);
  }
  threaded function uint get(uint x, uint y)
  {
    x &= xmask;
    y &= ymask;
    const r = td.get(x, y, 0u);
    // debug_log("get", x, y, r);
    // if (r == 0u) { throw 0u; }
    return r;
  }
  threaded function void set_diagonal(uint x, uint y, uint wh, uint sft)
  {
    // debug_log("set_diagonal", x, y, wh);
    const v00 = get(x - wh, y - wh);
    const v01 = get(x + wh, y - wh);
    const v10 = get(x - wh, y + wh);
    const v11 = get(x + wh, y + wh);
    const vc = avg_rnd(v00, v01, v10, v11, sft);
    set(x, y, vc);
  }
  threaded function void set_adjacent(uint x, uint y, uint wh, uint sft)
  {
    // debug_log("set_adjacent", x, y, wh);
    const v00 = get(x - wh, y);
    const v01 = get(x + wh, y);
    const v10 = get(x, y - wh);
    const v11 = get(x, y + wh);
    const vc = avg_rnd(v00, v01, v10, v11, sft);
    set(x, y, vc);
  }
}

