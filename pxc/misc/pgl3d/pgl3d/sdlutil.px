public threaded namespace pgl3d::sdlutil "use-unsafe";
public import common -;
private import pgl3d::glresource -;
private import pointer::raw -;

private struct {_} sdl_file()
{
  private nomove{rawptr{SDL_RWops}} ptr
    = nomove{rawptr{SDL_RWops}}(rawptr{SDL_RWops}());
  public function bool is_null() const {
    return ptr.value == rawptr{SDL_RWops}(); }
  public function rawptr{SDL_RWops} get() const { return ptr.value; }
  public function void reset(rawptr{SDL_RWops} p) {
    if (ptr.value != rawptr{SDL_RWops}()) {
      SDL_RWclose(ptr.value);
    }
    ptr.value = p;
  }
  private function ~ {
    reset(rawptr{SDL_RWops}());
  }
}

public function bool sdl_load_file(string const& fname,
  varray{uchar} mutable& buf_r)
{
  sdl_file{0} fp;
  string fn = fname;
  fn.push_back(0); /* nul-term */
  fp.reset(SDL_RWFromFile(fn.to_crawptr().to_ccharptr(), "r"));
  if (fp.is_null()) {
    return false;
  }
  Sint64 sz = SDL_RWsize(fp.get());
  if (sz < 0) {
    sz = 0;
  }
  size_t usz = static_cast{size_t}(sz);
  buf_r.clear();
  buf_r.resize(usz, 0);
  if (SDL_RWread(fp.get(), buf_r.to_rawptr().to_voidptr(), usz, 1) != usz) {
    return false;
  }
  return true;
}

