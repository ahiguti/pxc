public namespace pgl3d::collision_shape "export-unsafe";
public import common -;
public import pointer::raw -;
public import Bullet::base -;
public import Bullet::constants -;
public import Bullet::api +;
public import pointer::raw_unsafe -;
public import meta m;
public import meta::vararg va;

public threaded interface pgl3dCollisionShape_i {
  public function rawptr{btCollisionShape} get();
}

public threaded struct {t} pgl3dCollisionShape(expand(m::args{t}))
  <pgl3dCollisionShape_i>
{
  public t value = t(expand(a: m::arg_names{t}; a));
  public function rawptr{btCollisionShape} get() {
    return address(value);
  }
}

public threaded struct
pgl3dTriangleMeshShape(ptr{btTriangleMesh} const& mesh0)
  <pgl3dCollisionShape_i>
{
  public ptr{btTriangleMesh} mesh = mesh0;
  public btBvhTriangleMeshShape value = btBvhTriangleMeshShape(
    mesh.raw(), true, true);
  public function rawptr{btCollisionShape} get() {
    return address(value);
  }
}

public threaded struct pgl3dRigidBody(
  ptr{pgl3dCollisionShape_i} const& collisionShape0, btScalar mass0,
  btTransform const& tr0)
{
  public ptr{pgl3dCollisionShape_i} const collisionShape = collisionShape0;
  public btRigidBody rigidBody = makeRigidBody(collisionShape0->get(),
    tr0, mass0);
  public size_t offset = static_cast{size_t}(-1);
  init(mass0);
  function void init(float mass) {
    if (mass == 0.0f) {
      rigidBody.setCollisionFlags(rigidBody.getCollisionFlags() |
	CF_KINEMATIC_OBJECT);
      rigidBody.setActivationState(DISABLE_DEACTIVATION);
    }
  }
}

private threaded function btRigidBody makeRigidBody(
  rawptr{btCollisionShape} shape, btTransform const& tr0, btScalar mass)
{
  const isDynamic = (mass != 0.0f);
  mutable localInertia = btVector3_(0.0f, 0.0f, 0.0f);
  if (isDynamic) {
    shape->calculateLocalInertia(mass, localInertia);
  }
  mutable rbInfo = btRigidBody_btRigidBodyConstructionInfo(mass,
    rawptr{btDefaultMotionState}(), shape, localInertia);
  rbInfo.m_startWorldTransform = tr0;
  // rbInfo.m_friction = 0.0f;
  // rbInfo.m_rollingFriction = 0.0f;
  // rbInfo.m_restitution = 0.0f;
  const r = btRigidBody(rbInfo);
  return r;
}

