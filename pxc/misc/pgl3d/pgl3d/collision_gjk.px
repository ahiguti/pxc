public namespace pgl3d::collision_gjk "export-unsafe";
public import common -;
private import Bullet::base -;
private import Bullet::constants -;
private import Bullet::api +;
private import Bullet::all -;
public import pointer::raw -;
private import pointer::raw_unsafe -;
public import meta m;
public import meta::vararg va;
public import pgl3d::scene_node -;
public import numeric::fpmath -;
public import glm;

public threaded struct collision_gjk()
{
  private btVoronoiSimplexSolver simplex_solver;
  private btSphereShape sphere_shape = btSphereShape(1.0f);
  public function bool collide_convex_sphere(btConvexShape const& shape0,
    btTransform const& tr0, float radius1, btVector3 const& pos1)
  {
    simplex_solver.reset();
    sphere_shape.setUnscaledRadius(radius1);
    crawptr{btConvexShape} const s0 = caddress(shape0);
    crawptr{btConvexShape} const s1 = caddress(sphere_shape);
    mutable gjk = btGjkPairDetector(s0, s1,
      address(simplex_solver), rawptr{btConvexPenetrationDepthSolver}());
    mutable btDiscreteCollisionDetectorInterface_ClosestPointInput input;
    input.m_transformA = tr0;
    input.m_transformB.getBasis().setIdentity();
    input.m_transformB.setOrigin(pos1);
    btPointCollector result;
    const resultp = chk_rawptr_upcast{
      rawptr{btDiscreteCollisionDetectorInterface_Result}}(address(result));
    gjk.getClosestPoints(input, *resultp, rawptr{btIDebugDraw}(), false);
    return result.m_hasResult && result.m_distance <= 0.0f;
  }
  public function bool collide_convex_cupslex(btConvexShape const& shape0,
    btTransform const& tr0, float radius1, btVector3 const& pos1a,
    btVector3 const& pos1b)
  {
    simplex_solver.reset();
    mutable dir = op_sub{btVector3, btVector3, btVector3}(pos1b, pos1a);
    const len = dir.length();
    dir.normalize();
    btCapsuleShapeX capsulex_shape = btCapsuleShapeX(radius1, len);
    crawptr{btConvexShape} const s0 = caddress(shape0);
    crawptr{btConvexShape} const s1 = caddress(capsulex_shape);
    mutable gjk = btGjkPairDetector(s0, s1,
      address(simplex_solver), rawptr{btConvexPenetrationDepthSolver}());
    // FIXME
    return false;
  }
}

