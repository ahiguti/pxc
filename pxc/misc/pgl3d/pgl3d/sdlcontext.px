private namespace pgl3d::sdlcontext "export-unsafe";
public import common -;
public import meta m;
public import pointer::raw -;
public import io::environ -;
public import GL::compat -;
public import GL::glew -;
public import pgl3d::glresource -;
public import pgl3d::pglconfig -;

public struct sdlcontext(pgl3d_config const& config0)
{
  public pgl3d_config config = config0;
  public int init_w = 640;
  public int init_h = 128;
  public int enable_msaa = 0;
  public bool gles_flag = false;
  public int glmajor;
  public int glminor;
  public int vsync = 0;
  public scoped_nullable{SDL_DestroyWindow} sdl_window;
  private scoped_nullable{SDL_GL_DeleteContext} sdl_glcontext;
  public scoped_nullable{SDL_JoystickClose} joystick;
  public int joystick_num_axes;
  public int joystick_num_buttons;
  init();
  function void init()
  {
    enable_msaa = config.get("msaa", 0, 0, 1);
    set_high_dpi(config.get("highdpi", 1, 0, 1));
    SDL_Init(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK);
    TTF_Init();
    init_video();
    init_joystick();
  }
  function void init_video()
  {
    const num_modes = SDL_GetNumDisplayModes(0);
    for (int i: 0 .. num_modes) {
      SDL_DisplayMode mode;
      SDL_GetDisplayMode(0, i, address(mode));
      sdllog("displaymode", mode.w, mode.h);
    }
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);

    if (enable_msaa != 0) {
      SDL_GL_SetAttribute(SDL_GL_MULTISAMPLEBUFFERS, 1);
      SDL_GL_SetAttribute(SDL_GL_MULTISAMPLESAMPLES, 4);
      sdllog("enable_msaa");
    }
    mutable wflags = SDL_WINDOW_OPENGL;
    if (m::ne{is_windows, 0}) {
      wflags |= SDL_WINDOW_RESIZABLE;
    } else {
      wflags |= SDL_WINDOW_RESIZABLE;
    }
    if (config.get("highdpi", 1, 0, 1) != 0) {
      wflags |= SDL_WINDOW_ALLOW_HIGHDPI;
    }
    if (config.get("fullscreen", 0, 0, 2) == 1) {
      wflags |= SDL_WINDOW_FULLSCREEN_DESKTOP;
    }
    if (config.get("fullscreen", 0, 0, 2) == 2) {
      wflags |= SDL_WINDOW_FULLSCREEN;
    }
    vsync = config.get("vsync", 2, 0, 2);
    if (m::ne{is_gles, 0}) {
      wflags |= SDL_WINDOW_FULLSCREEN | SDL_WINDOW_BORDERLESS;
    }
    if (config.get("width", 0, 0, 16384) != 0) {
      init_w = config.get("width", 0, 0, 16384);
    }
    if (config.get("height", 0, 0, 16384) != 0) {
      init_h = config.get("height", 0, 0, 16384);
    }

    sdllog("create_window", init_w, init_h);
    sdl_window.reset(SDL_CreateWindow("PGL3D", 128, 128, init_w, init_h,
      wflags));
    const wnd = sdl_window.get();
    // FIXME: 3.3 -> 3.2 -> 2.1
    if (m::eq{is_gles, 0}) {
      /* try opengl 3.3 */
      SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
      SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 3);
      // SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);
      SDL_GL_SetAttribute(SDL_GL_ACCELERATED_VISUAL, 1);
      SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK,
	SDL_GL_CONTEXT_PROFILE_CORE);
      glmajor = 3;
      glminor = 3;
      // glminor = 2;
      gles_flag = false;
    } else {
      if (m::or{is_android, is_emscripten}) {
	/* android/emscripten: opengles 2.0 */
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
	glmajor = 2;
	glminor = 0;
      } else {
	/* ios: opengles 3.0 */
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
	glmajor = 3;
	glminor = 0;
      }
      gles_flag = true;
    }
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 32); // FIXME: 24?
    mutable glctx = SDL_GL_CreateContext(wnd);
    GL::glew::glewInit();
    string verstr = cubptr_to_string(glGetString_nocheck(GL_VERSION));
    if (verstr.empty()) {
      if (m::eq{is_gles, 0}) {
	/* fallback to opengl 2.1 */
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
	glctx = SDL_GL_CreateContext(wnd);
	glmajor = 2;
	glminor = 1;
      } else {
	/* fallback to opengles 2.0 */
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
	SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
	glctx = SDL_GL_CreateContext(wnd);
	glmajor = 2;
	glminor = 0;
      }
      verstr = cubptr_to_string(glGetString_nocheck(GL_VERSION));
    }
    sdl_glcontext.reset(glctx);
    SDL_GL_GetDrawableSize(wnd, address(init_w), address(init_h));
    sdllog("drawable size", init_w, init_h);
    sdllog("GL_VERSION", verstr);
    {
      string vn0;
      string vn1;
      string vn2;
      string_split{' '}(verstr, vn0, vn1, vn2);
      sdllog("vn", vn0, vn1, vn2);
      string_split{'.'}(vn0, glmajor, glminor);
      if (glmajor == 0) {
	string_split{'.'}(vn1, glmajor, glminor);
	if (glmajor == 0) {
	  string_split{'.'}(vn2, glmajor, glminor);
	}
      }
    }
    /*
    glGetIntegerv(GL_MAJOR_VERSION, address(glmajor));
    glGetIntegerv(GL_MINOR_VERSION, address(glminor));
    */
    sdllog("opengl", glmajor, glminor);
    /*
    sdllog("GL_EXTENSIONS", cubptr_to_string(glGetString(GL_EXTENSIONS)));
    */
    /*
    int num_ext;
    glGetIntegerv(GL_NUM_EXTENSIONS, address(num_ext));
    for (int i: 0 .. num_ext) {
      sdllog("GL_EXTENSION", cubptr_to_string(glGetStringi(GL_EXTENSIONS,
	static_cast{uint}(i))));
    }
    */
  }
  function void init_joystick()
  {
    for (const i: 0 .. SDL_NumJoysticks()) {
      const j = SDL_JoystickOpen(i);
      sdllog("joystick", i, ccharptr_to_string(SDL_JoystickName(j)));
      if (i == 0) {
	joystick.reset(j);
	joystick_num_axes = SDL_JoystickNumAxes(j);
	joystick_num_buttons = SDL_JoystickNumButtons(j);
	sdllog("axes", joystick_num_axes);
	sdllog("buttons", joystick_num_buttons);
      } else {
	SDL_JoystickClose(j);
      }
    }
  }
}

private function extern "pgl3d$n::set_high_dpi" void set_high_dpi(int value);

extern "types" inline
#ifdef _MSC_VER
#include <ShellScalingAPI.h>
#endif
;

extern "functions" inline
namespace pgl3d$n {
static inline void set_high_dpi(int value)
{
#ifdef _MSC_VER
  SetProcessDpiAwareness((PROCESS_DPI_AWARENESS)value);
#endif
}
};
;

