private threaded namespace pgl3d::opengl::framebuffer "export-unsafe";
public import common -;
public import pointer::raw -;
public import pointer::raw_unsafe -;
public import numeric::fpmath -;
public import glm;
public import glm::raw;
public import io::time -;
public import exception -;
public import meta m;
public import pointer::tfuncptr -;
public import GL::compat -;
public import pgl3d::opengl::glresource -;
public import pgl3d::opengl::glshader -;
public import pgl3d::geometry::funcs -;
public import pgl3d::opengl::glbuffer -;
public import pgl3d::opengl::shader_config -;
public import pgl3d::opengl::aggregated_ibuffer -;
public import pgl3d::opengl::resource_pool -;
public import pgl3d::engine::pglbase -;
public import pgl3d::engine::intern_pool -;
public import pgl3d::sdl::sdlutil -;

public threaded struct gl_framebuffer
{
  public auto_framebuffer fbo;
  public auto_renderbuffer depthbuf;
  public auto_texture texture0;
  public auto_texture texture1;
  public int width;
  public int height;
}

public function void
gl_tex_image_depth(shader_config const& glc, int width, int height)
{
  GLenum t_internal_format = GL_DEPTH_COMPONENT;
  GLenum t_format = GL_DEPTH_COMPONENT;
  GLenum t_type = GL_UNSIGNED_BYTE;
  if (!glc.is_gles) {
    sdl_log("depth_texture byte", width, height);
  } else {
    if (glc.is_gl3_or_gles3()) {
      sdl_log("depth_texture int");
      t_internal_format = GL_DEPTH_COMPONENT16;
      t_format = GL_DEPTH_COMPONENT;
      t_type = GL_UNSIGNED_INT;
    } else {
      sdl_log("depth_texture short");
      t_internal_format = GL_DEPTH_COMPONENT;
      t_format = GL_DEPTH_COMPONENT;
      t_type = GL_UNSIGNED_SHORT;
    }
  }
  glTexImage2D(GL_TEXTURE_2D, 0, cast_int(t_internal_format),
    width, height, 0, t_format, t_type,
    offset_to_void_cp(0));
  sdl_log("depth_texture done");
}

public function void init_shadowmap_fbo(shader_config const& glc,
  gl_framebuffer mutable& sfbo)
{
  if (glc.enable_shadowmapping) {
    sdl_log("shadowmap size", sfbo.width, sfbo.height);
    int saved_fb;
    glGetIntegerv(GL_FRAMEBUFFER_BINDING, address(saved_fb));
    /* texture */
    // glActiveTexture(GL_TEXTURE3 + i);
    glActiveTexture(GL_TEXTURE0);
    sfbo.texture0.generate();
    glBindTexture(GL_TEXTURE_2D, sfbo.texture0.get());
    if (glc.enable_vsm) {
      if (m::is_true{is_gl3_or_gles3}) {
	// GLenum t_internal_format = GL_RG16F; // FIXME? RG32F?
	GLenum t_internal_format = GL_RG32F;
	if (m::is_true{is_gles}) {
	  t_internal_format = GL_RG16F; // iOS
	}
	GLenum t_format = GL_RG;
	GLenum t_type = GL_FLOAT;
	glTexImage2D(GL_TEXTURE_2D, 0, cast_int(t_internal_format),
	  sfbo.width, sfbo.height, 0, t_format, t_type,
	  offset_to_void_cp(0));
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
	  cast_int(GL_LINEAR));
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,
	  cast_int(GL_LINEAR));
      }
    } else if (glc.enable_depth_texture) {
      sdl_log("depth_texture");
      const f = glc.enable_sampler2dshadow ? GL_LINEAR : GL_NEAREST;
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, cast_int(f));
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, cast_int(f));
      if (m::is_true{is_gl3_or_gles3}) {
	if (glc.enable_sampler2dshadow) {
	  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_MODE,
	    cast_int(GL_COMPARE_REF_TO_TEXTURE));
	  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_COMPARE_FUNC,
	    cast_int(GL_LEQUAL));
	}
      }
      gl_tex_image_depth(glc, sfbo.width, sfbo.height);
      /*
      GLenum t_internal_format = GL_DEPTH_COMPONENT;
      GLenum t_format = GL_DEPTH_COMPONENT;
      GLenum t_type = GL_UNSIGNED_BYTE;
      if (!glc.is_gles) {
	sdl_log("depth_texture byte", sfbo.width, sfbo.height);
      } else {
	if (glc.is_gl3_or_gles3()) {
	  sdl_log("depth_texture int");
	  t_internal_format = GL_DEPTH_COMPONENT16;
	  t_format = GL_DEPTH_COMPONENT;
	  t_type = GL_UNSIGNED_INT;
	} else {
	  sdl_log("depth_texture short");
	  t_internal_format = GL_DEPTH_COMPONENT;
	  t_format = GL_DEPTH_COMPONENT;
	  t_type = GL_UNSIGNED_SHORT;
	}
      }
      glTexImage2D(GL_TEXTURE_2D, 0, cast_int(t_internal_format),
	sfbo.width, sfbo.height, 0, t_format, t_type,
	offset_to_void_cp(0));
      sdl_log("depth_texture done");
      */
    } else {
      sdl_log("no depth_texture");
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,
	cast_int(GL_NEAREST));
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
	cast_int(GL_NEAREST));
      sdl_log("no depth_texture rbga byte");
      glTexImage2D(GL_TEXTURE_2D, 0, cast_int(GL_RGBA), sfbo.width,
	sfbo.height, 0, GL_RGBA, GL_UNSIGNED_BYTE,
	offset_to_void_cp(0));
    }
    if (m::eq{is_gles, 0})
    {
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,
	cast_int(GL_CLAMP_TO_EDGE));
      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,
	cast_int(GL_CLAMP_TO_EDGE));
      const border = make_farray{float}(1.0, 1.0, 1.0, 1.0);
      glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR,
	border.crange().to_crawptr());
      /*
      */
    }
    /* framebuffer */
    sfbo.fbo.generate();
    glBindFramebuffer(GL_FRAMEBUFFER, sfbo.fbo.get());
    if (glc.enable_depth_texture) {
      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT,
	GL_TEXTURE_2D, sfbo.texture0.get(), 0);
    } else {
      glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
	GL_TEXTURE_2D, sfbo.texture0.get(), 0);
    }
    /* renderbuffer */
    if (glc.enable_depth_texture) {
      if (m::eq{is_gles, 0}) {
	glDrawBuffer(GL_NONE);
	glReadBuffer(GL_NONE);
      }
    } else {
      int orig_rb;
      glGetIntegerv(GL_RENDERBUFFER_BINDING, address(orig_rb));
      /*
      sdl_log("orig_rb", orig_rb);
      */
      sfbo.depthbuf.generate();
      glBindRenderbuffer(GL_RENDERBUFFER, sfbo.depthbuf.get());
      glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16,
	sfbo.width, sfbo.height);
      glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT,
	GL_RENDERBUFFER, sfbo.depthbuf.get());
      glBindRenderbuffer(GL_RENDERBUFFER, static_cast{uint}(orig_rb));
    }
    const e = glCheckFramebufferStatus(GL_FRAMEBUFFER);
    if (e != GL_FRAMEBUFFER_COMPLETE) {
      sdl_log("incomplete framebuffer", cast_int(e));
    } else {
      sdl_log("complete framebuffer");
    }
    glBindFramebuffer(GL_FRAMEBUFFER, static_cast{uint}(saved_fb));
  }
}

public function void init_postprocess_fbo(shader_config const& glc,
  bool save_depth_texture, gl_framebuffer mutable& ppfbo)
{
  if (!glc.enable_postprocess) {
    return;
  }
  sdl_log("pp size", ppfbo.width, ppfbo.height);
  int saved_fb;
  glGetIntegerv(GL_FRAMEBUFFER_BINDING, address(saved_fb));
  ppfbo.fbo.generate();
  glBindFramebuffer(GL_FRAMEBUFFER, ppfbo.fbo.get());
  /* texture */
  glActiveTexture(GL_TEXTURE0);
  ppfbo.texture0.generate();
  glBindTexture(GL_TEXTURE_2D, ppfbo.texture0.get());
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,
    cast_int(GL_NEAREST)); // TODO: parameter
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
    cast_int(GL_NEAREST)); // TODO: parameter
  sdl_log("no depth_texture rbga byte");
  glTexImage2D(GL_TEXTURE_2D, 0, cast_int(GL_RGBA), ppfbo.width,
    ppfbo.height, 0, GL_RGBA, GL_UNSIGNED_BYTE,
    offset_to_void_cp(0));
  // if (m::eq{is_gles, 0})
  {
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,
      cast_int(GL_CLAMP_TO_EDGE));
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,
      cast_int(GL_CLAMP_TO_EDGE));
    /*
    const border = make_farray{float}(0.0, 0.0, 0.0, 0.0);
    glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR,
      border.crange().to_crawptr());
    */
  }
  glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,
    GL_TEXTURE_2D, ppfbo.texture0.get(), 0);
  if (save_depth_texture) {
    ppfbo.texture1.generate();
    glBindTexture(GL_TEXTURE_2D, ppfbo.texture1.get());
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,
      cast_int(GL_NEAREST));
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
      cast_int(GL_NEAREST));
    gl_tex_image_depth(glc, ppfbo.width, ppfbo.height);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT,
      GL_TEXTURE_2D, ppfbo.texture1.get(), 0);
  } else {
    /* renderbuffer */
    int orig_rb;
    glGetIntegerv(GL_RENDERBUFFER_BINDING, address(orig_rb));
    /*
    sdl_log("orig_rb", orig_rb);
    */
    ppfbo.depthbuf.generate();
    glBindRenderbuffer(GL_RENDERBUFFER, ppfbo.depthbuf.get());
    // if (m::and{m::is_true{is_gl3_or_gles3}, m::not{is_gles}}) {
    if (m::is_true{is_gl3_or_gles3}) {
      glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT24,
	ppfbo.width, ppfbo.height);
    } else {
      glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH_COMPONENT16,
	ppfbo.width, ppfbo.height);
    }
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT,
      GL_RENDERBUFFER, ppfbo.depthbuf.get());
    glBindRenderbuffer(GL_RENDERBUFFER, static_cast{uint}(orig_rb));
  }
  const e = glCheckFramebufferStatus(GL_FRAMEBUFFER);
  if (e != GL_FRAMEBUFFER_COMPLETE) {
    sdl_log("incomplete framebuffer", cast_int(e));
  } else {
    sdl_log("complete framebuffer");
  }
  glBindFramebuffer(GL_FRAMEBUFFER, static_cast{uint}(saved_fb));
}

