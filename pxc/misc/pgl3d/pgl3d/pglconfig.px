public threaded namespace pgl3d::pglconfig "use-unsafe";
public import common -;
public import pointer::raw -;
public import numeric::fpmath -;
public import glm;
public import io::time -;
public import exception -;
public import meta m;
public import text::string::positional -;
private import GL::compat -;
private import pgl3d::glresource -;
private import pointer::raw_unsafe -;

public metafunction string_map tree_map{string, string};

/*
public function string sdl_read_file(string mutable& fn)
{
  string r;
  scoped_nullable{SDL_RWclose} rwop;
  rwop.reset(SDL_RWFromFile(fn.c_str(), "rb"));
  if (rwop.get() == rawptr{SDL_RWops}()) {
    throw runtime_error_template{"sdl_read_file"}(fn);
  }
  farray{uchar, 16384} buf;
  while (true) {
    const n = SDL_RWread(rwop, buf.range().to_rawptr().to_voidptr(), 1, 16384);
    if (n == 0) {
      break;
    }
    r.append(buf[0 .. n]);
  }
  return r;
}
*/

public valuetype struct pgl3d_config(cstrref const& confstr)
{
  private string_map m;
  public function {t} t get(string const& key, t const& default_value) const
  {
    if (const& v: m[key]) {
      return from_string{t}(v);
    } else {
      return default_value;
    }
  }
  init(confstr);
  function void init(cstrref const& confstr)
  {
    // println(cnf);
    threaded function void ln(cstrref const& line)
    {
      const a = make_farray_split{2}(line, '=');
      if (!a[0].empty()) {
	m[a[0]] = a[1];
      }
    }
    split_foreach{ln}(confstr, '\n');
    debug_log("map=", m);
  }
}

