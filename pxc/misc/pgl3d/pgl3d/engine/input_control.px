public namespace pgl3d::engine::input_control "use-unsafe"; // FIXME?
public import common -;
public import exception -;
public import numeric::fpmath -;
public import meta m;
public import glm;
public import pgl3d::engine::application -;
public import pgl3d::engine::mainloop -;
public import pgl3d::engine::util -;
public import pgl3d::engine::platform -;
public import pgl3d::engine::device_motion -;
public import pgl3d::geometry::funcs -;
public import pgl3d::drawer::drawer -;

public struct
input_control(io const& iop)
{
  public device_motion dmotion = device_motion(iop, 1.0 / 60.0);
  public varray{SDL_FingerID} fingerids;
  public farray{bool, 2} fingdown;
  public farray{size_t, 2} fingerdown_time;
  public farray{glm::vec2, 2} start_pos;
  public farray{glm::vec2, 2} cur_pos;
  public farray{float, 2} pos_distance_max;
  public glm::vec2 finger_xyrotate_delta;
  public float finger_zmove_delta;
  public int finger_zmove_mode = 0;
  public short joy_deadzone = 6000;
  public function void finger_motion(float x, float y, float dx, float dy,
    SDL_FingerID fng)
  {
    size_t fid = 2;
    if (fingerids.size() > 0 && fingerids[0] == fng) {
      fid = 0;
    } else if (fingerids.size() > 1 && fingerids[1] == fng) {
      fid = 1;
    }
    if (fid < 2) {
      cur_pos[fid] = glm::make_vec2(x, y);
      pos_distance_max[fid] = max(glm::distance(cur_pos[fid], start_pos[fid]),
	pos_distance_max[fid]);
      // sdl_log("finger_motion", pos_distance_max);
      // sdl_log("finger_motion", x, y, fid, fng);
    } else {
      // sdl_log("finger_motion(ignored)", x, y, fng, "fingerids:", fingerids);
    }
  }
  public function void finger_down(float x, float y, SDL_FingerID fng) {
    size_t fid = 2;
    if (fingerids.size() > 0 && fingerids[0] == fng) {
      fid = 0;
    } else if (fingerids.size() > 1 && fingerids[1] == fng) {
      fid = 1;
    } else if (fingerids.size() < 2) {
      fid = fingerids.size();
      fingerids.push_back(fng);
    }
    if (fid < 2) {
      fingdown[fid] = true;
      start_pos[fid] = glm::make_vec2(x, y);
      cur_pos[fid] = start_pos[fid];
      pos_distance_max[fid] = 0.0f;
      // sdl_log("finger_down", x, y, fid);
      fingerdown_time[0] = 0;
      fingerdown_time[1] = 0;
      finger_zmove_mode = 0;
    }
    // sdl_log("finger_down_post", fingerids);
  }
  public function int finger_up(SDL_FingerID fng) {
    int tap_finger = -1;
    size_t fid = 2;
    if (fingerids.size() > 0 && fingerids[0] == fng) {
      fid = 0;
    } else if (fingerids.size() > 1 && fingerids[1] == fng) {
      fid = 1;
    }
    if (fid < 2) {
      if (pos_distance_max[fid] < 0.01f && fingdown[fid]) {
	tap_finger = static_cast{int}(fid);
	// sdl_log("finger_up tap", fid);
      }
      fingdown[fid] = false;
      // sdl_log("finger_up", fid, pos_distance_max[fid]);
      if (fid == 1) {
	start_pos[0] = cur_pos[0];
	fingerids.resize(1, 0);
	fingdown[1] = false;
      } else {
	fingerids.erase(0, 1);
	if (fingerids.empty()) {
	  fingdown[0] = false;
	} else {
	  cur_pos[0] = cur_pos[1];
	  start_pos[0] = cur_pos[1];
	  fingdown[0] = fingdown[1];
	  fingdown[1] = false;
	}
      }
      fingerdown_time[0] = 0;
      fingerdown_time[1] = 0;
      finger_zmove_mode = 0;
    }
    // sdl_log("finger_up_post", fingerids);
    return tap_finger;
  }
  public function void finger_action_one_finger(glm::quat mutable& rot,
      float frame_speed, size_t fid)
  {
    mutable dx = (cur_pos[fid].x - start_pos[fid].x);
    mutable dy = (cur_pos[fid].y - start_pos[fid].y);
    const d = glm::distance(start_pos[fid], cur_pos[fid]);
    if (d > 3.0) {
      dx /= d / 3.0;
      dy /= d / 3.0;
    }
    // sdl_log("onefinger", dx, dy);
    rot *= glm::make_quat_angle_axis(to_radians(dy * 5.0 * frame_speed),
	1.0, 0.0, 0.0);
    rot *= glm::make_quat_angle_axis(to_radians(dx * 5.0 * frame_speed),
	0.0, 1.0, 0.0);
    finger_xyrotate_delta.x = dx;
    finger_xyrotate_delta.y = dy;
  }
  public function void finger_action_two_fingers(glm::quat const& angle,
      glm::vec3 mutable& pos, float frame_speed)
  {
    const d0 = cur_pos[0] - start_pos[0];
    const d1 = cur_pos[1] - start_pos[1];
    if (glm::dot(d0, d1) < 0.0f) {
      /* z move */
      if (finger_zmove_mode != 2) {
	const distance_start = glm::distance(start_pos[0], start_pos[1]);
	mutable distance_cur = glm::distance(cur_pos[0], cur_pos[1]);
	if (distance_cur <= 0.0001f) {
	  distance_cur = 0.0001f;
	}
	const rat = distance_start / distance_cur;
	const prev = finger_zmove_delta;
	if (rat > 1.2) {
	  finger_zmove_delta += 0.001f * frame_speed;
	  if (finger_zmove_delta >= 1.0) {
	    finger_zmove_delta = 1.0;
	  }
	  finger_zmove_mode = 1;
	} else if (rat < 0.8) {
	  finger_zmove_delta -= 0.001f * frame_speed;
	  if (finger_zmove_delta <= -1.0) {
	    finger_zmove_delta = -1.0;
	  }
	  finger_zmove_mode = 1;
	}
	if ((prev < 0.0f && finger_zmove_delta > 0.0f) ||
	  (prev > 0.0f && finger_zmove_delta < 0.0f)) {
	  /* stop */
	  finger_zmove_delta = 0.0f;
	  finger_zmove_mode = 2;
	}
      }
    } else {
      /* xy move */
      const d0 = cur_pos[0] - start_pos[0];
      const d1 = cur_pos[1] - start_pos[1];
      mutable avg = (d0 + d1) / 2.0f;
      const d = (glm::distance(start_pos[0], cur_pos[0]),
	glm::distance(start_pos[1], cur_pos[0])) / 2.0f;
      if (d > 3.0) {
	avg /= d / 3.0;
      }
      avg /= 32.0f;
      pos += angle * (glm::make_vec3(avg.x, -avg.y, 0.0) * frame_speed);
    }
  }
  public function void action_step(input_control_target mutable& pl,
      glm::vec3 mutable& pos_delta, float frame_speed)
  {
    dmotion.update();
    glm::quat mutable device_rot;
    device_rot.x = dmotion.value_xyzw[0U];
    device_rot.y = dmotion.value_xyzw[1U];
    device_rot.z = dmotion.value_xyzw[2U];
    device_rot.w = dmotion.value_xyzw[3U];
    pl.angle *= pl.device_rot_prev.conjugate();
    pl.angle *= device_rot;
    pl.angle = pl.angle.normalize();
    pl.device_rot_prev = device_rot;
    // sdl_log("action_step", fingdown[0], fingdown[1]);
    if (fingdown[0] && !fingdown[1]) {
      if (fingerdown_time[0] >= 2) {
	finger_action_one_finger(pl.angle, frame_speed, 0);
      } else {
	start_pos[0] = (start_pos[0] + cur_pos[0]) / 2.0f;
	fingerdown_time[0] += 1;
      }
      if (fingerids[0] == 0) {
	// mouse button
	/*
	finger_zmove_delta -= 0.0001;
	if (finger_zmove_delta <= -0.01) {
	  finger_zmove_delta = -0.01;
	}
	*/
      }
    } else if (!fingdown[0] && fingdown[1]) {
      if (fingerdown_time[1] >= 2) {
	finger_action_one_finger(pl.angle, frame_speed, 0);
      } else {
	start_pos[1] = (start_pos[1] + cur_pos[1]) / 2.0f;
	fingerdown_time[1] += 1;
      }
    } else if (fingdown[0] && fingdown[1]) {
      if (fingerdown_time[0] >= 2 && fingerdown_time[1] >= 2) {
	finger_action_two_fingers(pl.angle, pl.position,
	    frame_speed);
      } else {
	start_pos[0] = (start_pos[0] + cur_pos[0]) / 2.0f;
	fingerdown_time[0] += 1;
	start_pos[1] = (start_pos[1] + cur_pos[1]) / 2.0f;
	fingerdown_time[1] += 1;
      }
    } else {
      const len = glm::length(finger_xyrotate_delta);
      pl.angle *= glm::make_quat_angle_axis(
	  to_radians(-finger_xyrotate_delta.y * 2.0 * frame_speed),
	  1.0, 0.0, 0.0);
      pl.angle *= glm::make_quat_angle_axis(
	  to_radians(-finger_xyrotate_delta.x * 2.0 * frame_speed),
	  0.0, 1.0, 0.0);
      const decay = 0.03f * frame_speed;
      if (len < decay) {
	finger_xyrotate_delta = glm::make_vec2(0.0f, 0.0f);
      } else {
	finger_xyrotate_delta -= finger_xyrotate_delta * decay / len;
      }
    }
    /*
    if (pl.accel) {
      pl.accel_ratio = min(
	  pl.accel_ratio + 0.003f * frame_speed, 1.0f);
    } else {
      pl.accel_ratio = max(
	  pl.accel_ratio - 0.003f * frame_speed, 0.01f);
    }
    */
    pl.pos_delta = pl.angle.to_mat3()
	* glm::make_vec3(0.0, 0.0, finger_zmove_delta /* * pl.accel_ratio */);
    pl.position += pl.pos_delta * frame_speed;
    /*
    target.translate_relative(glm::make_vec3(0.0, 0.0, finger_zmove_delta)
	* frame_speed);
    */
  }
  public function void add_zdelta(float zaccel, float frame_speed)
  {
    finger_zmove_delta += zaccel * frame_speed;
    if (finger_zmove_delta <= -1.0) {
      finger_zmove_delta = -1.0;
    }
    if (finger_zmove_delta >= 1.0) {
      finger_zmove_delta = 1.0;
    }
    // sdl_log("zdelta", finger_zmove_delta);
    // finger_zmove_mode = 1;
  }
  public function uint get_key(cslice{Uint8} const& keys, SDL_Scancode k)
  {
    const i = static_cast{size_t}(k);
    return i < keys.size() ? keys[i] : 0U;
  }
  public function int get_button(cslice{bool} const& buttons, size_t i)
  {
    const r = i < buttons.size() ? buttons[i] : false;
    return r ? 1 : 0;
  }
  public function float get_axis_linear(cslice{short} const& axes, size_t i)
  {
    if (axes.size() <= i) {
      return 0.0f;
    }
    int v = axes[i];
    return static_cast{float}(v + 32768) / 65535.0f;
  }
  public function float get_axis(cslice{short} const& axes, size_t i)
  {
    if (axes.size() <= i) {
      return 0.0f;
    }
    const v = axes[i];
    if (v >= -joy_deadzone && v <= joy_deadzone) {
      return 0.0f;
    }
    if (v < 0) {
      return static_cast{float}(v + joy_deadzone)
	/ static_cast{float}(32768 - joy_deadzone);
    } else {
      return static_cast{float}(v - joy_deadzone)
	/ static_cast{float}(32767 - joy_deadzone);
    }
  }
}

public tsvaluetype struct
input_control_target()
{
  public glm::quat device_rot_prev;
  public glm::quat angle;
  public glm::vec3 position;
  public glm::vec3 pos_delta;
  public bool accel;
  public float accel_ration = 0.1f;
}

public function void input_control_handle_event(input_control mutable& ictl,
  SDL_Event const& ev, float frame_speed, projection_info const& pjinfo,
  tree_map{string, string} mutable& commands_r
  /* FIXME: use callback instead */)
{
  const etype = ev.type;
  if (etype == SDL_MOUSEBUTTONDOWN) {
    const bx = cast_float(ev.button.x) / cast_float(pjinfo.screen_width);
    const by = cast_float(ev.button.y) / cast_float(pjinfo.screen_height);
    // sdl_log("mousedown", ev.button.x, ev.button.y, ev.button.button);
    ictl.finger_down(
      cast_float(ev.button.x) / cast_float(pjinfo.screen_width),
      cast_float(ev.button.y) / cast_float(pjinfo.screen_height),
      0);
  } else if (etype == SDL_MOUSEBUTTONUP) {
  } else if (etype == SDL_MOUSEMOTION) {
  } else if (etype == SDL_FINGERDOWN) {
    ictl.finger_down(ev.tfinger.x, ev.tfinger.y, ev.tfinger.fingerId);
  } else if (etype == SDL_FINGERUP) {
    int tap_finger = ictl.finger_up(ev.tfinger.fingerId);
    if (tap_finger == 0) {
      commands_r["throw"] = "1"; // FIXME
    }
  } else if (etype == SDL_FINGERMOTION) {
    if (m::or{is_android, is_ios}) {
      ictl.finger_motion(ev.tfinger.x, ev.tfinger.y,
	  ev.tfinger.dx, ev.tfinger.dy, ev.tfinger.fingerId);
    }
  }
}

public function void input_control_handle_keys(input_control mutable& ictl,
  input_control_target mutable& target, cslice{Uint8} const& keys,
  cslice{short} const& axes, cslice{bool} const& buttons,
  float frame_speed, projection_info const& pjinfo,
  tree_map{string, string} mutable& commands_r)
{
  function uint get_key(SDL_Scancode k) {
    return keys[static_cast{uint}(k)];
  }
  function int get_button(size_t i) {
    const r = i < buttons.size() ? buttons[i] : false;
    return r ? 1 : 0;
  }
  function float get_axis_linear(size_t i) {
    if (axes.size() <= i) {
      return 0.0f;
    }
    int v = axes[i];
    return static_cast{float}(v + 32768) / 65535.0f;
  }
  function float get_axis(size_t i) {
    if (axes.size() <= i) {
      return 0.0f;
    }
    const v = axes[i];
    const joy_deadzone = ictl.joy_deadzone;
    if (v >= -joy_deadzone && v <= joy_deadzone) {
      return 0.0f;
    }
    if (v < 0) {
      return static_cast{float}(v + joy_deadzone)
	/ static_cast{float}(32768 - joy_deadzone);
    } else {
      return static_cast{float}(v - joy_deadzone)
	/ static_cast{float}(32767 - joy_deadzone);
    }
  }
  float angle_x = to_radians(-get_axis(1) * frame_speed);
  float angle_y = to_radians(-get_axis(0) * frame_speed);
  float angle_z = 0.0f;
  if (get_key(SDL_SCANCODE_UP) != 0 || get_button(0) != 0) {
    angle_x += to_radians(1.0f * frame_speed);
  }
  if (get_key(SDL_SCANCODE_DOWN) != 0 || get_button(1) != 0) {
    angle_x -= to_radians(1.0f * frame_speed);
  }
  if (get_key(SDL_SCANCODE_LEFT) != 0 || get_button(2) != 0) {
    angle_y += to_radians(1.0f * frame_speed);
  }
  if (get_key(SDL_SCANCODE_RIGHT) != 0 || get_button(3) != 0) {
    angle_y -= to_radians(1.0f * frame_speed);
  }
  if (get_key(SDL_SCANCODE_Z) != 0 || get_button(9) != 0) {
    angle_z += to_radians(1.0f * frame_speed);
  }
  if (get_key(SDL_SCANCODE_X) != 0 || get_button(8) != 0) {
    angle_z -= to_radians(1.0f * frame_speed);
  }
  target.angle *= glm::make_quat_angle_axis(angle_x, 1.0, 0.0, 0.0);
  target.angle *= glm::make_quat_angle_axis(angle_y, 0.0, 1.0, 0.0);
  target.angle *= glm::make_quat_angle_axis(angle_z, 0.0, 0.0, 1.0);
  float zdelta = 0.0f;
  zdelta += (get_axis_linear(4) - get_axis_linear(5)) * 0.002f;
  if (get_key(SDL_SCANCODE_SPACE) != 0) {
    zdelta -= 0.001f;
  }
  if (get_key(SDL_SCANCODE_LSHIFT) != 0) {
    zdelta += 0.001f;
  }
  // sdl_log("zdelta", zdelta);
  ictl.add_zdelta(zdelta, frame_speed);
  glm::vec3 pos_delta;
  /*
  pos_delta.x += get_axis(2) * 0.1f;
  pos_delta.y -= get_axis(3) * 0.1f;
  */
  if (get_key(SDL_SCANCODE_A) != 0) {
    pos_delta.x -= 0.001f;
  }
  if (get_key(SDL_SCANCODE_D) != 0) {
    pos_delta.x += 0.001f;
  }
  if (get_key(SDL_SCANCODE_S) != 0) {
    pos_delta.y -= 0.001f;
  }
  if (get_key(SDL_SCANCODE_W) != 0) {
    pos_delta.y += 0.001f;
  }
  target.position += target.angle * pos_delta * frame_speed;
  if (get_key(SDL_SCANCODE_RETURN) != 0 || get_button(6) != 0) {
    if (ictl.finger_zmove_delta > 0.01f * frame_speed) {
      ictl.finger_zmove_delta -= 0.01f * frame_speed;
    } else if (ictl.finger_zmove_delta < -0.01f * frame_speed) {
      ictl.finger_zmove_delta += 0.01f * frame_speed;
    } else {
      ictl.finger_zmove_delta = 0.0;
    }
    ictl.finger_zmove_mode = 1;
  }
}

