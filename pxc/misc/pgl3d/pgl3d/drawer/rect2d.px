private threaded namespace pgl3d::drawer::rect2d "export-unsafe";
public import common -;
public import pgl3d::drawer::base -;
public import meta m;

private tsvaluetype struct rect2d_vertex_attributes()
{
  public glm::vec2 vert;
}

private tsvaluetype struct rect2d_instance_attributes()
{
  public glm::vec4 idata; // x0, y0, dx, dy
}

private tsvaluetype struct rect2d_uniforms()
{
}

public struct drawer_rect2d(shader_config const& glc,
  resource_pool_ptr const& res)
<pgldrawer_i>
{
  metafunction tattr rect2d_vertex_attributes;
  rect2d_shader_ptr sdr_re = init_rect2d_shader(glc);
  public function string get_vbid_name() const { return "vbid_rect2d"; }
  public function string get_instances_vbid_name() const {
    return "vbid_rect2d"; }
  public function string get_vertices_vbid_name() const {
    return "vbid_rect2d"; }
  public function prepare_instance_data_funcptr
  get_prepare_instance_data_funcptr() const {
    return make_tfuncptr{prepare_instance_data_rect2d}();
  }
  public function ptr{vertex_buffer} make_vertex_buffer() const {
    return make_tattr_vertex_buffer{tattr}(false, false);
  }
  public function string builtin_vertex_set_name() const { return "rect2d"; }
  public function void make_builtin_vertex_sets(ptr{vertices} const& vptr)
    const
  {
    farray{rect2d_vertex_attributes, 4} vs;
    vs[0].vert = glm::make_vec2(0.0, 0.0);
    vs[1].vert = glm::make_vec2(1.0, 0.0);
    vs[2].vert = glm::make_vec2(1.0, 1.0);
    vs[3].vert = glm::make_vec2(0.0, 1.0);
    vptr->push_polygon_distinct{rect2d_vertex_attributes, 0}(vs);
  }
  public function dgf_filler make_filler(ptr{vertices} const& vptr) const
  {
    return make_dgf_noop(vptr);
  }
  public function texture_info get_texture_info(cstrref const& name) const
  {
    return texture_info();
  }
  public function void resize_screen(shader_config const& glc, int width,
    int height)
  { 
  }
  public function void reload_shaders()
  {
  }
  public function uint get_postprocess_framebuffer(draw_step step) const
  {
    return 0U;
  }
  public function bool has_step(draw_step step) const
  {
    return step == draw_step_blend;
  }
  public function void draw(draw_step step, size_t iter,
    vertex_buffer const& bo, bo_instances_type const& bo_ib,
    aggregated_ibuffer const& aibuf, vbid_t vbid,
    shader_config const& glc, projection_info const& cam_df,
    cslice{GLuint} const& smtex_arr)
  {
    if (step == draw_step_blend) {
      glDisable(GL_DEPTH_TEST);
      glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
      mutable& sdr = *sdr_re;
      glUseProgram(sdr.program);
      aibuf.draw(sdr, bo, bo_ib, vbid, glc.enable_instanced,
	glc.enable_uniform_instancing);
    }
  }
  public function option{ptr{edit_mode_i}} get_edit_mode() const
  {
    return option{ptr{edit_mode_i}}();
  }
}

metafunction rect2d_shader_ptr
  ptr{glshader{
    rect2d_uniforms, rect2d_instance_attributes, rect2d_vertex_attributes}};

function rect2d_shader_ptr
init_rect2d_shader(shader_config const& g)
{
  string v;
  string f;
  v += g.prepend();
  v += g.vert_in() + "vec2 vert;\n";
  v += g.decl_instance_attr("vec4", "idata");
  v += "void main(void) {\n";
  v += "vec4 idata_i = " + g.instance_attr("idata") + ";\n";
  v += "vec2 screen_pos = idata_i.xy + idata_i.zw * vert;\n";
  v += "gl_Position = vec4(screen_pos, 0.0, 1.0);\n";
  v += "}\n";
  f += g.prepend();
  f += g.decl_fragcolor();
  f += "void main(void) {\n";
  f += g.fragcolor() + " = vec4(1.0, 1.0, 1.0, 0.3);\n";
  f += "}\n";
  return make_glshader_ptr{rect2d_uniforms, rect2d_instance_attributes,
    rect2d_vertex_attributes}(v, f, "idata", g.debug_level, "rect2d");
}

private threaded function void prepare_instance_data_rect2d(
  scene_node const& sn, node_common_data mutable& ncd,
  instance_data mutable& idata)
{
  const sli = sn.trans.value.to_cslice();
  idata.instance_buffer.append(sli[0 .. 4]);
}

