private threaded namespace pgl3d::drawer::particle "export-unsafe";
public import common -;
public import pgl3d::drawer::base -;
public import meta m;

private tsvaluetype struct particle_uniforms()
{
  public float point_size_base;
}

private tsvaluetype struct particle_instance_attributes()
{
  public glm::mat4 model_matrix; // vp applied
}

private tsvaluetype struct particle_vertex_attributes()
{
  public glm::vec3 position;
}

public struct drawer_particle(shader_config const& glc,
  resource_pool_ptr const& res)
<pgldrawer_i>
{
  metafunction tattr particle_vertex_attributes;
  particle_shader_ptr sdr_sp = init_particle_shader(glc);
  public function string get_vbid_name() const { return "vbid_particle"; }
  public function string get_instances_vbid_name() const {
    return "vbid_particle"; }
  public function string get_vertices_vbid_name() const {
    return "vbid_particle"; }
  public function prepare_instance_data_funcptr
  get_prepare_instance_data_funcptr() const {
    return make_tfuncptr{prepare_instance_data_particle}();
  }
  public function ptr{vertex_buffer} make_vertex_buffer() const {
    return make_tattr_vertex_buffer{tattr}(true, false);
  }
  public function string builtin_vertex_set_name() const { return ""; }
  public function void make_builtin_vertex_sets(ptr{vertices} const& vptr)
    const { }
  public function dgf_filler make_filler(ptr{vertices} const& vptr) const
  {
    return make_dgf_particle_filler(vptr);
  }
  public function texture_info get_texture_info(cstrref const& name) const
  {
    return texture_info();
  }
  public function void resize_screen(shader_config const& glc, int width,
    int height)
  { 
  }
  public function void reload_shaders()
  {
  }
  public function uint get_postprocess_framebuffer(draw_step step) const
  {
    return 0U;
  }
  public function bool has_step(draw_step step) const
  {
    return step == draw_step_blend;
  }
  public function void draw(draw_step step, size_t iter,
    vertex_buffer const& bo, bo_instances_type const& bo_ib,
    aggregated_ibuffer const& aibuf, vbid_t vbid,
    shader_config const& glc, projection_info const& cam_df,
    cslice{GLuint} const& smtex_arr)
  {
    if (step == draw_step_blend) {
      glEnable(GL_DEPTH_TEST);
      glBlendFunc(GL_ONE, GL_ONE);
      mutable& sdr = *sdr_sp;
      glUseProgram(sdr.program);
      glUniform1f(sdr.u_point_size_base,
	0.1f * static_cast{float}(max(
	  cam_df.virt_width, cam_df.virt_height)));
      aibuf.draw(sdr, bo, bo_ib, vbid, glc.enable_instanced,
	glc.enable_uniform_instancing);
    }
  }
  public function option{ptr{edit_mode_i}} get_edit_mode() const
  {
    return option{ptr{edit_mode_i}}();
  }
}

private threaded function void
dgf_particle_internal(ptr{vertices} const& vptr, bool flat_flag,
  poly_t const& poly, mesh_index const& mp)
{
  for (const i, const& p: poly) {
    particle_vertex_attributes x;
    x.position = p.pos;
    vptr->push_point{particle_vertex_attributes}(x);
  }
}

private threaded function dgf_filler
make_dgf_particle_filler(ptr{vertices} const& vptr)
{
  return make_callable_ptr{dgf_particle_internal, 1}(vptr);
}

metafunction particle_shader_ptr
  ptr{glshader{particle_uniforms, particle_instance_attributes,
    particle_vertex_attributes}};

function particle_shader_ptr
init_particle_shader(shader_config const& g)
{
  string v;
  v += g.prepend();
  v += g.decl_instance_attr("mat4", "model_matrix");
  v += "uniform float point_size_base;\n";
  v += g.vert_in() + "vec3 position;\n";
  v += "void main(void) {\n";
  v += "gl_Position = " + g.instance_attr("model_matrix");
  v += "  * vec4(position, 1.0);\n";
  v += "gl_PointSize = point_size_base / gl_Position.w;\n";
  v += "}\n";
  string f;
  f += g.prepend();
  f += g.decl_fragcolor();
  f += "void main(void) {\n";
  f += "vec2 xy = gl_PointCoord * 2.0 - 1.0;\n";
  f += "float d = dot(xy, xy);\n";
  f += "float b = max(0.0, 1.0 - d);\n";
  f += g.fragcolor() + " = vec4(b * 2.0, b * 4.0, b * 10.0, 1.0);\n";
  f += "}\n";
  return make_glshader_ptr{particle_uniforms, particle_instance_attributes,
    particle_vertex_attributes}(v, f, "model_matrix", g.debug_level,
    "particle");
}

private threaded function void prepare_instance_data_particle(
  scene_node const& sn, node_common_data mutable& ncd,
  instance_data mutable& idata)
{
  const mvp = ncd.vp * sn.trans.value;
  buffer_append(idata.instance_buffer, mvp);
}

