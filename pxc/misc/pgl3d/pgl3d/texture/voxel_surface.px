public threaded namespace pgl3d::texture::voxel_surface;
public import common -;
public import exception -;
public import pointer::tfuncptr -;
public import meta m;
public import pgl3d::engine::util -;
public import pgl3d::texture::voxel -;
public import pgl3d::texture::texture -;
public import glm -;

public metafunction bitarray3 array3_pot{bit_varray};

public threaded function {f} bitarray3
bitarray3_resize(bitarray3 const& arr)
{
  bitarray3 rarr;
  rarr.set_size_l2(
    arr.get_width_l2() - 1, arr.get_height_l2() - 1, arr.get_depth_l2() - 1);
  for (const x: 0 .. rarr.get_width()) {
    for (const y: 0 .. rarr.get_height()) {
      for (const z: 0 .. rarr.get_depth()) {
	const x2 = x * 2u;
	const y2 = y * 2u;
	const z2 = z * 2u;
	const val =
	  f(
	    f(f(arr.get(x2 + 0, y2 + 0, z2 + 0),
	        arr.get(x2 + 1, y2 + 0, z2 + 0)),
	      f(arr.get(x2 + 0, y2 + 1, z2 + 0),
		arr.get(x2 + 1, y2 + 1, z2 + 0))),
	    f(f(arr.get(x2 + 0, y2 + 0, z2 + 1),
		arr.get(x2 + 1, y2 + 0, z2 + 1)),
	      f(arr.get(x2 + 0, y2 + 1, z2 + 1),
		arr.get(x2 + 1, y2 + 1, z2 + 1))));
	rarr.set(x, y, z, val);
      }
    }
  }
  return rarr;
}

threaded function void
bitarray3_fill(bitarray3 mutable& arr, uint x, uint y, uint z, uint size_l2,
  bool v)
{
  uint const sz = 1u << size_l2;
  for (uint ix: 0 .. sz) {
    for (uint iy: 0 .. sz) {
      for (uint iz: 0 .. sz) {
	arr.set(x + ix, y + iy, z + iz, v);
      }
    }
  }
}

public threaded function bitarray3
tilemap_external(cptr{texture_data} const& tmap)
{
  bitarray3 arr;
  arr.set_size_l2(tmap->get_width_l2(), tmap->get_height_l2(),
    tmap->get_depth_l2());
  if (true) {
    const sz = max(max(arr.get_width_l2(), arr.get_height_l2()),
      arr.get_depth_l2());
    arr.set_size_l2(sz, sz, sz);
  }
  for (const x: 0 .. tmap->get_width()) {
    for (const y: 0 .. tmap->get_height()) {
      for (const z: 0 .. tmap->get_depth()) {
	const e = tmap->get(x, y, z);
	arr.set(x, y, z, !is_space_voxel(e));
      }
    }
  }
  return arr;
}

public threaded function bitarray3
tilemap_internal(cptr{texture_data} const& tmap)
{
  bitarray3 arr;
  arr.set_size_l2(tmap->get_width_l2(), tmap->get_height_l2(),
    tmap->get_depth_l2());
  if (true) {
    const sz = max(max(arr.get_width_l2(), arr.get_height_l2()),
      arr.get_depth_l2());
    arr.set_size_l2(sz, sz, sz);
  }
  for (const x: 0 .. tmap->get_width()) {
    for (const y: 0 .. tmap->get_height()) {
      for (const z: 0 .. tmap->get_depth()) {
	const e = tmap->get(x, y, z);
	arr.set(x, y, z, is_filled(e));
      }
    }
  }
  return arr;
}


public threaded function varray{varray{vec3}}
get_surface_quads(bitarray3 const& ba)
{
  varray{varray{vec3}} quads;
  // not optimal
  get_surface_quads_one_dir(ba, quads, 0, false);
  get_surface_quads_one_dir(ba, quads, 1, false);
  get_surface_quads_one_dir(ba, quads, -1, false);
  get_surface_quads_one_dir(ba, quads, 0, true);
  get_surface_quads_one_dir(ba, quads, 1, true);
  get_surface_quads_one_dir(ba, quads, -1, true);
  return quads;
}

threaded function void
get_surface_quads_one_dir(bitarray3 const& ba,
  varray{varray{vec3}} mutable& quads, int axis, bool back)
{
  // axis==1のとき変数xyzはbaのzxy, axis=-1のとき変数xyzはbaのyxz
  threaded function {t} void
  rotate_axis(t mutable& x, t mutable& y, t mutable& z)
  {
    if (axis == 1) {
      const v = x;
      x = y;
      y = z;
      z = v;
    } else if (axis == -1) {
      const v = z;
      z = y;
      y = x;
      x = v;
    }
  }
  uint xmax = ba.get_width();
  uint ymax = ba.get_height();
  uint zmax = ba.get_depth();
  rotate_axis(zmax, ymax, xmax); // baの軸から変数の軸への変換なのでzyxの順
  threaded function bool
  voxel_get(uint x, uint y, uint z)
  {
    if (back) {
      z = zmax - z - 1;
    }
    rotate_axis(x, y, z); // 変数の軸からbaの軸へ変換
    return ba.get(x, y, z);
  }
  threaded function vec3
  to_vec3(uint x, uint y, uint z)
  {
    mutable xf = static_cast{float}(x) / static_cast{float}(xmax);
    mutable yf = static_cast{float}(y) / static_cast{float}(ymax);
    mutable zf = static_cast{float}(z) / static_cast{float}(zmax);
    // zf += 0.000001f;
    if (back) {
      zf = 1.0f - zf;
    }
    rotate_axis(xf, yf, zf); // 変数の軸からbaの軸へ変換
    return make_vec3(xf, yf, zf);
  }
  for (const z: 0 .. zmax) {
    bit_varray bm;
    bm.resize(xmax * ymax, false);
    for (const x: 0 .. xmax) {
      for (const y: 0 .. ymax) {
	const v0 = (z == 0) ? false : voxel_get(x, y, z - 1);
	const v1 = voxel_get(x, y, z);
	bm[x + xmax * y] = (!v0) && v1;
      }
    }
    for (const x0: 0 .. xmax) {
      for (const y0: 0 .. ymax) {
	if (!bm[x0 + xmax * y0]) {
	  continue;
	}
	uint x1;
	uint y1;
	for (x1 = x0 + 1; x1 < xmax; ++x1) {
	  if (!bm[x1 + xmax * y0]) {
	    break;
	  }
	}
	bool done = false;
	for (y1 = y0 + 1; y1 < ymax; ++y1) {
	  for (const xi: x0 .. x1) {
	    if (!bm[xi + xmax * y1]) {
	      done = true;
	      break;
	    }
	  }
	  if (done) {
	    break;
	  }
	}
	for (const xi: x0 .. x1) {
	  for (const yi: y0 .. y1) {
	    bm[xi + xmax * yi] = false;
	  }
	}
	mutable x0f = static_cast{float}(x0);
	mutable y0f = static_cast{float}(y0);
	mutable x1f = static_cast{float}(x1);
	mutable y1f = static_cast{float}(y1);
	mutable zf = static_cast{float}(z);
	if (back) {
	  quads.push_back(make_varray{vec3}(
	    to_vec3(x0, y0, z),
	    to_vec3(x1, y0, z),
	    to_vec3(x1, y1, z),
	    to_vec3(x0, y1, z)));
	} else {
	  quads.push_back(make_varray{vec3}(
	    to_vec3(x0, y1, z),
	    to_vec3(x1, y1, z),
	    to_vec3(x1, y0, z),
	    to_vec3(x0, y0, z)));
	}
      }
    }
  }
}

