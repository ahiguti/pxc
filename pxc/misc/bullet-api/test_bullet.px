public namespace test_bullet "export-unsafe";
public import pgl3d::dynamics_world -;
public import common -;
public import Bullet::base -;
public import Bullet::api +;
public import pointer::raw_unsafe -;
public import meta m;
public import meta::vararg va;


function void test1()
{
  pgl3dDynamicsWorld dyn;
  dyn.dynamicsWorld.setGravity(btVector3_(0.0f, -10.0f, 0.0f));
  const groundShape = make_ptr{pgl3dCollisionShape{btBoxShape}}(
    btVector3_(50.0f, 50.0f, 50.0f));
  const rbGround = make_ptr{pgl3dRigidBody}(groundShape, 0.0f, 
    btTransform_(btQuaternion_getIdentity(), btVector3_(0.0f, -56.0f, 0.0f)));
  dyn.addRigidBody(rbGround);
  const colShape = make_ptr{pgl3dCollisionShape{btBoxShape}}(
    btVector3_(1.0f, 1.0f, 1.0f));
  const rb = make_ptr{pgl3dRigidBody}(colShape, 1.0f,
    btTransform_(btQuaternion_getIdentity(), btVector3_(2.0f, 10.0f, 0.0f)));
  dyn.addRigidBody(rb);
  for (const i: 0 .. 1000) {
    const fixedTimeStep = 1.0f / 60.0f;
    dyn.dynamicsWorld.stepSimulation(1.0f / 60.0f, 10, fixedTimeStep);
    btTransform trans;
    rb->motionState.getWorldTransform(trans);
    println("step", i,
	  trans.getOrigin().getX(), 
	  trans.getOrigin().getY(), 
	  trans.getOrigin().getZ());
  }
  println("done");
}

function void test2()
{
  pgl3dDynamicsWorld dyn;
  dyn.dynamicsWorld.setGravity(btVector3_(0.0f, -10.0f, 0.0f));
  const groundShape = make_ptr{pgl3dCollisionShape{btBoxShape}}(
    btVector3_(50.0f, 50.0f, 50.0f));
  const rbGround = make_ptr{pgl3dRigidBody}(groundShape, 0.0f, 
    btTransform_(btQuaternion_getIdentity(), btVector3_(0.0f, -56.0f, 0.0f)));
  dyn.addRigidBody(rbGround);
  const colShape = make_ptr{pgl3dCollisionShape{btBoxShape}}(
    btVector3_(1.0f, 1.0f, 1.0f));
  varray{ptr{pgl3dRigidBody}} boxes;
  for (size_t i: 0 .. 10) {
    const rb = make_ptr{pgl3dRigidBody}(colShape, 1.0f,
      btTransform_(
	btQuaternion_getIdentity(),
	btVector3_(2.0f, 10.0f * static_cast{btScalar}(i), 0.0f)));
    dyn.addRigidBody(rb);
    boxes.push_back(rb);
  }
  for (const i: 0 .. 1000) {
    const fixedTimeStep = 1.0f / 60.0f;
    dyn.dynamicsWorld.stepSimulation(1.0f / 60.0f, 10, fixedTimeStep);
    for (size_t j: 0 .. 10) {
      btTransform trans;
      boxes[j]->motionState.getWorldTransform(trans);
      println("step", i, "obj", j,
	    trans.getOrigin().getX(), 
	    trans.getOrigin().getY(), 
	    trans.getOrigin().getZ());
    }
  }
  println("done");
}

{
  test2();
}
