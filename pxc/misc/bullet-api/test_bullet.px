public namespace test_bullet "export-unsafe";
public import common -;
public import Bullet::base -;
public import Bullet::api +;
public import pointer::raw_unsafe -;
public import meta m;
public import meta::vararg va;

struct myDynamicsWorld()
{
  /* TODO: noncopyable */
  public btDefaultCollisionConfiguration mutable collisionConfiguration 
    = btDefaultCollisionConfiguration(btDefaultCollisionConstructionInfo());
  public btCollisionDispatcher mutable dispatcher
    = btCollisionDispatcher(address(collisionConfiguration));
  public btDbvtBroadphase mutable overlappingPairCache
    = btDbvtBroadphase(rawptr{btOverlappingPairCache}());
  public btSequentialImpulseConstraintSolver mutable solver;
  public btDiscreteDynamicsWorld mutable dynamicsWorldObject
    = btDiscreteDynamicsWorld(address(dispatcher),
      address(overlappingPairCache), address(solver),
      address(collisionConfiguration));
  public rawptr{btDynamicsWorld} const dynamicsWorld
    = address(dynamicsWorldObject);
  public btAlignedObjectArray_btCollisionShape_p mutable collisionShapes;
  function ~
  {
    int j;
    for (j = dynamicsWorld->getNumCollisionObjects() - 1; j >= 0; --j) {
      const obj = dynamicsWorld->getCollisionObjectArray().at(j);
      const body = btRigidBody_upcast_btCollisionObject_p(obj);
      if (!body.is_null()) {
	delete(body->getMotionState());
      }
      dynamicsWorld->removeCollisionObject(obj);
      delete(obj);
    }
    for (const j : 0 .. collisionShapes.size()) {
      const shape = collisionShapes.at(j);
      collisionShapes.at(j) = rawptr{btCollisionShape}();
      delete(shape);
    }
  }
  public function void addShape(rawptr{btCollisionShape} shape)
  {
    collisionShapes.push_back(shape);
  }
  public function rawptr{btRigidBody} makeRigidBody(
    rawptr{btCollisionShape} shape, btScalar mass, btTransform const& tr0)
  {
    const isDynamic = (mass != 0.0f);
    mutable localInertia = btVector3_(0.0f, 0.0f, 0.0f);
    if (isDynamic) {
      shape->calculateLocalInertia(mass, localInertia);
    }
    const myMotionState = new{btDefaultMotionState}(tr0,
	btTransform_getIdentity());
    const rbInfo = btRigidBody_btRigidBodyConstructionInfo(mass,
      myMotionState, shape, localInertia);
    const body = new{btRigidBody}(rbInfo);
    dynamicsWorld->addRigidBody(body);
    return body;
  }
}

{
  myDynamicsWorld dyn;
  dyn.dynamicsWorld->setGravity(btVector3_(0.0f, -10.0f, 0.0f));
  {
    const groundShape = new{btBoxShape}(
      btVector3_(50.0f, 50.0f, 50.0f));
    dyn.addShape(groundShape);
    dyn.makeRigidBody(groundShape, 0.0f,
      btTransform_(btQuaternion(), btVector3_(0.0f, -56.0f, 0.0f)));
  }
  {
    const colShape = new{btBoxShape}(btVector3_(1.0f, 1.0f, 1.0f));
    dyn.addShape(colShape);
    dyn.makeRigidBody(colShape, 1.0f,
      btTransform_(btQuaternion(), btVector3_(2.0f, 10.0f, 0.0f)));
  }
  for (const i: 0 .. 1000) {
    const fixedTimeStep = 1.0f / 60.0f;
    dyn.dynamicsWorld->stepSimulation(1.0f / 60.0f, 10, fixedTimeStep);
    int j;
    for (j = dyn.dynamicsWorld->getNumCollisionObjects() - 1; j >= 0; --j) {
      const obj = dyn.dynamicsWorld->getCollisionObjectArray().at(j);
      const body = btRigidBody_upcast_btCollisionObject_p(obj);
      if (!body.is_null() &&
	body->cgetMotionState() != crptr{btMotionState}())
      {
	btTransform trans;
	body->cgetMotionState()->getWorldTransform(trans);
	println("step", i, "obj", j,
	  trans.getOrigin().getX(), 
	  trans.getOrigin().getY(), 
	  trans.getOrigin().getZ());
      }
    }
  }
  println("done");
}

