public namespace bullet_base "use-unsafe";
public import common -;
public import pointer::func -;
public import meta m;

public metafunction crptr{x}
  m::cond{m::is_list{x}, funcptr{m::at0{x}, m::slice{x, 1}}, crawptr{x}};
public metafunction rptr{x}
  m::cond{m::is_list{x}, funcptr{m::at0{x}, m::slice{x, 1}}, rawptr{x}};

public tsvaluetype struct extern "pxcrt::clong" "extint" clong { }
public tsvaluetype struct extern "pxcrt::uclong" "extint" uclong { }
public tsvaluetype struct extern "pxcrt::cchar" "extint" cchar { }

extern "incdir" "/usr/include/bullet";
extern "incdir" "/usr/local/include/bullet";
extern "ldflags" "-L/usr/local/lib -lBulletCollision -lBulletDynamics -lBulletMultiThreaded -lBulletSoftBody -lLinearMath";

/*
public function extern "::pxcrt::reference_upcast" {tto, tfrom}
check_upcast{tfrom, tto} mutable&
reference_upcast(tfrom mutable& x);
public function extern "::pxcrt::creference_upcast" {tto, tfrom}
check_upcast{tfrom, tto} const&
creference_upcast(tfrom const& x);

private metafunction check_upcast{tfrom, tto}
  m::apply{
    metafunction{x}
      m::cond{
	m::is_list{x},
	m::cond{
	  m::ge{m::list_find{x, m::to_string{tto}}, 0},
	  tto,
	  m::error{"invalid upcast"}},
	m::error{"invalid upcast"}},
    m::map{m::symbol{tfrom, "__base__", m::nil}, m::to_string}};
*/

extern "types" inline

#include "btBulletDynamicsCommon.h"

namespace pxcrt {

typedef long clong;
typedef unsigned long uclong;
typedef char cchar;

/*
template <typename Tto, typename Tfrom> static inline Tto&
reference_upcast(Tfrom& x)
{
  return x;
}

template <typename Tto, typename Tfrom> Tto static inline const&
creference_upcast(Tfrom const& x)
{
  return x;
}
*/

};

;
