public namespace recobj6 "export-unsafe";
import core::common -;
import pointer::raw -;
import core::numeric::fpmath -;
import SDL2 -;
import SDL2::Image -;
import GL::gles2 -;
import GL::glm glm;
import core::io::time -;
import core::io::environ -;
import core::meta m;

import glutil -;
import glgeometry -;

glm::mat4 projection;
glm::quat camera_angle;
glm::vec3 camera_pos;
int loc_mvp;
int loc_model_matrix;
int loc_normal_matrix;
int loc_camera_pos;
int loc_mate_color;
int loc_vertex;
int loc_normal;
int loc_light_dir;
int loc_view_dir;
int loc_sampler;
uint texture_id;

int screen_width = 0;
int screen_height = 0;
float perspective_distance = 1.1;
float min_distance = 1.0;

function void build_vertices(ptr{vertices} const& vptr)
{
  const t = fill(vptr);
  const b = regular_polygon(2.0, 20,
    bump(0.1, 0.8, 2,
      sphere(20, t),
      bump(0.01, 0.9, 1, t, t)),
    sphere(15, t));
  b(cslice{glm::vec3}());
  println("elems:", vptr->elements.size());
}

function void set_normals(glm::mat4 const& model_mat)
{
  const view = (glm::mat4().translate(camera_pos) * camera_angle.to_mat4())
    .inverse();
  const mvp = projection * view * model_mat;
  const nm = model_mat.to_3();
  glUniformMatrix4fv(loc_mvp, 1, 0, mvp.crawptr());
  glUniformMatrix4fv(loc_model_matrix, 1, 0, model_mat.crawptr());
  glUniformMatrix3fv(loc_normal_matrix, 1, 0, nm.crawptr());
  glUniform3fv(loc_camera_pos, 1, camera_pos.crawptr());
  const red = make_farray{float}(0.8, 0.1, 0.0, 1.0);
  glUniform4fv(loc_mate_color, 1, red.crawptr());
}

function void draw_frame(buffer_object const& bo)
{
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  const light = glm::make_vec3(5.0, 5.0, -5.0).normalize();
  glUniform3fv(loc_light_dir, 1, light.crawptr());
  check_error();
  glUniform3fv(loc_view_dir, 1,
    (camera_angle.to_mat3() * glm::make_vec3(0.0, 0.0, -1.0)).crawptr());
  check_error();
  const sn = make_ptr{scene_node}();
  sn->vs_id = -1;
  glm::mat4 tr;
  for (size_t i : 0 .. 10) {
    const cn = make_ptr{scene_node}();
    cn->vs_id = 0;
    cn->trans = tr;
    sn->children.push_back(cn);
    tr = tr.translate(glm::make_vec3(0.0, 0.0, -5.0));
  }
  const modelview_cur = glm::mat4();
  sn->draw{set_normals}(bo, modelview_cur, loc_vertex, loc_normal, -1);
}

function void reshape(int width, int height)
{
  screen_width = width;
  screen_height = height;
  update_mvp();
}

function void set_distance(float x)
{
  perspective_distance = x;
  if (perspective_distance < min_distance + 0.1) {
    perspective_distance = min_distance + 0.1; }
  if (perspective_distance > 500.0) { perspective_distance = 500.0; }
  update_mvp();
}

function void update_mvp()
{
  const h = static_cast{float}(screen_height)
    / static_cast{float}(screen_width);
  glViewport(0, 0, static_cast{GLsizei}(screen_width),
    static_cast{GLsizei}(screen_height));
  const d = static_cast{float}(perspective_distance);
  const near = static_cast{float}(d - min_distance);
  const far = static_cast{float}(d + min_distance + 100.0);
  const left = static_cast{float}(-1.0 * ((d - min_distance) / d));
  const right = static_cast{float}(1.0 * ((d - min_distance) / d));
  const bottom = static_cast{float}(-h * ((d - min_distance) / d));
  const top = static_cast{float}(h * ((d - min_distance) / d));
  projection = glm::frustum{float}(left, right, bottom, top, near, far);
}

function uint compile_shader(cstrref const& src, GLenum type)
{
  mutable res = glCreateShader(type);
  mutable source = make_farray{ccharptr}(src.crawptr().char());
  const length = make_farray{int}(static_cast{int}(src.size()));
  glShaderSource(res, 1, source.rawptr(), length.crawptr());
  glCompileShader(res);
  int success;
  glGetShaderiv(res, GL_COMPILE_STATUS, address(success));
  if (success == 0) {
    int sz;
    glGetShaderiv(res, GL_INFO_LOG_LENGTH, address(sz));
    string buf;
    buf.resize(static_cast{size_t}(sz), 0);
    GLsizei len;
    glGetShaderInfoLog(res, static_cast{GLsizei}(sz), address(len),
      buf.rawptr().char());
    debug_log("compile_shader failed:",
      string_join{"\t"}(static_cast{int}(type), success, buf));
    glDeleteShader(res);
    res = 0;
  }
  debug_log("compile_shader", res);
  return res;
}

function uint create_program(cstrref const& vertex_shader,
  cstrref const& fragment_shader)
{
  mutable prog = glCreateProgram();
  uint shader;
  if (!vertex_shader.empty()) {
    shader = compile_shader(vertex_shader, GL_VERTEX_SHADER);
    if (shader != 0) {
      glAttachShader(prog, shader);
    }
  }
  if (!fragment_shader.empty()) {
    shader = compile_shader(fragment_shader, GL_FRAGMENT_SHADER);
    if (shader != 0) {
      glAttachShader(prog, shader);
    }
  }
  glLinkProgram(prog);
  int success;
  glGetProgramiv(prog, GL_LINK_STATUS, address(success));
  if (success == 0) {
    debug_log("create_program failed:", success);
    glDeleteProgram(prog);
    prog = 0;
  }
  debug_log("create_program", prog);
  return prog;
}

function void set_program()
{
  const vert = m::concat{
    "uniform mat4 model_view_projection;\n",
    "uniform mat4 model_matrix;\n",
    "uniform mat3 normal_matrix;\n",
    "uniform vec3 camera_pos;\n",
    "uniform vec3 light_dir;\n",
    "uniform vec3 view_dir;\n",
    "uniform vec4 mate_color;\n",
    "attribute vec3 vertex;\n",
    "attribute vec3 normal;\n",
    "varying float brightness;\n",
    "varying float specular;\n",
    "void main(void) {\n",
    "  gl_Position = model_view_projection * vec4(vertex, 1.0);\n",
    "  vec3 nor = normalize(normal_matrix * normal);\n",
    "  brightness = max(dot(light_dir, nor), 0.0) * 0.8 + 0.05;\n",
    "  vec3 reflection_vec = reflect(-light_dir, nor);\n",
    // "  float cos_angle = max(0.0, dot(view_dir, reflection_vec));\n",
    "  float cos_angle = max(0.0, dot(normalize((model_matrix * vec4(vertex, 1.0)).xyz - camera_pos), reflection_vec));\n",
    // "  vec3 half_vec = normalize(light_dir + view_dir);\n",
    // "  float cos_angle = max(0.0, dot(nor, half_vec));\n",
    "  specular = pow(cos_angle, 16.0);\n",
    "}\n"};
  const frag = m::concat{
    "uniform sampler2D sampler;\n",
    "uniform vec4 mate_color;\n",
    "varying float brightness;\n",
    "varying float specular;\n",
    "void main(void) {\n",
    "  vec4 color1 = vec4(0.2, 0.3, 0.3, 1.0);\n",
    "  vec4 color2 = vec4(0.8, 0.8, 0.8, 1.0);\n",
    "  gl_FragColor = color1 * brightness + color2 * specular;\n",
    "}\n"};
  const prog = create_program(vert, frag);
  if (prog != 0) {
    glUseProgram(prog);
    loc_mvp = glGetUniformLocation(prog,
      "model_view_projection".crawptr().char());
    loc_model_matrix = glGetUniformLocation(prog,
      "model_matrix".crawptr().char());
    loc_normal_matrix = glGetUniformLocation(prog,
      "normal_matrix".crawptr().char());
    loc_camera_pos = glGetUniformLocation(prog, "camera_pos".crawptr().char());
    loc_light_dir = glGetUniformLocation(prog, "light_dir".crawptr().char());
    loc_view_dir = glGetUniformLocation(prog, "view_dir".crawptr().char());
    loc_mate_color = glGetUniformLocation(prog, "mate_color".crawptr().char());
    loc_sampler = glGetUniformLocation(prog, "sampler".crawptr().char());
    loc_vertex = glGetAttribLocation(prog, "vertex".crawptr().char());
    loc_normal = glGetAttribLocation(prog, "normal".crawptr().char());
    println("loc_vertex: ", loc_vertex);
    println("loc_normal: ", loc_normal);
    println("loc_camera_pos: ", loc_camera_pos);
    println("loc_light_dir: ", loc_light_dir);
    println("loc_view_dir: ", loc_view_dir);
    println("loc_mate_color: ", loc_mate_color);
    SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("Locations: ",
      loc_vertex, loc_normal, loc_light_dir, loc_mate_color));
  }
}

function void check_error()
{
  const v = glGetError();
  if (v == GL_NO_ERROR) {
    return;
  }
  sdllog(string_join{""}("error: ", static_cast{int}(v)));
}

/*
function void prepare_texture()
{
  sdllog("prepare_texture");
  const sur = IMG_Load("img-c1024.jpg").some;
  const mode = sur.BytesPerPixel() == 4 ? GL_RGBA : GL_RGB;
  sdllog("prepare_texture 1");
  glActiveTexture(GL_TEXTURE0);
  sdllog("prepare_texture 2");
  glGenTextures(1, address(texture_id));
  sdllog("prepare_texture 3");
  glBindTexture(GL_TEXTURE_2D, texture_id);
  sdllog(string_join{""}("texture_id", texture_id));
  glTexImage2D(GL_TEXTURE_2D, 0, static_cast{int}(mode),
    static_cast{int}(sur.W()), static_cast{int}(sur.H()),
    0, mode, GL_UNSIGNED_BYTE, sur.Pixels().crawptr().void());
  check_error();

  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,
    static_cast{int}(GL_NEAREST));
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,
    static_cast{int}(GL_NEAREST));

  sdllog(string_join{""}("wh", sur.W(), sur.H()));
  sdllog(string_join{""}("loc_sampler", loc_sampler));
  glUniform1i(loc_sampler, 0);
  sdllog(string_join{""}("prepare_texture done"));
}
*/

function void sdllog(cstrref const& mess)
{
  SDL_LogWarn(SDL_LOG_CATEGORY_TEST, mess);
}

function void init_gl()
{
  glEnable(GL_CULL_FACE);
  glEnable(GL_DEPTH_TEST);
  set_program();
  // prepare_texture();
}



{
  sdllog("PXC-SDL2 main");
  const ini = SDL_Init(SDL_INIT_VIDEO);
  int init_w = 800;
  int init_h = 800;
  SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
  mutable wflags = SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE
    | SDL_WINDOW_ALLOW_HIGHDPI;
  if (get_option("-f") == "1") { wflags |= SDL_WINDOW_FULLSCREEN; }
  const wnd = SDL_CreateWindow("PXC-SDL2", 0, 0, init_w, init_h, wflags).some;
  SDL_GL_GetDrawableSize(wnd, init_w, init_h);
  const glctx = SDL_GL_CreateContext(wnd);
  SDL_GL_SetSwapInterval(1);

  sdllog("PXC-SDL2 init_gl");
  init_gl();

  sdllog("PXC-SDL2 reshape");
  reshape(init_w, init_h);

  uint t0 = 0;
  uint t1 = 0;
  uint tprev = SDL_GetTicks();
  uint frames = 0;
  camera_angle = glm::make_quat_wxyz(1.0, 0.0, 0.0, 0.0);
  camera_pos = glm::make_vec3(0.0, 0.0, 10.0);

  metafunction ticks_t farray{uint, 5};
  ticks_t ticks;
  ticks_t ticks_sum;
  for (const i, mutable& e : ticks) {
    e = tprev;
  }
  function void save_ticks(size_t idx) {
    const prev_tick = ticks[idx == 0 ? ticks.size() - 1 : idx - 1];
    mutable& cur_tick = ticks[idx];
    cur_tick = SDL_GetTicks();
    ticks_sum[idx] += cur_tick - prev_tick;
  }

  buffer_object bo;
  bo.vs_arr.push_back(vertex_set());
  build_vertices(bo.vs_arr[0].vtxs);
  bo.create_vbo();

  bool done = false;
  bool paused = false;
  function void camera_rotate(float x, float y, float z, float angle) {
    const qq = glm::make_quat_angle_axis(angle, x, y, z);
    camera_angle = (camera_angle * qq).normalize();
  }
  function void camera_move(float x, float y, float z) {
    camera_pos += camera_angle.to_mat3() * glm::make_vec3(x, y, z);
  }
  farray{bool, 2} fingdown;
  farray{size_t, 2} fingerdown_time;
  farray{glm::vec2, 2} start_pos;
  farray{glm::vec2, 2} cur_pos;
  glm::vec2 finger_xyrotate_delta;
  glm::vec2 finger_xymove_delta;
  float finger_zrotate_delta;
  float finger_zmove_delta;
  function void finger_motion(float x, float y, float dx, float dy,
    SDL_FingerID fng) {
    fng = 0;
    if (fng < 2) {
      size_t fid = static_cast{size_t}(fng);
      cur_pos[fid] = glm::make_vec2(x, y);
      SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
          string_join{" "}("finger_motion", x, y, fng));
    }
  }
  function void finger_down(float x, float y, SDL_FingerID fng) {
    fng = 0;
    if (fng < 2) {
      size_t fid = static_cast{size_t}(fng);
      fingdown[fid] = true;
      start_pos[fid] = glm::make_vec2(x, y);
      cur_pos[fid] = start_pos[fid];
      SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
          string_join{" "}("finger_down", x, y, fid));
      fingerdown_time[0] = 0;
      fingerdown_time[1] = 0;
    }
  }
  function void finger_up(SDL_FingerID fng) {
    fng = 0;
    if (fng < 2) {
      size_t fid = static_cast{size_t}(fng);
      fingdown[fid] = false;
      start_pos = cur_pos;
      fingerdown_time[0] = 0;
      fingerdown_time[1] = 0;
    }
  }
  function void finger_action_step() {
    if (fingdown[0] && !fingdown[1]) {
      if (fingerdown_time[0] >= 2) {
        mutable dx = (cur_pos[0].x - start_pos[0].x);
        mutable dy = (cur_pos[0].y - start_pos[0].y);
        const d = glm::distance(start_pos[0], cur_pos[0]);
        if (d > 3.0) {
          dx /= d / 3.0;
          dy /= d / 3.0;
        }
        camera_rotate(1.0, 0.0, 0.0, -dy * 2.0);
        camera_rotate(0.0, 1.0, 0.0, -dx * 2.0);
      } else {
        start_pos[0] = (start_pos[0] + cur_pos[0]) / 2.0f;
        fingerdown_time[0] += 1;
      }
    } else if (!fingdown[0] && fingdown[1]) {
    } else if (fingdown[0] && fingdown[1]) {
    }
  }
  while (!done) {
    save_ticks(0);
    SDL_Event ev;
    while (SDL_PollEvent(ev)) {
      const etype = ev.type;
      if (etype == SDL_WINDOWEVENT) {
        if (ev.window.event == SDL_WINDOWEVENT_RESIZED) {
          int w;
          int h;
          SDL_GL_GetDrawableSize(wnd, w, h);
          reshape(w, h);
          SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
            string_join{""}("resized w=", w, " h=", h));
        }
      } else if (etype == SDL_FINGERMOTION) {
        /*
        const dx = ev.tfinger.dx * 50.0;
        const dy = ev.tfinger.dy * 50.0;
        camera_rotate(1.0, 0.0, 0.0, -dy);
        camera_rotate(0.0, 1.0, 0.0, -dx);
        */
        finger_motion(ev.tfinger.x, ev.tfinger.y, ev.tfinger.dx, ev.tfinger.dy,
          ev.tfinger.fingerId);
      } else if (etype == SDL_FINGERDOWN) {
        finger_down(ev.tfinger.x, ev.tfinger.y, ev.tfinger.fingerId);
      } else if (etype == SDL_FINGERUP) {
        finger_up(ev.tfinger.fingerId);
      } else if (etype == SDL_APP_WILLENTERBACKGROUND) {
        SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("paused"));
        paused = true;
      } else if (etype == SDL_APP_DIDENTERFOREGROUND) {
        SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("resumed"));
        paused = false;
        int w;
        int h;
        SDL_GL_GetDrawableSize(wnd, w, h);
        reshape(w, h);
      } else if (etype == SDL_QUIT) {
        done = true;
        break;
      }
    }
    if (paused) {
      SDL_Delay(100);
      continue;
    }
    save_ticks(1);
    {
      draw_frame(bo);
      save_ticks(2);
      ++frames;
      uint t = SDL_GetTicks();
      if (t - t0 >= 1000) {
        const seconds = static_cast{float}(t - t0) / 1000.0;
        const fps = static_cast{float}(frames) / seconds;
        SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
          string_join{" "}(frames, "frames in", seconds, "seconds =",
            fps, "fps"));
        SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
          string_join{" "}("ticks: ", ticks_sum));
        ticks_sum = ticks_t();
        t0 = t;
        frames = 0;
      }
      tprev = t;
      if (t - t1 >= 10) {
        if (t - t1 >= 10) {
          t1 += 10;
        }
        SDL_KeyboardState const ks;
        if (ks.Key(SDL_SCANCODE_ESCAPE) != 0) {
          done = true;
        }
        if (ks.Key(SDL_SCANCODE_UP) != 0) {
          if (ks.Key(SDL_SCANCODE_LCTRL) != 0) {
            set_distance(perspective_distance + 0.01);
            SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("distance",
              perspective_distance));
          } else {
            camera_rotate(1.0, 0.0, 0.0, 1.0);
          }
        }
        if (ks.Key(SDL_SCANCODE_DOWN) != 0) {
          if (ks.Key(SDL_SCANCODE_LCTRL) != 0) {
            set_distance(perspective_distance - 0.01);
            SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("distance",
              perspective_distance));
          } else {
            camera_rotate(1.0, 0.0, 0.0, -1.0);
          }
        }
        if (ks.Key(SDL_SCANCODE_LEFT) != 0) {
          camera_rotate(0.0, 1.0, 0.0, 1.0);
        }
        if (ks.Key(SDL_SCANCODE_RIGHT) != 0) {
          camera_rotate(0.0, 1.0, 0.0, -1.0);
        }
        // if (ks.Key(SDL_SCANCODE_SPACE) != 0) {
          camera_move(0.0, 0.0, -0.02);
        // }
        if (ks.Key(SDL_SCANCODE_LSHIFT) != 0) {
          camera_move(0.0, 0.0, 0.02);
        }
        if (ks.Key(SDL_SCANCODE_A) != 0) {
          camera_move(-0.02, 0.0, 0.0);
        }
        if (ks.Key(SDL_SCANCODE_D) != 0) {
          camera_move(0.02, 0.0, 0.0);
        }
        if (ks.Key(SDL_SCANCODE_S) != 0) {
          camera_move(0.0, -0.02, 0.0);
        }
        if (ks.Key(SDL_SCANCODE_W) != 0) {
          camera_move(0.0, 0.02, 0.0);
        }
        if (ks.Key(SDL_SCANCODE_Z) != 0) {
          camera_rotate(0.0, 0.0, 1.0, -1.0);
        }
        if (ks.Key(SDL_SCANCODE_X) != 0) {
          camera_rotate(0.0, 0.0, 1.0, 1.0);
        }
        finger_action_step();
      }
    }
    save_ticks(3);
    SDL_GL_SwapWindow(wnd);
    save_ticks(4);
  }
  io::system._exit(0);
}

