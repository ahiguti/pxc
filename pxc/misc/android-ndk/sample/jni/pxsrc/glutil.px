public namespace glutil "export-unsafe";
public import core::common -;
public import pointer::raw -;
public import core::numeric::fpmath -;
public import core::numeric::quaternion -;
public import SDL2 -;
public import SDL2::Image -;
public import GL::gles2 -;
public import GL::glm glm;
public import core::io::time -;
public import core::meta m;
public import core::exception -;

public pure tsvaluetype struct vertex
{
  public glm::vec3 position;
  public glm::vec3 normal;
  public glm::vec2 uv;
}

public pure tsvaluetype struct node_edge
{
  public size_t edge_sort;
  public glm::mat4 trans; /* or quat and vec3 ? */
}

public pure multithreaded struct vertices
{
  public varray{float} vertex_values;
  public varray{uint} elements;
  public tree_map{vertex, uint} value_to_id;
  public varray{node_edge} edges;
  public function void push_vertex(vertex const& value)
  {
    if (const id: value_to_id[value]) {
      elements.push_back(id);
      /* debug_log("push", value, "id", id); */
    } else {
      const id = static_cast{uint}(vertex_values.size() / 8);
      vertex_values.push_back(value.position.x);
      vertex_values.push_back(value.position.y);
      vertex_values.push_back(value.position.z);
      vertex_values.push_back(value.normal.x);
      vertex_values.push_back(value.normal.y);
      vertex_values.push_back(value.normal.z);
      vertex_values.push_back(value.uv.x);
      vertex_values.push_back(value.uv.y);
      value_to_id[value] = id;
      elements.push_back(id);
      /* debug_log("push", value, "id", id); */
    }
  }
  public function void push_edge(node_edge const& e)
  {
    edges.push_back(e);
  }
}

public pure struct vertex_set()
{
  public string name;
  public ptr{vertices} vtxs = make_ptr{vertices}();
  public size_t vertex_values_offset;
  public size_t elements_offset;
}

public pure struct buffer_object
{
  public varray{vertex_set} vs_arr;
  public tree_map{string, size_t} vs_names;
  public uint vbo_values;
  public uint vbo_elems;
  public size_t num_vertex_values;
  public size_t num_elements;
}

function void check_error()
{
  const v = glGetError();
  if (v == GL_NO_ERROR) {
    return;
  }
  // debug_log(string_join{""}("glutil::check_error", static_cast{int}(v)));
  throw runtime_error_template{"glutil::check_error"}(
    to_string(static_cast{int}(v)));
}

public function bool buffer_object_create_vbo(buffer_object mutable& bo)
{
  varray{float} vertex_values;
  varray{uint} elements;
  size_t num_v = 0;
  size_t num_e = 0;
  for (const i, const& be: bo.vs_arr) {
    num_v += be.vtxs->vertex_values.size();
    num_e += be.vtxs->elements.size();
  }
  vertex_values.resize(num_v, 0.0);
  elements.resize(num_e, 0);
  bo.num_vertex_values = num_v;
  bo.num_elements = num_e;
  num_v = 0;
  num_e = 0;
  for (const i, mutable& be: bo.vs_arr) {
    for (const j, const& v: be.vtxs->vertex_values) {
      vertex_values[num_v + j] = v;
    }
    for (const j, const& e: be.vtxs->elements) {
      elements[num_e + j] = e + static_cast{uint}(num_v);
    }
    be.vertex_values_offset = num_v;
    be.elements_offset = num_e;
    num_v += be.vtxs->vertex_values.size();
    num_e += be.vtxs->elements.size();
  }

  farray{uint, 2} vbos;
  glGenBuffers(2, vbos.rawptr());
  check_error();
  if (vbos[0] == 0 || vbos[1] == 0) {
    return false;
  }
  glBindBuffer(GL_ARRAY_BUFFER, vbos[0]);
  check_error();
  glBufferData(GL_ARRAY_BUFFER,
    static_cast{GLsizeiptr}(vertex_values.size()) * 4,
    vertex_values.crawptr().void(), GL_STATIC_DRAW);
  check_error();
  glBindBuffer(GL_ARRAY_BUFFER, 0);
  check_error();
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, vbos[1]);
  check_error();
  glBufferData(GL_ELEMENT_ARRAY_BUFFER,
    static_cast{GLsizeiptr}(elements.size()) * 4,
    elements.crawptr().void(), GL_STATIC_DRAW);
  check_error();
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
  check_error();
  bo.vbo_values = vbos[0];
  bo.vbo_elems = vbos[1];
  /*
  println("values=", bo.num_vertex_values / 8,
    "elems=", bo.num_elements);
  */
  return true;
}

public function void buffer_object_draw(buffer_object const& bo, GLenum mode,
  size_t vs_id, int attr_position, int attr_normal, int attr_uv)
{
  size_t elem_offset;
  size_t elem_num;
  {
    const& be = bo.vs_arr[vs_id];
    elem_offset = be.elements_offset;
    elem_num = be.vtxs->elements.size();
  }
  glBindBuffer(GL_ARRAY_BUFFER, bo.vbo_values);
  check_error();
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, bo.vbo_elems);
  check_error();
  if (attr_position >= 0) {
    glEnableVertexAttribArray(static_cast{uint}(attr_position));
    check_error();
    glVertexAttribPointer(static_cast{uint}(attr_position), 3, GL_FLOAT, 0, 32,
      offset_to_void_cp(0));
    check_error();
  }
  if (attr_normal >= 0) {
    glEnableVertexAttribArray(static_cast{uint}(attr_normal));
    check_error();
    glVertexAttribPointer(static_cast{uint}(attr_normal), 3, GL_FLOAT, 0, 32,
      offset_to_void_cp(12));
    check_error();
  }
  if (attr_uv >= 0) {
    glEnableVertexAttribArray(static_cast{uint}(attr_uv));
    check_error();
    glVertexAttribPointer(static_cast{uint}(attr_uv), 2, GL_FLOAT, 0, 32,
      offset_to_void_cp(24));
    check_error();
  }
  /* TODO: (gles >= 3.0) glDrawRangeElements */
  glDrawElements(mode, static_cast{GLsizei}(elem_num), GL_UNSIGNED_INT,
    offset_to_void_cp(elem_offset * 4));
  check_error();
  if (attr_uv >= 0) {
    glDisableVertexAttribArray(static_cast{uint}(attr_uv));
    check_error();
  }
  if (attr_normal >= 0) {
    glDisableVertexAttribArray(static_cast{uint}(attr_normal));
    check_error();
  }
  if (attr_position != 0) {
    glDisableVertexAttribArray(static_cast{uint}(attr_position));
    check_error();
  }
  glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
  check_error();
  glBindBuffer(GL_ARRAY_BUFFER, 0);
  check_error();
}

public pure struct scene_node()
{
  public int vs_id = -1;
  public glm::mat4 trans;
  public varray{ptr{scene_node}} children;
}

public function{set_normal_func} void
scene_node_draw(scene_node const& sn, buffer_object const& bo,
  glm::mat4 const& model_mat, int attr_position, int attr_normal, int attr_uv)
{
  const mm = model_mat * sn.trans;
  set_normal_func(mm);
  if (sn.vs_id >= 0) {
    bo.draw(GL_TRIANGLES, static_cast{size_t}(sn.vs_id), attr_position,
      attr_normal, attr_uv);
  }
  for (const i, const& snp: sn.children) {
    scene_node_draw{set_normal_func}(*snp, bo, mm, attr_position, attr_normal,
      attr_uv);
  }
}

