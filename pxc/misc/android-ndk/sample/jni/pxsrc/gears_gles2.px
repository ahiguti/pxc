
/* $Id: gears.c,v 1.2 1999/10/21 16:39:06 brianp Exp $ */

/*
 * 3-D gear wheels.  This program is in the public domain.
 *
 * Command line options:
 *    -info      print GL implementation information
 *
 *
 * Brian Paul
 */

/* Conversion to GLUT by Mark J. Kilgard */

/*
 * $Log: gears.c,v $
 * Revision 1.2  1999/10/21 16:39:06  brianp
 * added -info command line option
 *
 * Revision 1.1.1.1  1999/08/19 00:55:40  jtg
 * Imported sources
 *
 * Revision 3.2  1999/06/03 17:07:36  brianp
 * an extra quad was being drawn in front and back faces
 *
 * Revision 3.1  1998/11/03 02:49:10  brianp
 * added fps output
 *
 * Revision 3.0  1998/02/14 18:42:29  brianp
 * initial rev
 *
 */

metafunction debug_matrix 0;

public namespace gears_gles2 "export-unsafe";
import core::common -;
import core::numeric::fpmath -;
import core::numeric::quaternion -;
import SDL2 -;
import GL::gles2 -;
import GL::glm glm;
import core::io::time -;
import core::meta m;
private import core::container::array +; /* extends varray */

private metafunction is_gles m::eq{m::profile{"platform"}, "android"};

float const M_PI = 3.14159265;

metafunction fmat4 farray{float, 16};

glm::mat4 projection;
glm::mat4 modelview_base;
int loc_mvp;
int loc_normal_matrix;
int loc_mate_color;
int loc_vertex;
int loc_normal;
int loc_lightpos;

function void varray_push3(varray{float} mutable& vec, float a, float b,
  float c)
{
  vec.push_back(a);
  vec.push_back(b);
  vec.push_back(c);
}

function uint make_gear_vbo(float inner_radius, float outer_radius,
  float width, int teeth_i, float tooth_depth,
  farray{size_t, 6} mutable& ofs_r)
{
  const teeth = static_cast{float}(teeth_i);
  const r0 = inner_radius;
  const r1 = outer_radius - tooth_depth / 2.0;
  const r2 = outer_radius + tooth_depth / 2.0;

  mutable da = float(2.0) * M_PI / teeth / 4.0;

  varray{float} vec;

  /* draw front face */
  /* triangle strip */
  for (const i : 0 .. teeth_i + 1) {
    const angle = M_PI * 2.0 * static_cast{float}(i) / teeth;
    const z = width * 0.5;
    vec.push3(r0 * cos(angle), r0 * sin(angle), z);
    vec.push3(r1 * cos(angle), r1 * sin(angle), z);
    if (i < teeth_i) {
      vec.push3(r0 * cos(angle), r0 * sin(angle), z);
      vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), z);
    }
  }
  ofs_r[0] = vec.size();

  /* draw front sides of teeth */
  /* triangles */
  da = M_PI * 2.0 / teeth / 4.0;
  for (const i : 0 .. teeth_i) {
    const angle = M_PI * 2.0 * static_cast{float}(i) / teeth;
    const z = width * 0.5;
    /* 0 */
    vec.push3(r1 * cos(angle), r1 * sin(angle), z);
    vec.push3(r2 * cos(angle + da), r2 * sin(angle + da), z);
    vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), z);
    /* 1 */
    vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), z);
    vec.push3(r2 * cos(angle + da), r2 * sin(angle + da), z);
    vec.push3(r2 * cos(angle + da * 2.0), r2 * sin(angle + da * 2.0), z);
  }
  ofs_r[1] = vec.size();

  /* draw back face */
  /* triangle strip */
  for (const i : 0 .. teeth_i + 1) {
    const angle = M_PI * 2.0 * static_cast{float}(i) / teeth;
    const z = -width * 0.5;
    vec.push3(r1 * cos(angle), r1 * sin(angle), z);
    vec.push3(r0 * cos(angle), r0 * sin(angle), z);
    if (i < teeth_i) {
      vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), z);
      vec.push3(r0 * cos(angle), r0 * sin(angle), z);
    }
  }
  ofs_r[2] = vec.size();

  /* draw back sides of teeth */
  /* triangles */
  da = M_PI * 2.0 / teeth / 4.0;
  for (const i : 0 .. teeth_i) {
    const angle = M_PI * 2.0 * static_cast{float}(i) / teeth;
    const z = -width * 0.5;
    /* 0 */
    vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), z);
    vec.push3(r2 * cos(angle + da * 2.0), r2 * sin(angle + da * 2.0), z);
    vec.push3(r1 * cos(angle), r1 * sin(angle), z);
    /* 1 */
    vec.push3(r1 * cos(angle), r1 * sin(angle), z);
    vec.push3(r2 * cos(angle + da * 2.0), r2 * sin(angle + da * 2.0), z);
    vec.push3(r2 * cos(angle + da), r2 * sin(angle + da), z);
  }
  ofs_r[3] = vec.size();

  /* draw outward faces of teeth */
  /* triangle strip */
  const cos0 = float(1.0);
  const sin0 = float(0.0);
  for (const i : 0 .. teeth_i) {
    const angle = M_PI * 2.0 * static_cast{float}(i) / teeth;
    const z = width * 0.5;
    float mutable u;
    float mutable v;
    u = r2 * cos(angle + da) - r1 * cos(angle);
    v = r2 * sin(angle + da) - r1 * sin(angle);
    u /= sqrt(u * u + v * v);
    v /= sqrt(u * u + v * v);
    /* TR0 - up */
    /* L0 */
    vec.push3(v, -u, 0.0); /* normal */
    vec.push3(r1 * cos(angle), r1 * sin(angle), z); /* vertex */
    /* R0 */
    vec.push3(v, -u, 0.0);
    vec.push3(r1 * cos(angle), r1 * sin(angle), -z);
    /* L1 */
    vec.push3(v, -u, 0.0);
    vec.push3(r2 * cos(angle + da), r2 * sin(angle + da), z);
    /* TR1 - up */
    /* L1 */
    vec.push3(v, -u, 0.0);
    vec.push3(r2 * cos(angle + da), r2 * sin(angle + da), z);
    /* R0 */
    vec.push3(v, -u, 0.0);
    vec.push3(r1 * cos(angle), r1 * sin(angle), -z);
    /* R1 */
    vec.push3(v, -u, 0.0);
    vec.push3(r2 * cos(angle + da), r2 * sin(angle + da), -z);
    /* TR2 - flat */
    /* L1 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r2 * cos(angle + da), r2 * sin(angle + da), z);
    /* R1 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r2 * cos(angle + da), r2 * sin(angle + da), -z);
    /* L2 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r2 * cos(angle + da * 2.0), r2 * sin(angle + da * 2.0), z);
    /* TR3 - flat */
    /* L2 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r2 * cos(angle + da * 2.0), r2 * sin(angle + da * 2.0), z);
    /* R1 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r2 * cos(angle + da), r2 * sin(angle + da), -z);
    /* R2 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r2 * cos(angle + da * 2.0), r2 * sin(angle + da * 2.0), -z);
    u = r1 * cos(angle + da * 3.0) - r2 * cos(angle + da * 2.0);
    v = r1 * sin(angle + da * 3.0) - r2 * sin(angle + da * 2.0);
    u /= sqrt(u * u + v * v);
    v /= sqrt(u * u + v * v);
    /* TR4 - down */
    /* L2 */
    vec.push3(v, -u, 0.0);
    vec.push3(r2 * cos(angle + da * 2.0), r2 * sin(angle + da * 2.0), z);
    /* R2 */
    vec.push3(v, -u, 0.0);
    vec.push3(r2 * cos(angle + da * 2.0), r2 * sin(angle + da * 2.0), -z);
    /* L3 */
    vec.push3(v, -u, 0.0);
    vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), z);
    /* TR5 - down */
    /* L3 */
    vec.push3(v, -u, 0.0);
    vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), z);
    /* R2 */
    vec.push3(v, -u, 0.0);
    vec.push3(r2 * cos(angle + da * 2.0), r2 * sin(angle + da * 2.0), -z);
    /* R3 */
    vec.push3(v, -u, 0.0);
    vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), -z);
    /* TR6 - flat */
    /* L3 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), z);
    /* R3 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), -z);
    /* L4 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r1 * cos(angle + da * 4.0), r1 * sin(angle + da * 4.0), z);
    /* TR7 - flat */
    /* L4 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r1 * cos(angle + da * 4.0), r1 * sin(angle + da * 4.0), z);
    /* R3 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r1 * cos(angle + da * 3.0), r1 * sin(angle + da * 3.0), -z);
    /* R4 */
    vec.push3(cos(angle), sin(angle), 0.0);
    vec.push3(r1 * cos(angle + da * 4.0), r1 * sin(angle + da * 4.0), -z);
  }
  ofs_r[4] = vec.size();

  /* draw inside radius cylinder */
  /* triangle strip */
  for (const i : 0 .. teeth_i + 1) {
    const angle = M_PI * 2.0 * static_cast{float}(i) / teeth;
    vec.push3(-cos(angle), -sin(angle), 0.0); /* normal */
    vec.push3(r0 * cos(angle), r0 * sin(angle), -width * 0.5); /* vertex */
    vec.push3(-cos(angle), -sin(angle), 0.0);
    vec.push3(r0 * cos(angle), r0 * sin(angle), width * 0.5);
  }
  ofs_r[5] = vec.size();

  farray{uint, 1} bufs;
  glGenBuffers(1, bufs.rawptr());
  glBindBuffer(GL_ARRAY_BUFFER, bufs[0]);
  glBufferData(GL_ARRAY_BUFFER, static_cast{GLsizeiptr}(vec.size() * 4),
    vec.crawptr().void(), GL_STATIC_DRAW);
  return bufs[0];
}

function void draw_gear_vbo(uint vbo_name, farray{size_t, 6} const& ofs)
{
  const lvtx = static_cast{uint}(loc_vertex);
  const lnor = static_cast{uint}(loc_normal);
  glBindBuffer(GL_ARRAY_BUFFER, vbo_name);
  glEnableVertexAttribArray(lvtx);
  glVertexAttrib3f(lnor, 0.0, 0.0, 1.0);
  /* draw front face */
  glVertexAttribPointer(lvtx, 3, GL_FLOAT, 0, 0, offset_to_void_cp(0));
  glDrawArrays(GL_TRIANGLE_STRIP, 0, static_cast{GLsizei}(ofs[0] / 3));
  /* draw front sides of teeth */
  glVertexAttribPointer(lvtx, 3, GL_FLOAT, 0, 0,
    offset_to_void_cp(ofs[0] * 4));
  glDrawArrays(GL_TRIANGLES, 0, static_cast{GLsizei}((ofs[1] - ofs[0]) / 3));
  glVertexAttrib3f(lnor, 0.0, 0.0, -1.0);
  /* draw back face */
  glVertexAttribPointer(lvtx, 3, GL_FLOAT, 0, 0,
    offset_to_void_cp(ofs[1] * 4));
  glDrawArrays(GL_TRIANGLE_STRIP, 0,
    static_cast{GLsizei}((ofs[2] - ofs[1]) / 3));
  /* draw back sides of teeth */
  glVertexAttribPointer(lvtx, 3, GL_FLOAT, 0, 0,
    offset_to_void_cp(ofs[2] * 4));
  glDrawArrays(GL_TRIANGLES, 0, static_cast{GLsizei}((ofs[3] - ofs[2]) / 3));
  /* use vbo for normals */
  glEnableVertexAttribArray(lnor);
  /* draw outward faces of teeth */
  glVertexAttribPointer(lvtx, 3, GL_FLOAT, 0, 24,
    offset_to_void_cp((ofs[3] + 3) * 4));
  glVertexAttribPointer(lnor, 3, GL_FLOAT, 0, 24,
    offset_to_void_cp(ofs[3] * 4));
  glDrawArrays(GL_TRIANGLES, 0, static_cast{GLsizei}((ofs[4] - ofs[3]) / 3));
  /* draw inside radius cylinder */
  glVertexAttribPointer(lvtx, 3, GL_FLOAT, 0, 24,
    offset_to_void_cp((ofs[4] + 3) * 4));
  glVertexAttribPointer(lnor, 3, GL_FLOAT, 0, 24,
    offset_to_void_cp(ofs[4] * 4));
  glDrawArrays(GL_TRIANGLE_STRIP, 0,
    static_cast{GLsizei}((ofs[5] - ofs[4]) / 6));
  glDisableVertexAttribArray(lnor);
  glDisableVertexAttribArray(lvtx);
}

float gears_angle = 0.0;

pure tsvaluetype struct gear_vbo {
  public uint name;
  public farray{size_t, 6} ofs;
}

farray{gear_vbo, 3} gear_vbos;

function void init_gear_vbos()
{
  gear_vbos[0].name = make_gear_vbo(1.0, 4.0, 1.0, 20, 0.7, gear_vbos[0].ofs);
  gear_vbos[1].name = make_gear_vbo(0.5, 2.0, 2.0, 10, 0.7, gear_vbos[1].ofs);
  gear_vbos[2].name = make_gear_vbo(1.3, 2.0, 0.5, 10, 0.7, gear_vbos[2].ofs);
}

function void deinit_gear_vbos()
{
  for (size_t i : 0 .. 3) {
    const a = gear_vbos[i].name;
    glDeleteBuffers(1, caddress(a));
  }
}

function void draw_gear_vbo_one(int i, glm::mat4 const& mv,
  glm::mat3 const& nm)
{
  glUniformMatrix4fv(loc_mvp, 1, 0, projection.multiply(mv).to_crawptr());
  glUniformMatrix3fv(loc_normal_matrix, 1, 0, nm.to_crawptr());
  glUniform4f(loc_lightpos, 5.0, 5.0, 10.0, 0.0);
  const red = make_farray{float}(0.8, 0.1, 0.0, 1.0);
  const green = make_farray{float}(0.0, 0.8, 0.2, 1.0);
  const blue = make_farray{float}(0.2, 0.2, 1.0, 1.0);
  if (i == 0) {
    glUniform4fv(loc_mate_color, 1, red.crawptr());
    draw_gear_vbo(gear_vbos[0].name, gear_vbos[0].ofs);
  } else if (i == 1) {
    glUniform4fv(loc_mate_color, 1, green.crawptr());
    draw_gear_vbo(gear_vbos[1].name, gear_vbos[1].ofs);
  } else if (i == 2) {
    glUniform4fv(loc_mate_color, 1, blue.crawptr());
    draw_gear_vbo(gear_vbos[2].name, gear_vbos[2].ofs);
  }
}

function void draw_frame(quaternion{float} const& view_angle)
{
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  farray{float, 16} view_angle_arr = view_angle.to_matrix();
  mutable mat_angle = glm::mat4();
  slice{float} mat_angle_slice = mat_angle.to_slice();
  for (size_t i : 0 .. 16) {
    mat_angle_slice[i] = view_angle_arr[i];
  }
  const modelview_cur = modelview_base.multiply(mat_angle);

  function void draw_n(int n, int i, glm::mat4 mutable& mv) {
    mv = mv.translate(glm::make_vec3(0.0, 0.0, -static_cast{float}(n - 1)));
    const nm = mv.to_3().inverse().transpose();
    for (int j : 0 .. n) {
      draw_gear_vbo_one(i, mv, nm);
      if (j != n - 1) {
        mv = mv.translate(glm::make_vec3(0.0, 0.0, 2.0));
      }
    }
    if (m::ne{debug_matrix, 0}) {
      fmat4 m;
      glGetFloatv(GL_MODELVIEW_MATRIX, m);
      debug_log("MODELVIEW", m);
      debug_log("modelview", mv.to_cslice());
    }
  }

  glm::mat4 mutable mv;

  mv = modelview_cur;
  int n_dup = 10;
  mv = mv.translate(glm::make_vec3(-3.0, -2.0, 0.0));
  mv = mv.rotate(gears_angle, glm::make_vec3(0.0, 0.0, 1.0));
  draw_n(n_dup, 0, mv);

  mv = modelview_cur;
  mv = mv.translate(glm::make_vec3(3.1, -2.0, 0.0));
  mv = mv.rotate(gears_angle * static_cast{float}(-2.0) - 9.0,
    glm::make_vec3(0.0, 0.0, 1.0));
  draw_n(n_dup, 1, mv);

  mv = modelview_cur;
  mv = mv.translate(glm::make_vec3(-3.1, 4.2, 0.0));
  mv = mv.rotate(gears_angle * static_cast{float}(-2.0) - 25.0,
    glm::make_vec3(0.0, 0.0, 1.0));
  draw_n(n_dup, 2, mv);
}

function void reshape(int width, int height)
{
  double h = static_cast{double}(height) / static_cast{double}(width);
  glViewport(0, 0, static_cast{GLsizei}(width), static_cast{GLsizei}(height));
  projection = glm::frustum{float}(-1.0, 1.0,
    static_cast{float}(-h), static_cast{float}(h), 5.0, 60.0);
  modelview_base = glm::mat4().translate(glm::make_vec3(0.0, 0.0, -40.0));
}

function uint compile_shader(cstrref const& src, GLenum type)
{
  mutable res = glCreateShader(type);
  mutable source = make_farray{ccharptr}(src.crawptr().char());
  const length = make_farray{int}(static_cast{int}(src.size()));
  glShaderSource(res, 1, source.rawptr(), length.crawptr());
  glCompileShader(res);
  int success;
  glGetShaderiv(res, GL_COMPILE_STATUS, address(success));
  if (success == 0) {
    int sz;
    glGetShaderiv(res, GL_INFO_LOG_LENGTH, address(sz));
    string buf;
    buf.resize(static_cast{size_t}(sz), 0);
    GLsizei len;
    glGetShaderInfoLog(res, static_cast{GLsizei}(sz), address(len),
      buf.rawptr().char());
    debug_log("compile_shader failed:",
      string_join{"\t"}(static_cast{int}(type), success, buf));
    glDeleteShader(res);
    res = 0;
  }
  debug_log("compile_shader", res);
  return res;
}

function uint create_program(cstrref const& vertex_shader,
  cstrref const& fragment_shader)
{
  mutable prog = glCreateProgram();
  uint shader;
  if (!vertex_shader.empty()) {
    shader = compile_shader(vertex_shader, GL_VERTEX_SHADER);
    if (shader != 0) {
      glAttachShader(prog, shader);
    }
  }
  if (!fragment_shader.empty()) {
    shader = compile_shader(fragment_shader, GL_FRAGMENT_SHADER);
    if (shader != 0) {
      glAttachShader(prog, shader);
    }
  }
  glLinkProgram(prog);
  int success;
  glGetProgramiv(prog, GL_LINK_STATUS, address(success));
  if (success == 0) {
    debug_log("create_program failed:", success);
    glDeleteProgram(prog);
    prog = 0;
  }
  debug_log("create_program", prog);
  return prog;
}

function void set_program()
{
  const vert = m::concat{
    "uniform mat4 model_view_projection;\n",
    "uniform mat3 normal_matrix;\n",
    "uniform vec4 lightpos;\n",
    "uniform vec4 mate_color;\n",
    "attribute vec3 vertex;\n",
    "attribute vec3 normal;\n",
    "varying vec4 frag_color;\n",
    "varying vec3 position;\n",
    "void main(void) {\n",
    "  gl_Position = model_view_projection * vec4(vertex, 1.0);\n",
    "  position = vertex;\n",
    "  vec3 nor = normalize(normal_matrix * normal);\n",
    "  vec3 light = normalize(lightpos.xyz);\n",
    "  float diffuse = max(dot(light, nor), 0.0);\n",
    "  frag_color = 0.2 * mate_color + diffuse * mate_color;\n",
    "}\n"};
  const frag = m::concat{
    "varying vec4 frag_color;\n",
    "varying vec3 position;\n",
    "void main(void) {\n",
    "  float kx = float(mod(position.x,0.2)<0.1);\n",
    "  float ky = float(mod(position.y,0.2)<0.1);\n",
    "  gl_FragColor = frag_color * (0.8 + kx * 0.1 + ky * 0.1);\n",
    "}\n"};
  const prog = create_program(vert, frag);
  if (prog != 0) {
    glUseProgram(prog);
    /* mvp */
    loc_mvp = glGetUniformLocation(prog,
      "model_view_projection".crawptr().char());
    loc_normal_matrix = glGetUniformLocation(prog,
      "normal_matrix".crawptr().char());
    loc_lightpos = glGetUniformLocation(prog, "lightpos".crawptr().char());
    loc_mate_color = glGetUniformLocation(prog, "mate_color".crawptr().char());
    loc_vertex = glGetAttribLocation(prog, "vertex".crawptr().char());
    loc_normal = glGetAttribLocation(prog, "normal".crawptr().char());
    println("loc_vertex: ", loc_vertex);
    println("loc_normal: ", loc_normal);
    println("loc_lightpos: ", loc_lightpos);
    println("loc_mate_color: ", loc_mate_color);
    SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("Locations: ",
      loc_vertex, loc_normal, loc_lightpos, loc_mate_color));
  }
}

function void check_error()
{
}

function void init_gl()
{
  glEnable(GL_CULL_FACE);
  glEnable(GL_DEPTH_TEST);
  init_gear_vbos();
  set_program();
}

{
  int init_w = 300;
  int init_h = 300;
  const ini = SDL_Init(SDL_INIT_VIDEO);
  SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
  SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
  const wnd = SDL_CreateWindow("PXC-SDL2Gears", 0, 0, init_w, init_h,
    SDL_WINDOW_RESIZABLE | SDL_WINDOW_OPENGL).some;
  SDL_GetWindowSize(wnd, init_w, init_h);
  const glctx = SDL_GL_CreateContext(wnd);
  SDL_GL_SetSwapInterval(0);

  init_gl();

  reshape(init_w, init_h);

  uint t0 = 0;
  uint t1 = 0;
  uint tprev = SDL_GetTicks();
  uint frames = 0;
  mutable view_angle = quaternion{float}(1.0, 0.0, 0.0, 0.0);

  metafunction ticks_t farray{uint, 5};
  ticks_t ticks;
  ticks_t ticks_sum;
  for (const i, mutable e : ticks) {
    e = tprev;
  }
  function void save_ticks(size_t idx) {
    const prev_tick = ticks[idx == 0 ? ticks.size() - 1 : idx - 1];
    mutable& cur_tick = ticks[idx];
    cur_tick = SDL_GetTicks();
    ticks_sum[idx] += cur_tick - prev_tick;
  }

  bool done = false;
  bool paused = false;
  function void rotate(float x, float y, float z, float angle) {
    const q = quaternion_from_axis_angle{float}(x, y, z,
      angle * M_PI / 180.0);
    view_angle = view_angle.multiply(q);
    view_angle.normalize();
  }
  while (!done) {
    save_ticks(0);
    SDL_Event ev;
    while (SDL_PollEvent(ev)) {
      const etype = ev.type;
      if (etype == SDL_WINDOWEVENT) {
        if (ev.window.event == SDL_WINDOWEVENT_RESIZED) {
          const w = ev.window.data1;
          const h = ev.window.data2;
          SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
            string_join{""}("resized w=", w, " h=", h));
          reshape(w, h);
        }
      } else if (etype == SDL_FINGERMOTION) {
        const dx = ev.tfinger.dx * 500.0;
        const dy = ev.tfinger.dy * 500.0;
        rotate(1.0, 0.0, 0.0, -dy);
        rotate(0.0, 1.0, 0.0, -dx);
      } else if (etype == SDL_MULTIGESTURE) {
        SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
          string_join{""}("multigesture dTheta=", ev.mgesture.dTheta,
            " dDist=", ev.mgesture.dDist));
      } else if (etype == SDL_APP_WILLENTERBACKGROUND) {
        SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("paused"));
        paused = true;
      } else if (etype == SDL_APP_DIDENTERFOREGROUND) {
        SDL_LogWarn(SDL_LOG_CATEGORY_TEST, string_join{""}("resumed"));
        paused = false;
        int w;
        int h;
        SDL_GetWindowSize(wnd, w, h);
        reshape(w, h);
      } else if (etype == SDL_QUIT) {
        done = true;
        break;
      }
    }
    if (paused) {
      SDL_Delay(100);
      continue;
    }
    save_ticks(1);
    {
      draw_frame(view_angle);
      save_ticks(2);
      ++frames;
      uint t = SDL_GetTicks();
      if (t - t0 >= 1000) {
        const seconds = static_cast{float}(t - t0) / 1000.0;
        const fps = static_cast{float}(frames) / seconds;
        SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
          string_join{" "}(frames, "frames in", seconds, "seconds =", fps,
            "fps"));
        SDL_LogWarn(SDL_LOG_CATEGORY_TEST,
          string_join{" "}("ticks: ", ticks_sum));
        ticks_sum = ticks_t();
        t0 = t;
        frames = 0;
      }
      gears_angle += static_cast{float}(t - tprev) / 20.0;
      gears_angle = fmod(gears_angle, 360.0);
      tprev = t;
      if (t - t1 >= 10) {
        if (t - t1 >= 10) {
          t1 += 10;
        }
        SDL_KeyboardState const ks;
        if (ks.Key(SDL_SCANCODE_ESCAPE) != 0) { done = true; }
        if (ks.Key(SDL_SCANCODE_UP) != 0) { rotate(1.0, 0.0, 0.0, 2.0); }
        if (ks.Key(SDL_SCANCODE_DOWN) != 0) { rotate(1.0, 0.0, 0.0, -2.0); }
        if (ks.Key(SDL_SCANCODE_LEFT) != 0) { rotate(0.0, 1.0, 0.0, 2.0); }
        if (ks.Key(SDL_SCANCODE_RIGHT) != 0) { rotate(0.0, 1.0, 0.0, -2.0); }
      }
    }
    save_ticks(3);
    SDL_GL_SwapWindow(wnd);
    save_ticks(4);
  }
  deinit_gear_vbos();
  io::system._exit(0);
}

