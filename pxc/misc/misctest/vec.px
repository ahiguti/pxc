#!/usr/bin/pxc

public namespace vec;
import core::common -;
import core::numeric::cast -;
import core::meta::builtin m;

function {t} ulong test_varray(size_t len, bool reserve_first)
{
  if (len == 0) {
    len = 1000;
  }
  t v;
  for (size_t i : 0 .. len) {
    v.push_back(static_cast{uchar, size_t}(i));
  }
  ulong r;
  for (size_t i, m::symbol{t, "mapped_type"} x : v) {
    r += x;
  }
  return r;
}

function void test_main()
{
  ulong r;
  int a0 = argv.size() > 0 ?
    serialization::positional::decimal_to_integral_nocheck{int}(argv[0]) : 0;
  int a1 = argv.size() > 1 ?
    serialization::positional::decimal_to_integral_nocheck{int}(argv[1]) : 0;
  for (size_t i : 0 .. 1000000) {
    // r += test_varray{varray{uchar}}(static_cast{size_t, int}(a0), a1 != 0);
    // r += test_varray{varray{ushort}}(static_cast{size_t, int}(a0), a1 != 0);
    r += test_varray{string}(static_cast{size_t, int}(a0), a1 != 0);
  }
  println(r);
}

test_main();

