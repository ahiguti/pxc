namespace pyhello;
import common -;
import fuga -;
import meta m;

function {klass} void python_register_class()
{
  metafunction cdef{t} m::concat{
    "boost::python::class_< ", m::csymbol{t}, " >(\"", t, "\"",
      inidef{t}, ")"};
  metafunction concat_sep{lst, sep}
    m::fold{
      lst,
      metafunction{x, y} m::cond{m::eq{x, ""}, y, m::concat{x, ", ", y}},
      ""};
  metafunction inidef{t}
    m::cond{
      m::eq{m::argnum{t}, 0},
      "",
      m::concat{
	", boost::python::init< ",
	m::timing{concat_sep{m::map{m::argtypes{t}, m::csymbol}, ", "}},
	" >()"}};
  metafunction mfdef{t, f}
    m::concat{".def(\"", f, "\", &", m::csymbol{t}, "::", m::csymbol{f}, ")"};
  metafunction mfdefs{t}
    m::fold{
      m::map{m::member_functions{t}, metafunction{f} mfdef{t, f}},
      m::concat, ""};
  metafunction flddef{t, i}
    // TODO: readonly
    m::concat{".def_readwrite(\"", m::at{m::field_names{t}, i}, "\", &",
      m::csymbol{t}, "::", m::csymbol{t, i}, ")"};
  metafunction flddefs{t}
    m::fold{
      m::map{m::seq{m::size{m::fields{t}}}, metafunction{i} flddef{t, i}},
      m::concat, ""};
  extern "emit" m::concat{cdef{klass}, mfdefs{klass}, flddefs{klass}};
}

// python_register_class{fuga::fuga}();

metafunction python_regclass m::csymbol{python_register_class{fuga::fuga}};

extern "types" inline
#include <string>
#include <boost/python.hpp>
;

extern "implementation" inline

// #define BOOST_PYTHON_STATIC_LIB
#include <string>
#include <boost/python.hpp>

typedef pxcrt::pxcvector<unsigned char> pxcstring;
typedef pxcrt::cstrref cstrref;

// struct pxcstr_to_pystr {
//   static PyObject *convert(const pxcstring& s) {
//     return PyString_FromStringAndSize(
//       reinterpret_cast<const char *>(s.rawarr()), s.size());
//   }
// };

struct pystr_to_pxcstr {
  pystr_to_pxcstr() {
    boost::python::converter::registry::push_back(
      &convertible, &construct, boost::python::type_id<pxcstring>());
  }
  static void *convertible(PyObject *obj) {
    if (!PyString_Check(obj)) { return 0; }
    return obj;
  }
  static void construct(PyObject *obj,
    boost::python::converter::rvalue_from_python_stage1_data *data) {
    char *sval = 0;
    Py_ssize_t len = 0;
    PyString_AsStringAndSize(obj, &sval, &len);
    if (sval == 0) { boost::python::throw_error_already_set(); }
    void *storage =
      ((boost::python::converter::rvalue_from_python_storage<pxcstring>*)data)
	->storage.bytes;
    const unsigned char *p = reinterpret_cast<const unsigned char *>(sval);
    new (storage) pxcstring(p, len);
    data->convertible = storage;
  }
};

struct pystr_to_cstrref {
  pystr_to_cstrref() {
    boost::python::converter::registry::push_back(
      &convertible, &construct, boost::python::type_id<cstrref>());
  }
  static void *convertible(PyObject *obj) {
    if (!PyString_Check(obj)) { return 0; }
    return obj;
  }
  static void construct(PyObject *obj,
    boost::python::converter::rvalue_from_python_stage1_data *data) {
    char *sval = 0;
    Py_ssize_t len = 0;
    PyString_AsStringAndSize(obj, &sval, &len);
    if (sval == 0) { boost::python::throw_error_already_set(); }
    void *storage =
      ((boost::python::converter::rvalue_from_python_storage<cstrref>*)data)
	->storage.bytes;
    const unsigned char *p = reinterpret_cast<const unsigned char *>(sval);
    new (storage) cstrref(p, len);
    data->convertible = storage;
  }
};

std::string func_hello(std::string x)
{
  return "Hello " + x;
}

struct hoge {
  hoge() : fld1(), fld2() { }
  hoge(int v0, std::string const& v1) : fld1(v0), fld2(v1) { }
  int m1(int x) { return x + fld1; }
  std::string m2(const std::string& x) { return x + fld2; }
  void m3(std::string& x) { x += "spam"; }
  void m4(pxcstring const& x) { buf = x; }
  pxcstring m5() const { return buf; }
  void m6(cstrref const& x) { buf = x; }
  boost::python::object m7() { return boost::python::eval("1 + 2"); }
  size_t m8(size_t x) { return x + 3; }
  int fld1;
  std::string fld2;
  pxcrt::pxcvector<unsigned char> buf;
};

static void my_init()
{
  // boost::python::to_python_converter<pxcstring, pxcstr_to_pystr>();
  pystr_to_pxcstr();
  pystr_to_cstrref();
  boost::python::def("func_hello", func_hello);
  boost::python::class_<pxcstring>("string", boost::python::init<cstrref>());
  boost::python::implicitly_convertible<pxcstring, cstrref>();
  boost::python::class_<hoge>("hoge")
    .def(boost::python::init<int, std::string>())
    .def("m1", &hoge::m1)
    .def("m2", &hoge::m2)
    .def("m3", &hoge::m3)
    .def("m4", &hoge::m4)
    .def("m5", &hoge::m5)
    .def("m6", &hoge::m6)
    .def("m7", &hoge::m7)
    .def("m8", &hoge::m8)
    .def_readwrite("fld1", &hoge::fld1)
    .def_readwrite("fld2", &hoge::fld2);
}

BOOST_PYTHON_MODULE(pyhello)
{
  my_init();
  %{python_regclass}%();
}

;

extern "incdir"
  "`python -c 'from distutils.sysconfig import *; print get_python_inc()'`";
extern "ldflags" "-lboost_python";

/* pxc --no-execute -p /etc/pxc_dynamic.profile -g pyhello.px */

