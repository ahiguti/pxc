#!/usr/bin/pxc

public namespace decimal;
import common -;
import serialization::positional -;
import numeric::cast -;

public threaded function {t} size_t my_integral_to_decimal(t v,
  strref const& buf)
{
  size_t const buflen = buf.size();
  if (v == 0) {
    extern "disable-bounds-checking" 1;
    if (buflen <= 0) { return 0; }
    buf[0] = '0';
    return 1;
  }
  size_t pos0 = 0;
  size_t pos = 0;
  if (v < 0) {
    extern "disable-bounds-checking" 1;
    if (buflen <= 0) { return 0; }
    buf[0] = '-';
    pos0 = 1;
    pos = 1;
    while (v != 0) {
      extern "disable-bounds-checking" 1;
      if (pos >= buflen) { return 0; }
      t rem = v % 10;
      v /= 10;
      buf[pos] = - static_cast{uchar, t}(rem) + '0';
     ++pos;
    }
  } else {
    while (v != 0) {
      extern "disable-bounds-checking" 1;
      if (pos >= buflen) { return 0; }
      t rem = v % 10;
      v /= 10;
      buf[pos] = static_cast{uchar, t}(rem) + '0';
      ++pos;
    }
  }
  reverse(buf[pos0 .. pos]);
  return pos;
}

function void test1()
{
  string s;
  for (int i : -10000000 .. 10000000) {
    s.resize(0, 0);
    integral_to_decimal(i, s);
  }
}

function void test2()
{
  for (int i : -10000000 .. 10000000) {
    string s;
    integral_to_decimal(i, s);
  }
}

function void test3()
{
  for (int i : -10000000 .. 10000000) {
    string s = to_string(i);
  }
}

function void test4()
{
  string s = "00000000000000000000";
  for (int i : -10000000 .. 10000000) {
    size_t const len = my_integral_to_decimal(i, s);
//    string s1 = s[0 .. len];
//    println(len);
//    println(s1);
  }
}

function void test5()
{
  string s;
  for (int i : -10000000 .. 10000000) {
    s.resize(0, 0);
    integral_to_decimal(i, s);
    string s2 = to_string(i);
    if (s != s2) {
      println("mismatch");
      return;
    }
  }
  println("ok");
}

string arg = argv.size() > 0 ? argv[0] : "";
if (arg == "1") {
  test1();
} else if (arg == "2") {
  test2();
} else if (arg == "3") {
  test3();
} else if (arg == "4") {
  test4();
} else if (arg == "5") {
  test5();
} else {
  println("unknown test");
}

